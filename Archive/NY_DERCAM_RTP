* DER-CAM with 3 daytypes
* version 3.9.4.m
*
* Implement new fiancial incentives for CEC CHPinRest Project
* Set heat storage to operate in High Temperature
* Heat balance for High and Low temperature
* Decoupled heat pumps from absorption chillers
* Heat Pumps code
* 4 CPU threads as standard
* Load shifting code
* Natural gas-only load included in goal function, energy flow and CO2 emissions
* CO2 balance linked with EV charged or discharged at home
* more accurate way of billing electricity sold to/purchase from EV
* consideration of electric vehicles (V2Grid)
* variable PV and solar thermal efficiency and output in m2
* with FiT > purchase tariff
* fixed output rows to simplify automated runs
* with refrigeration load consideration
* ZNEB & Multi-Objective
* with thermal and electrical storage
* with sprint capacity function
* Please change the system efficiency! DSM and sales need to be considered.

* ----------------------------
* > Last revision <
* Date: 2013/09/06
* By: Lenaig Le Gall
* Version 3.9.4.m
* 3 daytype optimization over multiple years (here over 5 years)
* New features :
*     - Opportunity to consider trends in building loads and utility tariffs (electricity rates, fuel prices, utility services...),
*     - Opportunity to consider optimal reinvestments through a dedicated option,
*     - Linear model for stationary battery degradation.
*
* ----------------------------

* >DER-CAM Team<
* Michael Stadler
* Chris Marnay
* Afzal Siddiqui
* Jonathan Donadee
* Olivier Mégel
* Ilan Momber
* Sebastian Beer
* Gonçalo Cardoso
* Judy Lai
* Markus Groissböck
* ----------------------------

* >Copyright<
* Copyright by Lawrence Berkeley National Laboratory (Berkeley Lab),
* Technology Evaluation, Modeling, and Assessment Group
* ----------------------------

* >Contact<
* Contact:
* Michael Stadler
* Lawrence Berkeley National Laboratory
* 1 Cyclotron Road
* Mailstop 90R4000
* Berkeley, CA 94720, USA
* Tel: +1.510.486.4929
* Fax: +1.510.486.6996
* Email: MStadler@lbl.gov
* http://der.lbl.gov/

* Licensing contact:
* Pamela Seidenman
* Marketing Manager
* Technology Transfer and Intellectual Property Management
* Lawrence Berkeley National Lab
* One Cyclotron Road, MS 90-1070
* Berkeley, CA 94720
* tel: +1.510.486.6461
* fax: +1.510.486.6457
* PSSeidenman@lbl.gov
* ----------------------------


* >Acknowledgment<
* Development of this program was begun in 2000 by the Consortium for Electric Reliability Technology Solutions.
* It has been continued with funding provided by the Office of Electricity Delivery and
* Energy Reliability of the U.S. Department of Energy under contracts DE-AC03-76SF00098
* and DE-AC02-05CH11231. Additional support has been provided by the California Energy Commission,
* Public Interest Energy Research Program, under Work for Others Contract No. 150-99-003, 500-07-043, 500-99-013.
* ----------------------------


* >General DER-CAM file Information<
* Distributed Energy Resources Customer Adoption Model (DER-CAM)
* DER-CAM is a software tool developed at the Berkeley Lab in which the economically optimal CHP DER system
* is determined for a site, given the site's energy usage, utility tariffs, and DER equipment options.
* Equipment options include natural gas-fired generators such as reciprocating engines, microturbines,
* and fuel cells; heat recovery and utilization equipment such as heat exchangers and absorption chillers;
* and photovoltaics.

* DER-CAM is written as mixed integer linear program, written in the optimization platform,
* General Algebraic Modeling System (GAMS).  The CPLEX solver is used to solve the program.

* Key inputs to DER-CAM include:
* End-use load profiles
*        electricity only: loads that can only be met by electricity
*        cooling
*        space heating
*        water heating
*        natural gas only (such as cooking and distributed heating)
* Electricity tariff
*        volumetric ($/kWh) prices, varying by time of use and by month
*        demand ($/kW) prices, varying by time of use and by month
*        fixed ($) monthly fees
* Natural gas tariff
*        volumetric ($/kWh) prices, varying by type of use (DG, cooling, or other) and month
*        fixed ($) monthly fees
* Distributed generation costs
*        amortized capital costs for equipment, system design, and installation
*        fixed ($/kW capacity) annual maintenance costs
*        variable ($/kWh) maintenance costs
* Distributed generation performance
*        electrical efficiency
*        heat to electricity ratio for combined heat and power systems
*        minimum and maximum load
* Energy Conversion Efficiency
*        recovered heat used for heating and absorption cooling
*        natural gas used for heating and absorption cooling
*        electricity used for cooling
* Subject to constraints such as
*        maximum payback period
*        minimum CHP efficiency
*        maximum operation hours
* Key outputs include
*        optimal CHP investment
*        operating schedule
*        energy costs
*        fuel consumption and emissions
* ----------------------------

* >Specific DER-CAM file Information<
* City: Oakland ("OAK")
* Building type: Nursing Home ("NH")
* Tariffs: PG&E
* Solar data from San Francisco
* Year: 2006
* Considered DER technologies:
* XXX
* ----------------------------

* >Tree View Structure for front-end tool<
* Please note that the name of the table, parameter, and scalar must be exactly the same as specified in the sections below. If the name differs the front-end can not
* read the hierarchy structure and the table, parameter, scalar. However, do not use the term 'TABLE' and 'PARAMETERS' in the hierarchy structure!
*%h1
*/1/{Simulation Settings};/2/OptionsTable (ModelOption,OptionsVariable) Model Options*%?t;/2/ParameterTable (ParameterOption, ParameterDummy) Parameters for user input*%?t
*/1/{Weather Data};/2/SolarInsolation (months, hours)   Avg. fraction of max. solar insolation (1000W per square meter)*%?t;/2/AmbientHourlyTemperature(months, hours)   in °Celsius*%?t;/2/OtherLocationData (OptionsVariable2) wind speed m per s*%?p
*/1/{Load Data};/2/Load (enduse, months, daytypes, hours)*%?t;/2/NumberOfDays (months, daytypes) days of each type*%?t
*/1/{Load Reduction Measures};/2/DemandResponseParameters (DemandResponseType,DemandResponseInvestParameters)*%?t;/2/DemandResponseParametersHeating (DemandResponseType,DemandResponseInvestParameters)*%?t
*/1/{Load Shift Measures};/2/Table SchedulableLoadParameterTable (SLParameterOption, SLParameterValue) Parameters for user input*%?t
*/1/{Technology Data};/2/{DG};/3/GenConstraints (TECHNOLOGIES, GeneratorConstraints)*%?t;/3/DEROPT (TECHNOLOGIES, TECH_CHARACTERISTICS) DER technologies  information*%?t;/3/Beta (enduse)*%?P;/2/{Direct-fired NG chillers};/3/NGChiller ( NGChillTech, NGChillTechParameter)   direct-fired NG chiller cost and performance parameters*%?t;/3/NGChillForcedInvest (NGChillTech, NGChillForcedInvestParameters)*%?t;/2/{Electric Storage};/3/ElectricityStorageStationaryParameter(StorageParameters)*%?P;/3/ElectricityStorageEVParameter(StorageParameters)*%?P;/3/Electricity_Exchange_EV*%?P;/2/{Heat Storage};/3/HeatStorageParameter(StorageParameters)*%?P;/2/{Heat Pumps};/3/HeatPumpParameterValue(ContinuousInvestType, HeatPumpParameters)*%?t;/2/{Flow Battery};/3/FlowBatteryParameter(StorageParameters)*%?P;/2/ContinuousInvestParameter(ContinuousInvestType,ContinuousInvestParameters)*%?t;/2/ContinuousVariableForcedInvest (ContinuousInvestType,ContForcedInvestParameters)*%?t;/2/StaticSwitchParameter (StaticSwitchParameters)*%?p;/2/COP_Electric_Abs_Chillers*%?p;/2/COP_Electric_Abs_Refrigeration*%?p
*/1/{Fuel Information};/2/FuelPrice (months, FuelType) Fuel Costs*%?t;/2/CO2EmissionsRate (FuelType)*%?P
*/1/{Utility Data};/2/HourlyMarginalCO2Emissions*%?t;/2/MonthlyFee (service)*%?p;/2/MonthlyDemandRates (months, DemandType)*%?t;/2/DailyDemandRates(months, DemandType)*%?t;/2/CoincidentHour(months)   Hour of month that coincident demand charges are applied to*%?p;/2/ElectricityRates (months, TimeOfDay) Monthly volumetric and demand charges*%?t;/2/ListOfHours (hours, seasons, daytypes)*%?t;/2/MonthSeason (months, seasons)*%?t
*/1/{EVs parameters};/2/ElectricityStorageEVParameter(StorageParameters)*%?p
*/1/{Financial Incentives};/2/{Feed In Tariffs};/3/FeedInOptions(FeedInParameters, OptionsVariable) "Feed-in Tariff Requirements"*%?t;/3/PX (months, daytypes, hours) "IE prices in $/kWh"*%?t;/2/{SGIP};/3/SGIPOptions(SGIP_Parameters, OptionsVariable) "SGIP Options"*%?t;/3/SGIPIncentives(TECHTYPE, OptionsVariable) "SGIP incentives by technology"*%?t
*%h2
* -----------------------------

* output restrictions
* Map control
$OFFSYMXREF OFFSYMLIST OFFUELLIST OFFUELXREF
* ----------------------------

$ontext
Iterationoptions/subsystem
Limrow: This controls the number of rows that are listed for each equation
in the EQUATION LISTING section of the listing file.
Specify zero to suppress the EQUATION LISTING altogether.
Limcol: This controls the number of columns that are listed for each
variable in the COLUMN LISTING section of the listing file.
Specify zero to suppress the COLUMN LISTING altogether.
Sysout: This option controls the printing of the solver status file as part of the listing file.
SolPrint: This option controls the printing of the model solution in the listing file.
ITERLIM: Iteration limit
Reslim: Time limit for solver in CPU sec.
optcr: Relative termination criterion, default =0.1
Decimals: Number of decimals printed for symbols not having a specific
print format attached. Range: 0 to 8 (default = 3)
$offtext

OPTION LIMROW=0;
Option LIMCOL=0;
OPTION SYSOUT=OFF;
Option SOLPRINT=OFF;
OPTION ITERLIM=5000000;
*2 hours max. execution time
OPTION Reslim =7200;
*requested
OPTION optcr = 0.0025;
OPTION DECIMALS=8;

$onecho > cplex.opt
threads 4
$offecho
* ---------------------------

* SET DECLARATIONS
Sets
* Sets needed for Simulation Options
* 2013/05/31. Lenaig added the option "RenewInvestments" that allows/does not allow optimal new investments in technologies.
    ModelOption 'model options'
        / DiscreteInvest, ContinuousInvest, No_HP_Elec_WH, NGChillInvest, RenewInvestments, Sales, PVSales, NetMetering, InvestmentConst,  SwitchInvest,  StandbyOpt, VaryPrice,
          CHP, CO2Tax, MinimizeCO2, ZNEB, MultiObjective, DiscreteElecStorage, LS, CentralChiller, GSHPAnnualBalance, FuelCellConstraint, Regulation_FromStorage /

    OptionsVariable 'dummy name' / OptionValue /

    OptionsVariable2 / WindSpeed /

* Sets needed for Simulation Parameters
    ParameterOption 'model options'
        / IntRate,Standby, Contrct, turnvar, CO2Tax,
          macroeff, cooleff, BaseCaseCost, MaxPaybackPeriod, FractionBaseLoad,FractionPeakLoad,ReliabilityDER,
          MaxSpaceAvailablePVSolar, PeakPVEfficiency, MultiObjectiveMaxCosts, MultiObjectiveMaxCO2, MultiObjectiveWCosts, MultiObjectiveWCO2, RateMultiplier, CycleLife /


    ParameterDummy 'dummy name' / ParameterValue /

    SLParameterOption 'Schedulable Load model options'
        / PercentageSchedulablePeak, PercentageSchedulableWeek, PercentageSchedulableWeekend, MaxLoadInHour, MaxIncrease /
    SLParameterValue 'Schedulable Load parameter Value'
        / ParameterValue /

* Sets needed for finding the optimum solution
*2013/03. Lenaig added a new set for years. This set can be modified by the DER-CAM user to define the time horizon of the optimization. It has been tested up to 10 years.
    YEARS           years
        / 1 * 1 /
*2013/05/31. Lenaig added a subset years_counter for the reason below.
    years_counter(YEARS)   the subset of years that is used to sum annualized capital costs or capacities from different investments
    MONTHS          months
        / january, february, march, april, may, june,
          july, august, september, october, november, december /
    DAYTYPES        load type
        / week, peak, weekend /
    WEEKANDPEAKDAYS (daytypes) week-peak
        / week, peak /
    FUELTYPE        types of fuel
        / Solar, NGbasic, NGforAbs, NGforDG, Diesel /
    TECHTYPE        type of technology
        / FuelCell, GasTurbine, ICEDiesel, ICENG, Microturbine, Photovoltaics /
    SERVICE         types of utility service
        / UtilElectric, UtilNGbasic, UtilNGforDG, UtilNGforABS, UtilDiesel /
    HOURS           24 hours
        / 1 * 24 /
    ENDUSE          enduse
        / electricity-only, cooling, refrigeration, space-heating, water-heating, naturalgas-only /
    SEASONS         two seasons
        / summer, winter /
    TIMEOFDAYPLUS   load periods including coincident
        / on, mid, off, coincident /
    TIMEOFDAY (TIMEOFDAYPLUS)   load periods
        / on, mid, off /
    TARIFFCOMPONENT energy or power
        / energy, power, coincident, MonthlyDemand, DailyDemand /
*%ss
    TECHNOLOGIES         der and chp technologies
        / ICE-small-20________, ICE-med-20__________, GT-20_______________, MT-small-20_________, MT-med-20___________,
          FC-small-20_________, FC-med-20___________, ICE-HX-small-20_____, ICE-HX-med-20_______, GT-HX-20____________,
          MT-HX-small-20______, MT-HX-med-20________, FC-HX-small-20______, FC-HX-med-20________, FC-HX-small-20-wSGIP,
          FC-HX-med-20-wSGIP__, ICE-small-30________, ICE-med-30__________, GT-30_______________, MT-small-30_________,
          MT-med-30___________, FC-small-30_________, FC-med-30___________, ICE-HX-small-30_____, ICE-HX-med-30_______,
          GT-HX-30____________, MT-HX-small-30______, MT-HX-med-30________, FC-HX-small-30______, FC-HX-med-30________,
          FC-HX-small-30-wSGIP, FC-HX-med-30-wSGIP__, MT-HX-small-30-wSGIP, MT-HX-med-30-wSGIP__ /

    TECH_CHARACTERISTICS   der characteristics
        / maxp, lifetime, capcost, OMFix,
          OMVar, SprintCap, SprintHours, Fuel, Type,wasteheat,
          efficiency, alpha, chpenable, coolenable, SGIPIncentive, AllowFeedIn, NoxRate, NoxTreatCost /
    NGChillTech            Direct-fired chillers
        / NGCHILL--------00100, NGCHILL--HX----00100 /
    NGChillTechParameter   direct-fired chiller characteristics
        / maxp, lifetime, capcost, OMFix, OMVar, COP_025, COP_050, COP_075, COP_100, alpha, chpenable /
    NGChillForcedInvestParameters forced invest parameters
        / ForcedInvest, ForcedInvestQuantity /

    ENDUSEFUELS            fuel for all uses
        / Sun, NGDG, NGheat, NGabs, Diesel /
    FUELS (EnduseFuels)    fuels for DG
        / Sun, NGDG, Diesel /
    COINCSET               the coincident set
        / coincident /
    COINC_PARAMETERS       coindident demand paramters
        / coincrate, coinchour /

*TK adders for demand costs based on imperfect reliability
    DisplayMonths (months) the months for which to display hourly disaggregated load data
        / january, july /
    AvailableTECHNOLOGIES(TECHNOLOGIES)      the subset of technologies available for purchase

*GC added the fuel cell subset to deal with the fuel cell startup and shutdown constraint
*01/16/2012
    AvailableFCTechnologies(TECHNOLOGIES)    the subset of available technologies that are Fuel Cells

    AvailableCHPTechnologies(TECHNOLOGIES)   the subset of available technologies that have CHP
    AvailableSGIPTechnologies(TECHNOLOGIES)  the subset of available technologies that have CHP and SGIP incentives

    EnduseRateNGheat(enduse)  NG enduses that get the basic NG rate
        / space-heating, water-heating, naturalgas-only /
    EnduseRateNGabs(enduse)   NG enduses that get the absorption cooling NG rate
        / cooling/
    GeneratorConstraints      types of generator constraints
        / MaxAnnualHours, MinLoad,  ForcedInvest, ForcedNumber /
    DemandType types of demand charges
        / coincident, noncoincident, onpeak, midpeak, offpeak /

    StorageParameters storage parameters for heat or electricity
        / EfficiencyCharge, EfficiencyDischarge, Decay, SelfDischarge, BatteryDegradation, MaxChargeRate, MaxDischargeRate, DiscreteSize, MaxDepthOfDischarge, ConnectingHourOffice,
          DisconnectHourOffice, BeginingHomeCharge, EndHomeCharge, FractionBatteryJourney, BatteryJourney, MinSOCConnect, MinSOCDisconnect,
          MaxStateOfCharge, MaxSOConnect, MaxSOCDisconnect, MaximumSize /
* FractionBatteryJourney and BatteryJourney not used yet
*2013/03/22. Lenaig renamed "Decay" and "MinStateOfCharge", replaced them by "SelfDischarge" and "MaxDepthOfDischarge" and then, added 'BatteryDegradation'.
    ContinuousInvestType     continuous investment type
        / ElectricStorage, HeatStorage, AirSourceHeatPump, GroundSourceHeatPump, FlowBatteryEnergy,
          FlowBatteryPower, AbsChiller,  Refrigeration, PV, SolarThermal, EVs1 /
    ContinuousInvestParameters continuous investment parameters
        / VariableCost, Lifetime, FixedMaintenance /
    ContForcedInvestParameters   continuous forced investment parameters...
        / ForcedInvest, ForcedInvestCapacity /

    HeatPumpParameters   specific heat pump parameters
        / COP_heating, COP_cooling, BoreholeCost, HeatTransferBorehole_Cooling, HeatTransferBorehole_Heating /

    StaticSwitchParameters static switch parameters
        / CostM, CostB, Lifetime, Value, ForcedInvest /

    DemandResponseType / low, mid, high /
    DemandResponseInvestParameters / VariableCost, MaxContribution,MaxHours /

    FeedInParameters feed in tariff options
        / MaxInstalledCapacity, MaxExportCapacity, MinHeatRecovered, MinHHVefficiency, MinLHVefficiency /
    SGIP_Parameters
        / enableSGIP, SGIPPercentage, MinSGIPHeatRecovered, MinSGIPHHVefficiency, MinSGIPLHVefficiency, MinSGIPHHVElectricEfficiency, MaxElectricityExport, MaxNoxRate /
    SGIP_Years
        / 1*5 /
;
* ---------------------------

* PARAMETER_DECLARATIONS
*TK this can be with the statement of parameter value
*2013/03. Lenaig - added a year index to some parameters
*                - turned annual parameters needed for the output into 'all period' parameters
*                  (example : "AnnualElectD", annual electricity-only load demand refering to the typical year,
*                   is changed to "AllPeriodElectD" which refers to the total electricity-only load demand for
*                   the considered period (=number of years defined in sets))
PARAMETERS
    MonthlyParameters (years)
*   KWHCost(months,TECHNOLOGIES)  'Energy cost             ($/kWh)'
    ContractDemand (years)            ContractDemand (kW)
*    ContractCost (years,months)       Contract Demand Cost ($)
    ElectricLoadEstimate (years,months,daytypes,hours) a priori stimate of electricity load
    GenNumPenalty(years,TECHNOLOGIES)

*   Needed for the Output
    InsCap             Installed discrete technologies
    InsCHPCap          Installed CHP electric capacity
    AllPeriodElectD          All Period Electricity-Only Load Demand (kWh)
    AllPeriodCoolD           All Period Cooling Demand (kWh)
    AllPeriodRefrD           All Period Refrigeration Demand (kWh)
    AllPeriodSpaceD          All Period Space Heating Demand (kWh)
    AllPeriodWaterD          All Period Water Heating Demand (kWh)
    AllPeriodNatGasOnlyD     All Period Natural Gas-Only Heating Demand (kWh)
    AllPeriodEnergyD         All Period Total Energy Demand (kWh)
    AllPeriodNGforHeatConsumption      All Period natural gas consumption for heating and hot water (kWh)
    AllPeriodGasDER          All Period natural gas purchase for DER (kWh)
    AllPeriodGASDERCosts     All Period natural gas costs for DER ($)
    AllPeriodElectGen        All Period electricity generation from PV + DER (kWh)
    AllPeriodNGChillers      All Period natural gas consumption for Chillers (kWh)
    AnnualTotalEnergyConsumption(years)  Annual total energy consumption (NG + Input for electricity) (kWh)
    AllPeriodTotalEnergyConsumption  All Period total energy consumption (NG + Input for electricity) (kWh)
    SystemEfficiency   Total system efficiency (on-site and off-site), without NG-only load
    SystemEfficiency2  Total system efficiency (on-site and off-site), with NG-only load
    CHPSGIPEfficiency  SGIP CHP efficiency

;
* ----------------------------

*********************************************************
*********   SIMULATION OPTIONS   ************************
*********************************************************
*
* All tables and parameters shown in the front-end tool are listed first
* to increase the performance of the tool
*SB!!! For cleanup purposes, I deleted the OptionsTable text. Notes can be found in OptionsTable.txt
* file TMP4 / tmp4.txt /
* $onecho  > tmp4.txt
*   i="OptionsTable.xls"
*   r1=OptionsTable
*   o1=OptionsTable
* $offecho
* $call xls2gms @"tmp4.txt"
* Table OptionsTable(ModelOption, OptionsVariable) Model options
* $include  OptionsTable
* ;
*execute 'del tmp4.txt OptionsTable' ;

****************************************************
********   DATA   **********************************
****************************************************
*Sb!!! for cleanup purposes, I deleted the ParameterTable text. Notes can be found in ParameterTable.txt
* file TMP2 / tmp2.txt /
* $onecho  > tmp2.txt
*    i="ParameterTable.xls"
*    r1=ParameterTable
*    o1=ParameterTable
* $offecho
* $call xls2gms @"tmp2.txt"
* Table ParameterTable(ParameterOption, ParameterDummy) Parameters for user input
* $include  ParameterTable
* ;
* execute 'del tmp2.txt ParameterTable' ;
* -----------------------------
Positive Variables
     ElectricityStoredStationary(years,months,daytypes,hours)
     ElectricityStorageStationaryCapacity(years,months)
* 2013/03/22. Lenaig. ElectricityStorageStationaryCapacity = Total installed capacity    minus     capacity loss due to battery degradation
     ElectricityStorageStationaryInput(years,months,daytypes,hours)
     ElectricityStorageStationaryOutput(years,months,daytypes,hours)
     ElectricityStorageStationaryLosses(years,months,daytypes,hours)

     FlowBatteryStored(years,months,daytypes,hours)
     FlowBatteryInput(years,months,daytypes,hours)
     FlowBatteryOutput(years,months,daytypes,hours)
     FlowBatteryLosses(years,months,daytypes,hours)
     UpfrontCapitalCost_DiscTech (Technologies,years)
     UpfrontCapitalCost_ContTech (ContinuousInvestType,years)
     UpfrontCapitalCost_NGChill  (NGChillTech,years)
     UpfrontCapitalCostBoreHole  (ContinuousInvestType,years)
     UpfrontCapitalCost_StaticSwitch (years)
     UpfrontCapitalCost (years)
;
* 2020 day distribution
* Data Section and calculation of associated parameters
TABLE NumberOfDays (months, daytypes) days of each type
            peak      week      weekend
* Please use this table to specify the number of peak, week, and weekend days
* for each month. If the year you are considering is a leap year please note
* the relation between this table and table 'GenConstraints(TECHNOLOGIES, GeneratorConstraints).
* If you are using 8760 hours for MaxAnnualHours in 'GenConstraints(TECHNOLOGIES, GeneratorConstraints)'
* and a leap year, the 8760 hours must be replaced by 8784 hours,
* otherwise the DER equipment is not allowed to run the whole year.

January     3         20        8
February    3         17        9
March       3         19        9
April       3         19        8
May         3         18        10
June        3         19        8
July        3         20        8
August      3         18        10
September   3         19        8
October     3         19        9
November    3         18        9
December    3         20        8
;
*SB!!! For cleanup purposes, I deleted the SolarInsolation and AmbientHourlyTemperature, energy price and PX tables. Notes can be found in LocationData.txt
Parameter
OtherLocationData (OptionsVariable2) wind speed m per s
/
WindSpeed 5
/;

* California (2020)
Table HourlyMarginalCO2Emissions (months,hours)
            1            2            3            4            5            6            7            8            9            10           11           12           13           14           15           16           17           18           19           20           21           22           23           24
* all numbers in kgC02/kWh

January     .481746583   .480936526   .494054128   .486273062   .485150078   .509145785   .525330791   .516663906   .507155512   .497523708   .504104566   .503535631   .508636132   .492484539   .510616570   .525129430   .520751755   .512332234   .506786653   .488385143   .519013373   .509525247   .497797880   .4736548
February    .504965908   .521956621   .507946724   .530684710   .516157864   .506402525   .507069358   .529334700   .509769645   .503835412   .492813116   .486018443   .489844955   .501052230   .496736778   .496172794   .527699663   .539537123   .515270076   .506900737   .495170836   .498236731   .491622390   .488536277
March       .505358200   .556058867   .557902993   .547899422   .529392109   .520293926   .500453832   .501196474   .486287422   .484293627   .474786678   .482221377   .482418787   .486844493   .493572540   .495440217   .487876409   .498711987   .491089313   .483829801   .484754768   .487540816   .491126213   .513775955
April       .524414291   .546542175   .616499733   .604602223   .559804894   .502737779   .532098798   .509197359   .507965060   .501644473   .502819122   .506566405   .498736634   .505787333   .507096546   .479762340   .517789125   .517457840   .487059887   .580973896   .541363252   .507696174   .516368172   .506394334
May         .531052814   .564394651   .580164246   .565106113   .544601901   .495560258   .522344909   .513489470   .499671515   .485817883   .483296476   .491006655   .480577680   .481858705   .496508359   .518177756   .533902773   .483607966   .492716847   .526674433   .496700878   .482293432   .499074396   .511605014
June        .500379835   .485026777   .539777959   .538613995   .428604814   .493172920   .513156044   .509790898   .460039986   .483845887   .496333347   .469993837   .502262812   .514911172   .514323199   .519923212   .556999724   .507665457   .494186101   .467815537   .501936022   .501372080   .467074771   .477093349
July        .482737281   .496777447   .483691470   .490346581   .504696274   .492577859   .492545235   .511379084   .517888908   .517763346   .516429018   .538962490   .556764008   .514828790   .481551860   .453167394   .525339169   .530317752   .529394542   .533351049   .522514340   .511569534   .488972303   .478241591
August      .519714278   .511717295   .520024780   .518496413   .534491071   .518157568   .512587080   .491244194   .505201984   .519342537   .535581403   .540975659   .532140653   .544072205   .510542486   .542147949   .516241280   .528391058   .545484781   .563651832   .531649848   .510696889   .511494442   .527223514
September   .511319061   .480955649   .492512363   .511786053   .485706068   .532907631   .506533210   .516833168   .526934300   .518591994   .517868893   .540586242   .541014058   .511214335   .543120744   .490953192   .527608904   .544533074   .549210015   .542517392   .540444325   .535969879   .501807315   .513738185
October     .489221462   .495747928   .501436070   .506515208   .516648487   .502418965   .529823131   .529581737   .513463098   .504507803   .515139670   .510499716   .523030811   .508510248   .509772396   .512870721   .528474178   .521526414   .523091542   .519102938   .499143006   .488738925   .494584203   .491702767
November    .503811212   .499479136   .503063669   .514076285   .501754091   .492877271   .520685843   .502337031   .523283088   .508793314   .510443889   .503323776   .515631365   .511405326   .516234281   .512005592   .523321493   .518881813   .504159909   .504846578   .511652307   .503999470   .492158646   .489155284
December    .486977303   .506978290   .505844562   .502001081   .516669050   .501390618   .523289251   .508057703   .517834019   .503992296   .497395331   .505513615   .521762796   .510844657   .510961287   .526539345   .531712554   .526834337   .517609932   .505767436   .503938689   .495273795   .507042574   .486324336
;
*2014/25/10 Gas prices changes

* PGE
Table ListOfHours (hours, seasons, daytypes)
            summer.week      summer.peak      summer.weekend   winter.peak      winter.week      winter.weekend
* Please enter the on-peak, mid-peak, and off-peak periods for each season and daytype.
* on-peak = 1, mid-peak = 2, off-peak = 3

1           3                3                3                3                3                3
2           3                3                3                3                3                3
3           3                3                3                3                3                3
4           3                3                3                3                3                3
5           3                3                3                3                3                3
6           3                3                3                3                3                3
7           3                3                3                3                3                3
8           3                3                3                3                3                3
9           2                2                3                2                2                3
10          2                2                3                2                2                3
11          2                2                3                2                2                3
12          2                2                3                2                2                3
13          1                1                3                2                2                3
14          1                1                3                2                2                3
15          1                1                3                2                2                3
16          1                1                3                2                2                3
17          1                1                3                2                2                3
18          1                1                3                2                2                3
19          2                2                3                2                2                3
20          2                2                3                2                2                3
21          2                2                3                2                2                3
22          2                2                3                2                2                3
23          3                3                3                3                3                3
24          3                3                3                3                3                3
;

* PGE
Table MonthSeason (months, seasons)
            Summer   Winter
* Please specify the summer and winter months.
* 1 = enabled, 0 = disabled

January     0        1
February    0        1
March       0        1
April       0        1
May         1        0
June        1        0
July        1        0
August      1        0
September   1        0
October     1        0
November    0        1
December    0        1
;

Table DailyDemandRates1 (months, DemandType)
            coincident      noncoincident   onpeak          midpeak         offpeak
* (all in $/kW)

January     0               0               0               0               0
February    0               0               0               0               0
March       0               0               0               0               0
April       0               0               0               0               0
May         0               0               0               0               0
June        0               0               0               0               0
July        0               0               0               0               0
August      0               0               0               0               0
September   0               0               0               0               0
October     0               0               0               0               0
November    0               0               0               0               0
December    0               0               0               0               0
;
*2013/09/06. Lenaig renamed "DailyDemandRates(months,DemandType)" as "DailyDemandRates1(months,DemandType)"
*and defined "DailyDemandRates(years,months,DemandType)" with a year index. This enables to consider a trend in daily demand rates.
Parameter DailyDemandRates (years, months, DemandType);
DailyDemandRates (years, months, DemandType) = DailyDemandRates1 (months, DemandType);
***

TABLE SGIPOptions(SGIP_Parameters, OptionsVariable) "SGIP Options"
                             OptionValue
*Use this table to set the SGIP general options
*
* enableSGIP                controls whether or not to consider SGIP incentives
*    (setting this number to zero will disable all technologies with SGIP incentives)
* SGIPPercentage            percentage of SGIP incentive to consider. SGIPercentage = 1 means 100% of SGIP incentive
* MinSGIPHeatRecovered      minimum share of recovered heat in all SGIP technologies
* MinSGIPHHVefficiency      minimum HHH global fuel efficiency
* MinSGIPLHVefficiency      minumum LHV global fuel efficiency
* MinHHVElectricEfficiency  minimum HHV electric fuel efficiency
* MaxElectricityExport      maximum global share of electricity export allowed to get SGIP incentives
* MaxNOxRate                maximum NOx rate allowed in SGIP Technologies. Units kg / MWh (NOTE UNITS)

enableSGIP                   0
SGIPPercentage               1.00
MinSGIPHeatRecovered         0.05
MinSGIPHHVefficiency         0.60
MinSGIPLHVefficiency         0.425
MinSGIPHHVElectricEfficiency 0.40
MaxElectricityExport         0.25
MaxNOxRate                   0.03175
;
*2014/25/10 Incentives are zero
Table SGIPIncentives(TECHTYPE, OptionsVariable) "SGIP incentives by technology"
                         OptionValue
*Use this table to set the SGIP Incentive value
*Values are in $/ W (NOTE UNITS)

FuelCell                 0
GasTurbine               0
ICENG                    0
MicroTurbine             0
;

TABLE FeedInOptions(FeedInParameters, OptionsVariable) "Feed-in Tariff Requirements"
                         OptionValue
*These parameters are used in
*MaxInstalledCapacity is the maximum total capacity the system can have in order to apply for electricity sales
*MaxExportCapacity is the maximum capacity the system can export
*MinHeatRecovered is the minimum share of heat recovered by CHP systems [ Heat / (Heat + Electricity) ] in order to qualify for the Feed-in-Tariffs
*MinHHVefficiency is the minimum HHV fuel consumption efficiency at rated capacity
*MinLHVefficiency is the minimum LHV fuel consumption efficiency at rated capacity

MaxInstalledCapacity     20000
MaxExportCapacity        5000
MinHeatRecovered         0.05
MinHHVefficiency         0.60
MinLHVefficiency         0.425
;

* note that not all of the technology data is in here
* should make HX an option for each tech,(i.e. just have one line per tech and just add $/kW cost for HX)
TABLE DEROPT (TECHNOLOGIES, TECH_CHARACTERISTICS) DER technologies  information
                       maxp            lifetime        capcost         OMFix           OMVar           SprintCap       SprintHours     Fuel            Type            efficiency      alpha           Chpenable       SGIPIncentive   AllowFeedIn     NoxRate         NoxTreatCost
* TECHNOLOGY TYPES                      FUEL TYPES
* Fuel Cell        1                    NGbasic          2
* Gas Turbine      2                    NGforAbs         3
* ICE, Diesel      3                    NGforDG          4
* ICE, NG          4                    Diesel           5
* Microturbine     5
*
* maxp (kW)   lifetime (years)   capcost ($/kW) OMFix ($/kW/year)  OMVar ($/kWh)
* SprintCap (kW)
* Please enter for SprintCap numbers greater or equal than maxp to avoid optimization problems
* Sprinthours (hours) Fuel (2,3,4,5)
* Type (1,2,3,4,5,6)   efficiency (/)
*
* alpha (kW/kW) - specifies the amount of recoverable heat (kW) from one kW electricity
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* Please not that in old DER-CAM versions there was also a Gamma (typically 0.8 for space heating).!!!!!!
* In the old DER-CAM versions alpha was multiplied with gamma.!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* gamma: kW of heat produced from one kW of recovered heat!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* In this new version we do not use gamma anymore and gamma is included in the alpha value.!!!!!!!!!!!!!!
* This means if you want reproduce old results you have to multiply the 'old' alpha with the 'old' gamma!
* and use it as 'new' alpha in this table.!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* alpha is 0 for all technologies without heat exchanger / absorption chiller
* chpenable (0/1, 1=yes)
* SGIPIncentive (0/1, 1= yes). This is important to know which technologies must verify the SGIP requirements

ICE-small-20________   60              20              2098            0               .021            60              0               4               4               .29             0               0               0               0               0               300
ICE-med-20__________   250             20              1143            0               .015            250             0               4               4               .30             0               0               0               0               0               300
GT-20_______________   1000            20              2039            0               .011            1000            0               4               2               .22             0               0               0               0               0               0
MT-small-20_________   60              10              2116            0               .017            60              0               4               5               .28             0               0               0               0               0               0
MT-med-20___________   150             10              1723            0               .017            150             0               4               5               .29             0               0               0               0               0               0
FC-small-20_________   100             10              4969            0               .033            100             0               4               1               .40             0               0               0               0               0               0
FC-med-20___________   250             10              3981            0               .033            250             0               4               1               .40             0               0               0               0               0               0
ICE-HX-small-20_____   60              20              2760            0               .021            60              0               4               4               .29             1.73            1               0               0               0               300
ICE-HX-med-20_______   250             20              1681            0               .015            250             0               4               4               .30             1.48            1               0               0               0               300
GT-HX-20____________   1000            20              2794            0               .011            1000            0               4               2               .22             1.96            1               0               0               0               0
MT-HX-small-20______   60              10              2377            0               .017            60              0               4               5               .28             1.8             1               0               0               0               0
MT-HX-med-20________   150             10              1935            0               .017            150             0               4               5               .29             1.4             1               0               0               0               0
FC-HX-small-20______   100             10              5778            0               .033            100             0               4               1               .40             1               1               0               0               0               0
FC-HX-med-20________   250             10              4629            0               .033            250             0               4               1               .40             1               1               0               0               0               0
FC-HX-small-20-wSGIP   100             10              5778            0               .033            100             0               4               1               .40             1               1               1               1               0               0
FC-HX-med-20-wSGIP__   250             10              4629            0               .033            250             0               4               1               .40             1               1               1               1               0               0
ICE-small-30________   60              20              1587            0               .021            60              0               4               4               .29             0               0               0               0               0               300
ICE-med-30__________   250             20              865             0               .015            250             0               4               4               .30             0               0               0               0               0               300
GT-30_______________   1000            20              1932            0               .011            1000            0               4               2               .22             0               0               0               0               0               0
MT-small-30_________   60              10              1410            0               .017            60              0               4               5               .31             0               0               0               0               0               0
MT-med-30___________   150             10              1148            0               .017            150             0               4               5               .33             0               0               0               0               0               0
FC-small-30_________   100             10              3605            0               .033            100             0               4               1               .46             0               0               0               0               0               0
FC-med-30___________   250             10              2889            0               .033            250             0               4               1               .46             0               0               0               0               0               0
ICE-HX-small-30_____   60              20              2088            0               .021            60              0               4               4               .29             1.73            1               0               0               0               300
ICE-HX-med-30_______   250             20              1271            0               .015            250             0               4               4               .30             1.48            1               0               0               0               300
GT-HX-30____________   1000            20              2647            0               .011            1000            0               4               2               .22             1.96            1               0               0               0               0
MT-HX-small-30______   60              10              1584            0               .017            60              0               4               5               .31             1.8             1               0               0               0               0
MT-HX-med-30________   150             10              1290            0               .017            150             0               4               5               .33             1.4             1               0               0               0               0
FC-HX-small-30______   100             10              4192            0               .033            100             0               4               1               .46             1               1               0               0               0               0
FC-HX-med-30________   250             10              3359            0               .033            250             0               4               1               .46             1               1               0               0               0               0
MT-HX-small-30-wSGIP   60              10              1584            0               .017            60              0               4               5               .33             1.8             1               1               0               0               0
MT-HX-med-30-wSGIP__   150             10              1290            0               .017            150             0               4               5               .33             1.4             1               1               0               0               0
FC-HX-small-30-wSGIP   100             10              4192            0               .033            100             0               4               1               .46             1               1               1               0               0               0
FC-HX-med-30-wSGIP__   250             10              3359            0               .033            250             0               4               1               .46             1               1               1               0               0               0
*2013/07/18. Lenaig deleted xxx technologies.
;

Table GenConstraints (TECHNOLOGIES, GeneratorConstraints)
                       MaxAnnualHours   MinLoad          ForcedInvest     ForcedNumber
* Please note that you can use this table to enable or disable specific discrete DG technologies / units.
* If you set 'MaxAnnualHours' to 0 the technology will be disabled.
* If you want force a technology set 'ForcedInvest' to 1
* Please specify for 'ForcedNumber' the number of forced units.
* If the year you are considering is a leap year please note the relation between this table and
* table 'TABLE NumberOfDays (months, daytypes)'. If you are using 8760 hours for MaxAnnualHours
* and a leap year, the 8760 hours must be replaced by 8784 hours,
* otherwise the DER equipment is not allowed to run the whole year.

ICE-small-20________   8784             .25              0                0
ICE-med-20__________   8784             .25              0                0
GT-20_______________   8784             .5               0                0
MT-small-20_________   8784             .5               0                0
MT-med-20___________   8784             .5               0                0
FC-small-20_________   8784             .90              0                0
FC-med-20___________   8784             .90              0                0
ICE-HX-small-20_____   8784             .25              0                0
ICE-HX-med-20_______   8784             .25              0                0
GT-HX-20____________   8784             .5               0                0
MT-HX-small-20______   8784             .5               0                0
MT-HX-med-20________   8784             .5               0                0
FC-HX-small-20______   8784             .90              0                0
FC-HX-med-20________   8784             .90              0                0
FC-HX-small-20-wSGIP   0                .90              0                0
FC-HX-med-20-wSGIP__   0                .90              0                0
ICE-small-30________   0                .25              0                0
ICE-med-30__________   0                .25              0                0
GT-30_______________   0                .5               0                0
MT-small-30_________   0                .5               0                0
MT-med-30___________   0                .5               0                0
FC-small-30_________   0                .90              0                0
FC-med-30___________   0                .90              0                0
ICE-HX-small-30_____   0                .25              0                0
ICE-HX-med-30_______   0                .25              0                0
GT-HX-30____________   0                .5               0                0
MT-HX-small-30______   0                .5               0                0
MT-HX-med-30________   0                .5               0                0
FC-HX-small-30______   0                .90              0                0
FC-HX-med-30________   0                .90              0                0
MT-HX-small-30-wSGIP   0                .5               0                0
MT-HX-med-30-wSGIP__   0                .5               0                0
FC-HX-small-30-wSGIP   0                .90              0                0
FC-HX-med-30-wSGIP__   0                .90              0                0
;

Table NGChiller ( NGChillTech, NGChillTechParameter)   direct-fired NG chiller cost and performance parameters
                       maxp   lifetime  capcost   OMFix     OMVar     COP_025   COP_050   COP_075 COP_100     alpha     chpenable
* maxp is kW of cooling offset, assuming 4.5 COP electric chiller
* maxp (kW)   lifetime (years)   capcost ($/kW) OMFix ($/kW/year)  OMVar ($/kWh)
* alpha (kW/kW) -  is always 1
* chpenable (0/1, 1=yes)
NGCHILL--------00100   100    10        100       100       0.02      2         2         2       2           1         0
NGCHILL--HX----00100   100    10        100       100       0.02      2         2         2       2           1         1
;

Table NGChillForcedInvest (NGChillTech, NGChillForcedInvestParameters)
                       ForcedInvest           ForcedInvestQuantity
* ForcedInvest  = 1 to force invest
* ForcedInvestQuantity = number of units to purchase
NGCHILL--------00100   0                      0
NGCHILL--HX----00100   0                      0
;

* file TMP3 / tmp3.txt /
* $onecho  > tmp3.txt
*    i="ContinuousInvestParameter.xls"
*    r1=ContinuousInvestParameter
*    o1=ContinuousInvestParameter
* $offecho
* $call xls2gms @"tmp3.txt"
* Table ContinuousInvestParameter(ContinuousInvestType,ContinuousInvestParameters)
* $include  ContinuousInvestParameter
* ;
* execute 'del tmp3.txt ContinuousInvestParameter' ;
*SB!!! for cleanup purposes, I deleted the ContinuousInvestParameter table. Notes can be found in ContinuousInvestParameter.txt
*NOTE CAPACITY FOR ABSORPTION CHILLER = ELECTRIC CHILLER LOAD OFFSET
Table ContinuousVariableForcedInvest (ContinuousInvestType,ContForcedInvestParameters)
                     ForcedInvest           ForcedInvestCapacity
* ForcedInvest (=1 to force invest)     ForcedInvestCapacity (kW or kWh)
*Sb!!! added functionality - If ForcedInvest = 0, you can't invest in the technology.
*If ForcedInvest=1 and ForcedInvestCapacity<>0, then you invest that amount. Else, forcedinvest simply allows you to invest
ElectricStorage        1                      4
HeatStorage            0                      0
FlowBatteryEnergy      0                      0
FlowBatteryPower       0                      0
AbsChiller             0                      0
Refrigeration          0                      0
PV                     0                      0
SolarThermal           0                      0
EVs1                   0                      0
AirSourceHeatPump      0                      0
GroundSourceHeatPump   0                      0
;

Table HeatPumpParameterValue(ContinuousInvestType, HeatPumpParameters)
                     COP_Heating         COP_Cooling       BoreHoleCost      HeatTransferBorehole_Heating        HeatTransferBorehole_Cooling
* COP_Heating  Heat pump heating COP
* COP_Cooling  Heat pump Cooling COP
* Borehole related costs are only relevant for ground source heat pumps
* BoreHoleCost Cost per borehole meter ($/m)
* HeatTransferBorehole_Heating Heat transfer per borehole meter when in heating mode (W/m)
* HeatTransferBorehole_Cooling Heat transfer per borehole meter when in cooling mode (W/m)

AirSourceHeatPump    6                    6                 0                 0                                  0
GroundSourceHeatPump 4.5                  5                 15.52             50                                 7
;
*Sb attempted to use data from: http://www.eia.gov/consumption/residential/reports/2009/state_briefs/pdf/ma.pdf
*2014/25/10 José This includes all the data
file TMP / tmp_RTP.txt /
$onecho  > tmp_RTP.txt
   i="InputData_NY_RTP.xls"
   r1=AnnualLoad1
   o1=AnnualLoad1
   r2=PX1
   o2=PX1
   r3=ElectricityRates11
   o3=ElectricityRates11
   r4=SolarInsolation
   o4=SolarInsolation
   r5=AmbientHourlyTemperature
   o5=AmbientHourlyTemperature
   r6=MonthlyDemandRates1
   o6=MonthlyDemandRates1
   r7=FuelPrice1
   o7=FuelPrice1
   r8=RegulationEnergyPrice
   o8=RegulationEnergyPrice
   r9=RegulationCapacityUpPrice
   o9=RegulationCapacityUpPrice
   r10=RegulationCapacityDownPrice
   o10=RegulationCapacityDownPrice
   r11=RegulationEnergyPrice1
   o11=RegulationEnergyPrice1
   r12=OptionsTable
   o12=OptionsTable
   r13=ContinuousInvestParameter
   o13=ContinuousInvestParameter
   r14=ParameterTable
   o14=ParameterTable
   r15=PVProduction
   o15=PVProduction


$offecho
$call xls2gms @"tmp_RTP.txt"

Table OptionsTable(ModelOption, OptionsVariable) Model Options
$include OptionsTable
;

Table ParameterTable(ParameterOption, ParameterDummy) Model-wide parameter options
$include ParameterTable
;

Table ContinuousInvestParameter(ContinuousInvestType,ContinuousInvestParameters) user-input technology options
$include ContinuousInvestParameter
;
*SB!!! Included the regulation data, as per Jose Pablo's model

table AnnualLoad1 (enduse, months, daytypes, hours)
$include  AnnualLoad1
;

TABLE PX1 (months, daytypes, hours) "IE prices in $/kWh"
$include  PX1
;
Table ElectricityRates11 (months,daytypes, hours) Monthly volumetric and demand charges
$include ElectricityRates11
;

Table SolarInsolation (months,hours) in 1000W hour
$include SolarInsolation
;
Table AmbientHourlyTemperature (months,hours)  in celcius
$include AmbientHourlyTemperature
;

Table MonthlyDemandRates1 (months, DemandType)  "in $/kWh"
$include  MonthlyDemandRates1
;
Table FuelPrice1 (months,FuelType) "in €/kWh"
$include FuelPrice1
;
Table RegulationEnergyPrice1 (months, daytypes, hours) "in €/kWh"
$include RegulationEnergyPrice
;
Table RegulationCapacityUpPrice1 (months, daytypes, hours) "in €/kWh"
$include RegulationCapacityUpPrice
;
Table RegulationCapacityDownPrice1 (months, daytypes, hours) "in €/kWh"
$include RegulationCapacityDownPrice
;
Table RegulationEnergyPrice2 (months, daytypes, hours) "in €/kWh"
$include RegulationEnergyPrice1
;
Table PV_AC_Production(months, hours) "in kWh"
$include PVProduction
;



*Sb!!! Added PV_AC_Production. This is the kWh (AC) generated per kW installed at your desired location.
*SB!!! Added regulation info
execute 'del tmp_RTP.txt AnnualLoad1 PX1 ElectricityRates11 SolarInsolation AmbientHourlyTemperature OptionsTable ParameterTable ContinuousInvestParameter';
execute 'del MonthlyDemandRates1 PVProduction FuelPrice1 RegulationEnergyPrice1 RegulationCapacityUpPrice RegulationCapacityDownPrice RegulationEnergyPrice PV_AC_Production' ;

*2014/10/10 José parameter for Spanish tariffs

Parameter Exchangerate Euro-dolar exchange rate                     [€-$] /1.0/ ;
Parameter Lossescoef   Losses coefficient                           [%market price]   /0/;
Parameter Taxes        IVA 21%                                      [%]   /0/ ;
Parameter Elect_tax    Electricity tax autonomous communities       [%]   /0/;
Parameter Energy_component energy component to recover fixed costs  [€]   /0/    ;
Parameter Fixedcomp     Fixed component on the tariff               [€]   /0/  ;
Parameter EnergyConsumed Maximum energy in a year kwh               [kwh] /500000/;
Parameter Fixedtariff    Fixed tariff component "0 no" "1 yes"      [0 1] /0    /;
Parameter MonthlyDemandRates3  monthly capacity charg             [€-kwh] /0/;
Parameter Balancingcost  Cost of system balancing           [%market price]/0.0/;
Parameter Capacitypayment Payment for capcity OM and OS             [€]   /0.0/;
*2014/10/07 Jose change in ElectricityRates hourly
Parameter ElectricityRates (years, months,daytypes, hours);
* 0.053255 includes all variable components as losses
Parameter DispatchToContractRatio amount of energy supplied for regulation divided by the amount of regulation services capacity supplied to the market [%] /0.32/;
*Parameter MaximumISOChargeRate   Maximum Independent System Operator charge rate [%] /0.9/;
*Parameter MaximumISODischargeRate   Maximum Independent System Operator discharge rate [%] /0.9/;

ElectricityRates (years, months,daytypes, hours) = ElectricityRates11(months,daytypes, hours)*(1+ParameterTable('RateMultiplier','ParameterValue'));


Parameter MonthlyDemandRates (years, months, DemandType);
MonthlyDemandRates (years, months, DemandType)= MonthlyDemandRates1 (months, DemandType);


Parameter FuelPrice (years, months, FuelType);
FuelPrice (years, months, FuelType) = FuelPrice1 (months, FuelType);
Parameter RegulationEnergyPrice (years, months, daytypes, hours);
RegulationEnergyPrice (years, months, daytypes, hours) = RegulationEnergyPrice1 (months, daytypes, hours);
Parameter RegulationCapacityUpPrice (years, months, daytypes, hours);
RegulationCapacityUpPrice (years, months, daytypes, hours) = RegulationCapacityUpPrice1 (months, daytypes, hours);
Parameter RegulationCapacityDownPrice (years, months, daytypes, hours);
RegulationCapacityDownPrice (years, months, daytypes, hours) = RegulationCapacityDownPrice1 (months, daytypes, hours);
Parameter RegulationEnergyPricep (years,months,daytypes, hours);
RegulationEnergyPricep(years,months,daytypes,hours)= RegulationEnergyPrice2(months,daytypes,hours);

Parameter PX (years,months,daytypes,hours);
PX (years,months,daytypes,hours) = (PX1(months,daytypes,hours));

Parameter Load (years, enduse, months, daytypes, hours);
Load (years, enduse, months, daytypes, hours)= AnnualLoad1 (enduse, months, daytypes, hours);

parameter max_electric_load;
max_electric_load = smax ((years, months, daytypes, hours), load(years, 'electricity-only', months, daytypes, hours) + load(years, 'cooling', months, daytypes, hours)+load(years, 'refrigeration', months, daytypes, hours)+load(years, 'water-heating', months, daytypes, hours));

* note static switch cost = CostM*SizeNeeded + CostB
* where SizeNeeded is the required switch capacity (kW)
* CostB ($)
* CostM ($/kW)
Parameter
StaticSwitchParameter (StaticSwitchParameters)
/
CostM          100
CostB          0
Lifetime       10
Value          350
ForcedInvest   0
/

* PGE
*José cero for Spain
Parameter
MonthlyFee1 (service)
/
UtilElectric    15.76
UtilNGbasic     0
UtilNGforDG     0
UtilNGforABS    0
UtilDiesel      0
/
;
*2013/09/06. Lenaig renamed "MonthlyFee(service)" as "MonthlyFee1(service)" and defined "MonthlyFee (years, service)" with a year index.
*This enables to consider a trend in monthly fees.
Parameter MonthlyFee (years, service);
MonthlyFee (years,'UtilElectric') = MonthlyFee1 ('UtilElectric');
MonthlyFee (years,'UtilNGbasic')  = MonthlyFee1 ('UtilNGbasic');
MonthlyFee (years,'UtilNGforDG')  = MonthlyFee1 ('UtilNGforDG');
MonthlyFee (years,'UtilNGforABS') = MonthlyFee1 ('UtilNGforABS');
MonthlyFee (years,'UtilDiesel')   = MonthlyFee1 ('UtilDiesel');
***

* PGE
Parameter
CoincidentHour1(months)   Hour of month that coincident demand charges are applied to
/
* Demand charges are proportional to the maximum rate of electricity consumption
* (regardless of the duration or frequency of such consumption).
* Demand charges may be assessed daily (e.g. for New York DG customers)
* or monthly (more common) and may be for all hours of the month
* or only certain hours (on, mid, or off peak), or just at the hour of
* peak system-wide consumption.
*
* There are five demand types in DER-CAM, and each are applicable to daily or
* monthly demand charges:
*   -) Non-coincident: these are incurred based on the maximum consumption in ANY hour
*   -) On-peak: based only on on-peak hours.
*   -) Mid-peak: based only on mid-peak hours.
*   -) Off-peak: based only on off-peak hours.
*   -) Coincident: based only on the hour of peak system-wide consumption.
*
*  Please specify the coincident hours here

January          18
February         18
March            18
April            18
May              18
June             18
July             18
August           18
September        18
October          18
November         18
December         18
/
;
*2013/09/06. Lenaig renamed "CoincidentHour(months)" as "CoincidentHour1(months)" and defined "CoincidentHour(years,months)" with a year index.
*This enables to consider changes over time.
Parameter CoincidentHour (years,months);
CoincidentHour (years,months) = CoincidentHour1 (months);
***

Parameter
CO2EmissionsRate (FuelType)
/
Solar       0
NGbasic    .18084
NGforDG    .18084
NGforAbs   .18084
Diesel     .24948
/

Parameter
Beta (enduse)
/
* kW of heat produced from one kW of natural gas
space-heating           0.8
water-heating           0.8
naturalgas-only         1.0
/

* Lifetime            lifetime of system, in years TK more detailed costing should be done, batteries short life, inverter long life
*2013/03/22. Lenaig rewrote the comments below.
* EfficiencyCharge        [] fraction of power input   that is not lost in transfer (charging)
* EfficiencyDischarge     [] fraction of power output  that is not lost in transfer (discharging)
* SelfDischarge           [] fraction of stored energy that is lost from one hour to the next due to self-discharge
* MaxChargeRate        [1/h] fraction of total installed capacity that can be charged in 1 hour
* MaxDischargeRate     [1/h] fraction of total installed capacity that can be discharged in 1 hour
* MaxDepthOfDischarge     [] fraction of total installed capacity that is considered a limit when discharging
* DiscreteSize         [kWh] unit battery size
*                            When Option 'DiscreteElecStorage' is set to 1, batteries have to be multiple sizes of DiscreteSize.
*                            This is especially important for NaS batteries which are produced in multiple sizes of 500 kWh. Lenaig : why 500 kWh? where is the reference?
* BatteryDegradation      [] fraction of total installed capacity that is lost from one month to the next due to battery ageing
* SB!!! believes we should add some approximation of cycle life. BatteryDegradation approximates "shelf life" - e.g. the amount of capacity that
* (SB!!! cont)the batter is losing simply because of time. However, this is a different factor from cycle degradation
*SB!!! - add battery power capacity as per Schittegatee thesis
Parameter ElectricityStorageStationaryParameter(StorageParameters)
/
EfficiencyCharge                               0.95
EfficiencyDischarge                            0.95
SelfDischarge                                  0.000042
MaxChargeRate                                  1
MaxDischargeRate                               1
MaxDepthOfDischarge                            0.90
DiscreteSize                                   500
BatteryDegradation                             0.001667
MaximumSize                                    36
/

*2013/06/06. Lenaig added the parameter 'BatteryDegradation' to model capacity loss due to battery ageing.
*Battery degradation : 0.333% initial capacity/month = 20% of initial capacity lost at the end of a 5-year lifetime
;

Parameter
ElectricityStorageEVParameter(StorageParameters)
/
EfficiencyCharge      .954
*[] fraction of Energy that is not lost in transfer
EfficiencyDischarge   .954
*[] fraction of Energy that is not lost in transfer
SelfDischarge         .001
*[] fraction of Energy that is lost from one hour to the next
MaxChargeRate         .45
*[1/h] fraction of total capacity that can be charged in 1 hour
MaxDischargeRate      .45
*[1/h] fraction of total capacity that can be discharged in 1 hour
BeginingHomeCharge     21
EndHomeCharge          7
ConnectingHourOffice   9
DisconnectHourOffice   19
MaxDepthOfDischarge    .8
MinSOCConnect          .73
MinSOCDisconnect       .32
MaxStateOfCharge       .9
MaxSOConnect           .73
MaxSOCDisconnect       .9
*OLIVIER : hour when EVs start charging at home
*OLIVIER : hour when EVs stop charging at home
*OLIVIER : hour when EVs are plugged into building
*OLIVIER : hour when EVs are disconnected from building
*FractionBatteryJourney 0.1586
*BatteryJourney         2.5376
/

*2013/03. Lenaig added a year index.
Parameter NightlyMarginalCO2EmissionsResidential(years,months,hours);
NightlyMarginalCO2EmissionsResidential(years,months,hours)= HourlyMarginalCO2Emissions(months,hours) $ (ord(hours) >= ElectricityStorageEVParameter('BeginingHomeCharge') or ord(hours) <= ElectricityStorageEVParameter('EndHomeCharge'));
* 0 when the car is not being charged at home

*2013/03. Lenaig added a year index.
Parameter MonthlyNightlyMarginalCO2EmissionsResidential(years,months);
MonthlyNightlyMarginalCO2EmissionsResidential(years,months)=sum(hours,NightlyMarginalCO2EmissionsResidential(years,months,hours))/(ElectricityStorageEVParameter('EndHomeCharge')+25-ElectricityStorageEVParameter('BeginingHomeCharge'));

Parameter Electricity_Exchange_EV
/
P_EX_Vehicle                     0.06218
*[$/kWh]
*The energy exchange price for buying and selling energy.
*It needs to be above Offsite access prices, to assure,
*energy exchange is always
*OLIVIER : does not include carbon tax

Capacity_Loss_per_Normalized_Wh  .000027
*dimensionless []. Steady charge rate assumed within hours.
Production_Cost_Li-Ion           600
*[$/kWh]
Future_Replacement_Cost          200
*[$/kWh]
Reference_Cost                   244894
*[$]
P_Offsite_Access                 0
*OLIVIER : offsite_access price is not used so far !
*[$/kWh]
/


Parameter
HeatStorageParameter(StorageParameters)
/
EfficiencyCharge    0.90
EfficiencyDischarge 0.90
Decay               0.01
MaxChargeRate       0.25
MaxDischargeRate    0.25
MaxDepthOfDischarge 1
/

* note that MaxChargeRate and MaxDischargeRate are not included because that's a variable

Parameter
FlowBatteryParameter(StorageParameters)
/
EfficiencyCharge      .84
EfficiencyDischarge   .84
SelfDischarge         0
*2013/06/06. Lenaig. Flow batteries : self-discharge = negligible.
MaxDepthOfDischarge   .75
/

* COP absorption chillers for building cooling
Parameter
COP_Electric_Abs_Chillers
/
Electric    4.5
Absorption  0.7
/

* COP absorption chillers for refrigeration
Parameter
COP_Electric_Abs_Refrigeration
/
Electric    4.5
Absorption  0.7
/

Parameters
     COPelectric
     COPabs;

COPelectric = COP_Electric_Abs_Chillers  ('Electric');
COPabs = COP_Electric_Abs_Chillers  ('Absorption');

Table DemandResponseParameters1 (DemandResponseType,DemandResponseInvestParameters)
        VariableCost       MaxContribution    MaxHours
*  VariableCost ($/kW)
*  MaxContribution must be <1. Additionally, the sum of low, mid, and high maxContributions must be <=1.
low     0                   0.3               0
mid     0.06                0.1               0
high    1                   0.05              0
;
*2013/09/06. Lenaig renamed "DemandResponseParameters(DemandResponseType,DemandResponseInvestParameters)" as "DemandResponseParameters1(DemandResponseType,DemandResponseInvestParameters)"
*and defined "DemandResponseParameters(years,DemandResponseType,DemandResponseInvestParameters)" with a year index.
*This enables to consider a trend in demand response costs.
Parameter DemandResponseParameters(years,DemandResponseType,DemandResponseInvestParameters);
DemandResponseParameters(years,DemandResponseType,'VariableCost') = DemandResponseParameters1 (DemandResponseType,'VariableCost');
***

Table DemandResponseParametersHeating1 (DemandResponseType,DemandResponseInvestParameters)
        VariableCost       MaxContribution    MaxHours
*  VariableCost ($/kW)
*  MaxContribution must be <1. Additionally, the sum of low, mid, and high maxContributions must be <=1.
low     0                   0.3               0
mid     0.03                0.2               0
high    0.05                0.1               0
;
*2013/09/06. Lenaig renamed "DemandResponseParametersHeating(DemandResponseType,DemandResponseInvestParameters)" as "DemandResponseParametersHeating1(DemandResponseType,DemandResponseInvestParameters)"
*and defined "DemandResponseParametersHeating(years,DemandResponseType,DemandResponseInvestParameters)" with a year index.
*This enables to consider a trend in demand response costs.
Parameter DemandResponseParametersHeating(years,DemandResponseType,DemandResponseInvestParameters);
DemandResponseParametersHeating (years,DemandResponseType,'VariableCost') = DemandResponseParametersHeating1 (DemandResponseType,'VariableCost');
***

Table SchedulableLoadParameterTable (SLParameterOption, SLParameterValue) Parameters for user input
                               ParameterValue
* PercentageSchedulablePeak          'percentage of the load that can be scheduled daily on peak days
* PercentageSchedulableWeek          'percentage of the load that can be scheduled daily on week days
* PercentageSchedulableWeekend       'percentage of the load that can be scheduled daily on weekend days
* MaxLoadInHour                      'Max load that can be scheduled in any hour (kW)
* LoadIncrease                       'Max load that can be added in any hour (kW)


PercentageSchedulablePeak      15
PercentageSchedulableWeek      15
PercentageSchedulableWeekend   15
MaxLoadInHour                  50
MaxIncrease                    50
;

*Turn off and on load scheduling
SchedulableLoadParameterTable(SLParameterOption,SLParameterValue) $ (OptionsTable ('LS','OptionValue')=0)=0;

* Load Scheduling
*2013/03. Lenaig added a year index.
parameter MaxShiftableLoad (years,months, daytypes) days of each type;

    MaxShiftableLoad(years,months,'week') = sum(hours, Load(years,'electricity-only',months,'week',hours))*SchedulableLoadParameterTable ('PercentageSchedulableWeek','ParameterValue')/100;
    MaxShiftableLoad(years,months,'weekend') = sum(hours, Load(years,'electricity-only',months,'weekend',hours))*SchedulableLoadParameterTable ('PercentageSchedulableWeekend','ParameterValue')/100;
    MaxShiftableLoad(years,months,'peak') = sum(hours, Load(years,'electricity-only',months,'peak',hours))*SchedulableLoadParameterTable ('PercentageSchedulablePeak','ParameterValue')/100;

*****************************************************************
*****   Availabilities for EV Storage - Connection times   *********
*****************************************************************

* The three following tables represent the key inputs for mobility behavior and resulting connection times
* They need to be consistent, so please follow instructions as given for each table!


* Indicates the hours of connection indirectly
* Indicates the hours at which the electricity stored must depend on the hour before.

*envisioned reasonable availabilities

*2013/03. Lenaig added a year index.
parameter BinaryEVsConnectionTable (years, months, daytypes, hours);
BinaryEVsConnectionTable(years,months,daytypes,hours)$(ord(hours)>ElectricityStorageEVParameter('ConnectingHourOffice')AND ord(hours)<ElectricityStorageEVParameter('DisconnectHourOffice') AND ord(daytypes)<3)=1;

* This parameter indicates the hours of connection and disconnection of EVs via zeros.
* Thus, e.g. there is a '0' at 9h for connection and another '0' at 19h for disconnection at 18h.
* +++++++++++++++++++++++++++++++++++++++++++
* Note that for the disconnection, the discharging energy flow is assigned to the next hour, which is why the '0'
* is implemented at 19h, indicating a disconnection at 18h.
* +++++++++++++++++++++++++++++++++++++++++++

* The constraint for charging rates needs to be relaxed in these hours so that e.g. the SOC can go from 0 in hour 8 to 73% in hour 9. The same is necessary for disconnection.
* This table is also used to isolate the effects of connection and disconnection of EVs in the microgrid's energy balance and the billing.
* Energy is basically not charged when brought into the system or out of the microgrid system. It is rather billed via the net energy exchanged (see Parameter Electricity_Exchange_EV).
* If it was not implemented in this way the connection would mean that in order to meet a certain SOC at connection the energy for that would have to be procured
* from the utility, or generated on site, and billed accordingly.



* The following two parameters limit ElectricityStorageEVsOutput and ElectricityStorageEVsInput, and therefore, the State of Charge of the batteries ElectricityStored (=SOC)

*2013/03. Lenaig added a year index.
parameter MinimumStateofChargeEVs (years, months, daytypes, hours);
MinimumStateofChargeEVs(years, months, daytypes, hours)$(ord(hours)=ElectricityStorageEVParameter('ConnectingHourOffice') AND ord(daytypes)<>3)=ElectricityStorageEVParameter('MinSOCConnect');
MinimumStateofChargeEVs(years, months, daytypes, hours)$(ord(hours)=(ElectricityStorageEVParameter('DisconnectHourOffice')-1) AND ord(daytypes)<>3)=ElectricityStorageEVParameter('MinSOCDisconnect');
MinimumStateofChargeEVs(years, months, daytypes, hours)$(ord(hours)>ElectricityStorageEVParameter('ConnectingHourOffice') AND ord(hours)<(ElectricityStorageEVParameter('DisconnectHourOffice')-1) AND ord(daytypes)<>3)=ElectricityStorageEVParameter('MaxDepthOfDischarge');

*2013/03. Lenaig added a year index.
parameter MaximumStateofChargeEVs (years, months, daytypes, hours);
MaximumStateofChargeEVs(years, months, daytypes, hours)$(ord(hours)=ElectricityStorageEVParameter('ConnectingHourOffice') AND ord(daytypes)<>3)=ElectricityStorageEVParameter('MaxSOConnect');
MaximumStateofChargeEVs(years, months, daytypes, hours)$(ord(hours)=(ElectricityStorageEVParameter('DisconnectHourOffice')-1) AND ord(daytypes)<>3)=ElectricityStorageEVParameter('MaxSOCDisconnect');
MaximumStateofChargeEVs(years, months, daytypes, hours)$(ord(hours)>ElectricityStorageEVParameter('ConnectingHourOffice') AND ord(hours)<(ElectricityStorageEVParameter('DisconnectHourOffice')-1) AND ord(daytypes)<>3)=ElectricityStorageEVParameter('MaxStateOfCharge');


* During hours of disconnection the minimum values need to be 0.
* They serve as a tool to meet certain states of charge at certain times.

* During hours of disconnection the maxium values need to be 0.
* They serve as a tool to meet certain states of charge at certain times.

* Do not remove the following line. It is important for UFII. It increases the performance of UFII.
*%spd

****************************************************
*****   ASSIGNING NUMBERS TO SET ENTRIES   *********
****************************************************

Parameters DemandValue (DemandType);
DemandValue (DemandType) = ord(DemandType);

Parameter daytypesValue(daytypes);
daytypesValue(daytypes) = ord(daytypes);

Parameter FuelValue;
FuelValue (FuelType) = ord(FuelType);


**************************************
*****   DYNAMIC SET DECLARATIONS   ***
**************************************
*2013/05/31. Lenaig declared the year-counter.
years_counter(YEARS) =yes;

* Only consider available technologies (saves lots of computation time)
* should be needed if other techs are fixed at zero

AvailableTECHNOLOGIES(TECHNOLOGIES) = yes;
AvailableTECHNOLOGIES(TECHNOLOGIES)$(OptionsTable('DiscreteInvest','OptionValue') = 0) = no;
AvailableTECHNOLOGIES(TECHNOLOGIES)$(GenConstraints(TECHNOLOGIES,'MaxAnnualHours') = 0)= no;
AvailableTECHNOLOGIES(TECHNOLOGIES)$((SGIPOptions('enableSGIP','OptionValue') = 0) and (deropt(TECHNOLOGIES, 'SGIPIncentive') = 1)) = no;

*GC added this to create a subset of Fuel Cell Technologies
*01/16/2012
AvailableFCTechnologies(TECHNOLOGIES) = yes;
AvailableFCTechnologies(TECHNOLOGIES)$(GenConstraints(TECHNOLOGIES,'MaxAnnualHours') = 0) = no;
AvailableFCTechnologies(TECHNOLOGIES)$(DerOpt(TECHNOLOGIES,'Type') <> 1) = no;

AvailableCHPTECHNOLOGIES(AvailableTECHNOLOGIES) = yes;
AvailableCHPTECHNOLOGIES(AvailableTECHNOLOGIES)$(DEROPT(AvailableTECHNOLOGIES, 'chpenable') = 0) = no;
AvailableCHPTECHNOLOGIES(AvailableTECHNOLOGIES)$((DEROPT(AvailableTechnologies, 'SGIPIncentive') = 1) and (DEROPT(AvailableTechnologies, 'maxp') gt max_electric_load)) = no;

AvailableSGIPTechnologies(AvailableCHPTechnologies) = yes;
AvailableSGIPTechnologies(AvailableCHPTechnologies)$(DEROPT(AvailableCHPTechnologies, 'SGIPIncentive') = 0) = no;
AvailableSGIPTechnologies(AvailableCHPTechnologies)$(DEROPT(AvailableCHPTechnologies, 'NoxRate') gt SGIPOptions('MaxNOxRate', 'OptionValue')) = no;


set NonNGFuels (FuelType);
NonNGFuels(FuelType) = yes;
NonNGFuels(FuelType)$(ord(FuelType) = FuelValue('NGbasic') ) = no;
NonNGFuels(FuelType)$(ord(FuelType) = FuelValue('NGforDG') ) = no;
NonNGFuels(FuelType)$(ord(FuelType) = FuelValue('NGforABS') ) = no;


sets
OnHoursMonth (hours, months, daytypes)
MidHoursMonth (hours, months, daytypes)
OffHoursMonth (hours, months, daytypes);

     Parameter HoursByMonth(hours, months, daytypes);
     loop ((months, seasons)$(MonthSeason(months,seasons)=1),
     HoursByMonth (hours, months, daytypes)
     =
     ListOfHours(hours,seasons,daytypes)
     );

     loop (seasons,
     OnHoursMonth (hours, months, daytypes)
     $(ListOfHours(hours,seasons,daytypes) = 1
     and MonthSeason(months,seasons) = 1 )
     = yes);

     loop (seasons,
     MidHoursMonth (hours, months, daytypes)
     $(ListOfHours(hours,seasons,daytypes) = 2
     and MonthSeason(months,seasons) = 1 )
     = yes);

     loop (seasons,
     OffHoursMonth (hours, months, daytypes)
     $(ListOfHours(hours,seasons,daytypes) = 3
     and MonthSeason(months,seasons) = 1 )
     = yes);


***********************************
****** PARAMETER ADJUSTMENT  ******
***********************************

Parameter SGIPIncentiveAmount(Technologies);
* SGIP Incentive is in $/W, so the number is multiplied by 1000 to make it $/kW
SGIPIncentiveAmount(AvailableSGIPTechnologies)$(Deropt(AvailableSGIPTechnologies,'Type') = 1) = Deropt(AvailableSGIPTechnologies, 'maxp') * SGIPIncentives('FuelCell','OptionValue') * SGIPOptions('SGIPPercentage','OptionValue') * 1000;
SGIPIncentiveAmount(AvailableSGIPTechnologies)$(Deropt(AvailableSGIPTechnologies,'Type') = 2) = Deropt(AvailableSGIPTechnologies, 'maxp') * SGIPIncentives('GasTurbine','OptionValue') * SGIPOptions('SGIPPercentage','OptionValue') * 1000;
SGIPIncentiveAmount(AvailableSGIPTechnologies)$(Deropt(AvailableSGIPTechnologies,'Type') = 4) = Deropt(AvailableSGIPTechnologies, 'maxp') * SGIPIncentives('ICENG','OptionValue') * SGIPOptions('SGIPPercentage','OptionValue') * 1000;
SGIPIncentiveAmount(AvailableSGIPTechnologies)$(Deropt(AvailableSGIPTechnologies,'Type') = 5) = Deropt(AvailableSGIPTechnologies, 'maxp') * SGIPIncentives('Microturbine','OptionValue') * SGIPOptions('SGIPPercentage','OptionValue') * 1000;

* Internal calculation of C02_emission_rate needed to adjust PBI Payment in the SGIP program. Emission limits are hard coded.
Parameter CO2_emission_rate(Technologies);
         CO2_emission_rate(AvailableSGIPTechnologies)$(Deropt(AvailableSGIPTechnologies, 'Fuel') = 4) = 1 / DEROPT(AvailableSGIPTechnologies, 'efficiency') * CO2EmissionsRate ('NGforDG');

Parameter PBI_CO2_Adjustment(Technologies);
         PBI_CO2_Adjustment(AvailableSGIPTechnologies)$(CO2_emission_rate(AvailableSGIPTechnologies) gt 0.417) = 0;
         PBI_CO2_Adjustment(AvailableSGIPTechnologies)$((CO2_emission_rate(AvailableSGIPTechnologies) gt 0.398) and (CO2_emission_rate(AvailableSGIPTechnologies) le 0.417)) = 0.5;
         PBI_CO2_Adjustment(AvailableSGIPTechnologies)$(CO2_emission_rate(AvailableSGIPTechnologies) le 0.398) = 1;

*turn off CHP
    GenConstraints(TECHNOLOGIES,'MaxAnnualHours')$((OptionsTable('CHP','OptionValue')  eq 1) and (deropt(TECHNOLOGIES,'chpenable')=1))=0;

*turn off absorption chiller
    GenConstraints(TECHNOLOGIES,'MaxAnnualHours')$((OptionsTable('CHP','OptionValue')  eq 1) and (deropt(TECHNOLOGIES,'coolenable')=1))=0;

* turn on the central chiller in the do-nothing case
OptionsTable ('CentralChiller','OptionValue')$(OptionsTable ('ContinuousInvest','OptionValue') eq 0 and OptionsTable ('DiscreteInvest ','OptionValue') eq 0  )  =1;
OptionsTable ('CentralChiller','OptionValue')$(ContinuousVariableForcedInvest ('AirSourceHeatPump','ForcedInvest') eq 1 and ContinuousVariableForcedInvest ('AirSourceHeatPump','ForcedInvestCapacity') eq 0 and ContinuousVariableForcedInvest ('GroundSourceHeatPump','ForcedInvest') eq 1 and ContinuousVariableForcedInvest ('GroundSourceHeatPump','ForcedInvestCapacity') eq 0)=1;

*adjust capital costs
DEROPT(TECHNOLOGIES, 'capcost')$(OptionsTable('VaryPrice','OptionValue') eq DEROPT(TECHNOLOGIES,'type'))
                          =  DEROPT(TECHNOLOGIES, 'capcost')
                             *
                             (1 + ParameterTable('turnvar','ParameterValue'));

* SprintCap
* If value SprintCap of table deropt = 0 --> assign maxp
* This procedure avoids optimization problems

deropt(TECHNOLOGIES,'sprintcap')$(deropt(TECHNOLOGIES,'sprintcap') =0) = deropt(TECHNOLOGIES,'maxp');


Parameter NetmeteringOnOff;
NetmeteringOnOff=0;
NetmeteringOnOff $ ((OptionsTable ('NetMetering','OptionValue') eq 1) and (OptionsTable ('Sales','OptionValue') eq 1)) =1;

Parameter InvestmentConstOnOff;
InvestmentConstOnOff=1000000;
InvestmentConstOnOff $ (OptionsTable ('InvestmentConst','OptionValue') eq 1)  =1;


********************************************************************************
********************  ANNUITY RATES FOR ALL DER  *******************************
********************************************************************************

Parameter AnnuityRate_DiscTech (Technologies);
Parameter AnnuityRate_ContTech (ContinuousInvestType);
Parameter AnnuityRate_NGChill  (NGChillTech);
Parameter AnnuityRate_StaticSwitch;

*To avoid an error due to missing input data
DEROPT(TECHNOLOGIES,'lifetime')$(DEROPT(TECHNOLOGIES,'lifetime')=0) = 1;
AnnuityRate_DiscTech (Technologies)
     = ParameterTable('IntRate','ParameterValue')
             / ( 1 - 1 / (1 + ParameterTable('IntRate','ParameterValue') ) ** DEROPT(TECHNOLOGIES,'lifetime') );

AnnuityRate_ContTech (ContinuousInvestType)
     = ParameterTable('IntRate','ParameterValue')
             / ( 1 - 1 / ( 1 + ParameterTable('IntRate','ParameterValue') ) ** ContinuousInvestParameter(ContinuousInvestType,'lifetime'));

AnnuityRate_NGChill(NGChillTech)
     = ParameterTable('IntRate','ParameterValue')
       / ( 1 - 1 / ( 1 + ParameterTable('IntRate','ParameterValue') ) ** NGChiller(NGChillTech,'lifetime') );

AnnuityRate_StaticSwitch
     = ParameterTable('IntRate','ParameterValue')
       / ( 1 - 1 / ( 1 + ParameterTable('IntRate','ParameterValue') ) ** StaticSwitchParameter('lifetime'));

*25/10/2014    José this is changed
***********************************************************
*******   ELECTRIC VEHICLES CONSTRAINTS  ******************
***********************************************************
*2013/03. Lenaig added a year index to all variables and equations in this section about EVs.

* All units for energy are measured in kWh
* Capacity of batteries is also measured in kWh

Positive Variables
     Electricity_FromEVs(years,months,daytypes,hours)
     ElectricityStoredEVs(years,months,daytypes,hours)
     ElectricityStorageEVsInput(years,months,daytypes,hours)
     ElectricityStorageEVsOutput(years,months,daytypes,hours)
     ElectricityStorageEVsLosses(years,months,daytypes,hours)
     ElectricityForStorageEVs(years,months,daytypes,hours);

Binary Variables
     BinaryCharge(years,months,daytypes,hours)
     BinaryDischarge(years,months,daytypes,hours);

*These Constraints makes sure that now charging and discharging is
*conducted at the same time
Equation EitherChargeXOrDischarge_Eq(years,months,daytypes,hours);
     EitherChargeXOrDischarge_Eq(years,months,daytypes,hours)..
     BinaryCharge(years,months,daytypes,hours)
     =E=
     (1 - BinaryDischarge(years,months,daytypes,hours));

Equation XORDischargeEVs_Eq(years,months,daytypes,hours);
     XORDischargeEVs_Eq(years,months,daytypes,hours)..
     Electricity_FromEVs(years,months,daytypes,hours)
     =L= BinaryDischarge(years,months,daytypes,hours) * 1000000;

Equation EitherChargeEVs_Eq(years,months,daytypes,hours);
     EitherChargeEVs_Eq(years,months,daytypes,hours)..
     ElectricityForStorageEVs(years,months,daytypes,hours)
     =L= BinaryCharge(years,months,daytypes,hours) * 1000000;

*The most important constraint for SOC
*measured in kWh
Equation ElectricityStoredEVsEq (years,months,daytypes,hours);
     ElectricityStoredEVsEq(years,months,daytypes,hours)..
     ElectricityStoredEVs(years,months,daytypes,hours)
     =E=
     (ElectricityStoredEVs(years,months,daytypes,hours--1)
     +
     ElectricityStorageEVsInput(years,months,daytypes,hours)
     -
     ElectricityStorageEVsOutput(years,months,daytypes,hours)
     -
     ElectricityStorageEVsLosses(years,months,daytypes,hours));

*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
*measured in kWh

* In DER-CAM, in the most favorable cases, the hourly output can reach this capacity.
*2013/05/31. Lenaig added the variable 'TotalCapacityInYearY(ContinuousInvestType,years)'. It refers to the sum of the installed capacities that are available in a given year.
POSITIVE VARIABLE TotalCapacityInYearY(ContinuousInvestType,years);

Equation ElectricityStoredEVsLowerBoundaryEq (years,months,daytypes,hours);
     ElectricityStoredEVsLowerBoundaryEq(years,months,daytypes,hours)..
     ElectricityStoredEVs(years,months,daytypes,hours)
     =G=
     TotalCapacityInYearY('EVs1',years)*MinimumStateofChargeEVs(years,months,daytypes,hours);

*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
*measured in kWh
Equation ElectricityStoredEVsUpperBoundaryEq (years,months,daytypes,hours);
     ElectricityStoredEVsUpperBoundaryEq(years,months,daytypes,hours)..
     ElectricityStoredEVs(years,months,daytypes,hours)
     =L=
     TotalCapacityInYearY('EVs1',years)*MaximumStateofChargeEVs(years,months,daytypes,hours);

*measured in kWh
Equation ElectricityStorageEVsInputEq(years,months,daytypes,hours);
     ElectricityStorageEVsInputEq(years,months,daytypes,hours)..
     ElectricityStorageEVsInput(years,months,daytypes,hours)
     =E=
     ElectricityForStorageEVs(years,months,daytypes,hours)
     *ElectricityStorageEVParameter('EfficiencyCharge');

*measured in kWh
Equation Electricity_FromEVsEq(years,months,daytypes,hours);
     Electricity_FromEVsEq(years,months,daytypes,hours)..
     Electricity_FromEVs(years,months,daytypes,hours)
     =E=
     (ElectricityStorageEVsOutput(years,months,daytypes,hours)
     *ElectricityStorageEVParameter('EfficiencyDischarge'))
     ;

*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
*measured in kWh
Equation ElectStorageEVsChargingRateEq(years,months,daytypes,hours);
     ElectStorageEVsChargingRateEq(years,months,daytypes,hours)..
     ElectricityStorageEVsInput(years,months,daytypes,hours)
     =L=
     (TotalCapacityInYearY('EVs1',years)
     * ((BinaryEVsConnectionTable(years,months,daytypes,hours)-1)*(-1))
     )
     +
     (TotalCapacityInYearY('EVs1',years)* ElectricityStorageEVParameter('MaxChargeRate'))
     * BinaryEVsConnectionTable(years,months,daytypes,hours)
     ;

*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
*measured in kWh
Equation ElectStorageEVsDischargingRateEq(years,months,daytypes,hours);
     ElectStorageEVsDischargingRateEq(years,months,daytypes,hours)..
     ElectricityStorageEVsOutput(years,months,daytypes,hours)
     =L=
     (TotalCapacityInYearY('EVs1',years)
     * ((BinaryEVsConnectionTable(years,months,daytypes,hours)-1)*(-1))
     )
     +
     (TotalCapacityInYearY('EVs1',years) * ElectricityStorageEVParameter('MaxDischargeRate'))
     * BinaryEVsConnectionTable(years,months,daytypes,hours)
     ;

*measured in kWh
Equation ElectricityStorageEVsLossesEq(years,months,daytypes,hours);
     ElectricityStorageEVsLossesEq(years,months,daytypes,hours)..
     ElectricityStorageEVsLosses(years,months,daytypes,hours)
     =E=
     (ElectricityStoredEVs(years,months,daytypes,hours--1)
     *(ElectricityStorageEVParameter('SelfDischarge')))
     ;

Variable NetEVOutput(years,months,daytypes,hours);

Variables
         EVsElectricityFromHome(years,months,daytypes)
         EVsElectricityFromHome_without_eff(years,months,daytypes)
*Hourly electricity consumed by the car to charge at home.
*Can also be negative: the energy will either be given back to the house,
*or will be consumed during driving, and thus displacing home electricity consumption in each case
* Assumed hourly constant consumption over the whole charging period (slow charge, better for battery life)
       ;

*2013/05/31. Lenaig calculated of the present value.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Variable ElectricVehicleBilling(years,months);
*2013/05/31. Lenaig calculated the present value of 'ElectricVehicleBilling(years,months)' later in the equation that determines the 'ElectricVehicleBilling' value.

Equation ElectricVehicleBilling_Eq(years,months);
*payment (positive or negative) for electricity exchanged between car and building
*bill based on kWh of electricity only, does not consider fixed yearly amount (based on battery capacity) *nor battery degradation compensation
ElectricVehicleBilling_Eq(years,months)..
     ElectricVehicleBilling(years,months)
*measured in $
     =E=
         sum (   (daytypes), numberofdays(months,daytypes) *
                 sum (   (hours)$(ord(hours)<=ElectricityStorageEVParameter('EndHomeCharge') or ord(hours)>=ElectricityStorageEVParameter('BeginingHomeCharge')),
                 EVsElectricityFromHome(years,months,daytypes)
*OLIVIER : EH instead of netEVOuput
*NetEVOutput(months,daytypes,hours)
              )       )
          *Electricity_Exchange_EV('P_EX_Vehicle')
*P_EX_Vehicle measured in $/kWh
         *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
     ;

*measured in kWh
Equation NetEVOutput_Eq(years,months,daytypes,hours);
     NetEVOutput_Eq(years,months,daytypes,hours)..
     NetEVOutput(years,months,daytypes,hours)
     =E=
     BinaryEVsConnectionTable(years,months,daytypes,hours)
     *
     (Electricity_FromEVs(years,months,daytypes,hours)
      -
      ElectricityForStorageEVs(years,months,daytypes,hours))
     ;

Variable EV_Payment(years,months,daytypes,hours);

*2013/06/06. Lenaig calculated of the present value and modified 'ElectricVehicleBilling' to consider the total capacity available in the year considered.
Equation EV_Payment_Eq(years,months,daytypes,hours);
      EV_Payment_Eq(years,months,daytypes,hours)..
      EV_Payment(years,months,daytypes,hours)
*measured in $
      =E=
      (ContinuousInvestParameter('EVs1','VariableCost')
*measured in $/kWh
         * TotalCapacityInYearY('EVs1',years)
*measured in kWh
       )
       *(ContinuousInvestParameter('EVs1','Lifetime')
*Olivier : why is that needed?
*measured in years
            /8760 )
       +
       EVsElectricityFromHome(years,months,daytypes)$(ord(hours)<=ElectricityStorageEVParameter('EndHomeCharge') or ord(hours)>=ElectricityStorageEVParameter('BeginingHomeCharge'))
       *
*OLIVIER : EH instead of netEVOuput
      (Electricity_Exchange_EV('P_EX_Vehicle')
       - Electricity_Exchange_EV('P_Offsite_Access') )
* OLIVIER : this Offsite Access should be removed!
*both P_Offsite_Access and P_EX_Vehicle measured in $/kWh
*
*2013/05/31. Lenaig ccalculated of the present value.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
       *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
       ;

Variable Yearly_EV_Payment(years);
* OLIVIER : removed "positive"

*All measured in $
Equation Yearly_EV_Payment_Eq(years);
         Yearly_EV_Payment_Eq(years)..
         Yearly_EV_Payment(years)
         =E=
         sum( (months),
                 sum (   (daytypes), numberofdays(months,daytypes) *
                         sum (   (hours),
                         EV_Payment(years,months,daytypes,hours)
         )       )       );


*All measured in $
Equation Yearly_EV_Payment_Eq2(years);
         Yearly_EV_Payment_Eq2(years)..
         Yearly_EV_Payment(years)
         =G=0;


*************************  FIXED COST CALCULATIONS  *******************************
* Computation of Contract Demand: max potential electric load to utility
*2013/03. Lenaig added a year index to 'ContractDemand', 'ContractCost' and 'MonthlyCharge'.

 ContractDemand (years)
        =
       smax ( (months,daytypes,hours), load(years,'electricity-only',months,daytypes,hours)
        + load(years,'cooling',months,daytypes,hours)+ load(years,'refrigeration',months,daytypes,hours));

*2013/05/31. Lenaig calculated the present value of 'ContractCost'.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
*2014/10/25 José change contract cpacity to incorporate the possibility of PV to reduce it
*ContractCost(years,months)
*        =
*        ContractDemand(years)*ParameterTable('Contrct','ParameterValue')
*        * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
*        ;
*2014/25/10 José This has been changed of position.
*SB!!! Added the Battery export and onsite variables. Export variable allows the battery to export excess power (if selling into wholesale mkt, for example)
Positive Variables
     ElectricityProvided (years,months, daytypes,hours)
     Electricity_Generation(years,months,daytypes,hours)
     Electricity_Generation_Technology(TECHNOLOGIES,years,months,daytypes,hours)
     Electricity_Photovoltaics(years,months,daytypes,hours)
     Electricity_FromStationaryBattery_Onsite(years,months,daytypes,hours)
     Electricity_FromStationaryBattery_Export(years,months,daytypes,hours)
     Electricity_FromFlowBattery(years,months,daytypes,hours)
     EnergyFlowFromBuildingToStationaryStorage (years, months, daytypes, hours)
     EnergyFlowFromStationaryStorageToBuilding (years, months, daytypes, hours);
*SB!!! Added the ISO and Building flows, as per Jose Pablo's formulation. I
* kW

*2013/03. Lenaig added a year index.
Positive Variable Electricity_Purchase(years,months, daytypes,hours);
Binary Variable PurchaseOrSale(years,months,daytypes,hours);
Equation PurchaseEq(years,months,daytypes,hours);
     PurchaseEq(years,months,daytypes,hours)..
     Electricity_Purchase(years,months,daytypes,hours)
     =L=
     PurchaseOrSale(years,months,daytypes,hours)*1000000;

Equation ElectricityProvidedEq (years,months,daytypes,hours);
     ElectricityProvidedEq(years,months,daytypes,hours)..
     ElectricityProvided (years,months,daytypes,hours)
     =E=
     Electricity_Purchase(years,months,daytypes,hours)
     +
     Electricity_Generation(years,months,daytypes,hours)
     +
     Electricity_Photovoltaics(years,months,daytypes,hours)
     +
*     EnergyFlowFromStationaryStorageToBuilding(years,months,daytypes,hours)
*2015/01/21 Dani changed Electricity_FromStationaryBattery to EnergyFlowFromStationaryStorageToBuilding
*SB!!! Need to figure out how to balance "EnergyFlowFromStationaryStorageToBuilding" with Energy_FromStationaryBattery_Onsite/_Export.
*SB!!! disagree with Dani - this should include all generation and consumption
     Electricity_FromStationaryBattery_Onsite(years,months,daytypes,hours)
     +
     Electricity_FromStationaryBattery_Export(years,months,daytypes,hours)
     +
     BinaryEVsConnectionTable(years,months,daytypes,hours)
     *
     Electricity_FromEVs(years,months,daytypes,hours)
     +
     Electricity_FromFlowBattery(years,months,daytypes,hours)
     ;
* VARIABLE DECLARATIONS

*2013/03. Lenaig added a year index to the following positive variables.
Positive VARIABLES
    Generation_Use   (TECHNOLOGIES, years, months, daytypes, hours)    DER generation up to the load (kW)
    Generation_Sell   (TECHNOLOGIES, years, months, daytypes, hours)   DER generation to sell        (kW)
    Electricity_PV_Export (years,months,daytypes,hours)                Electricity sales from PV      (kW)
    Electricity_PV_Onsite (years,months,daytypes,hours)                Electricity from PV for onsite use     (kW)
    AnnualElectricitySales (years)                                     Energy Sales                   ($)
    TotalElectricitySales (years)                                      Energy Sales                   (kWh)
    NGforDER_ElectricityProduction(years)            Annual Electricity from NG DER (kWh)
    NGforDER_ConsumedEnergy (years)                  Annual NG consumed for DER (kWh) if 0 set to 1
    DailyDemandCost(years)                           Annual cost of daily demand charges (kW)
    AllPeriodSavings                                 Base case annual costs (annualized) - DER-CAM solution cost ($)
    HeatingFromASHeatPump(years,months,daytypes,hours)
    CoolingFromASHeatPump(years,months,daytypes,hours)
    HeatingFromGSHeatPump(years,months,daytypes,hours)
    CoolingFromGSHeatPump(years,months,daytypes,hours)

* Variables characteristics
*2013/05/31. Lenaig  - added a year index to DER_Investment, DER_CurrentlyOperating, Capacity, Purchase, SwitchPurchase, NGChillPurchQuantity in order to consider potential consecutive investments.
*                    - renamed 'Capacity(ContinuousInvestType)' as 'CapacityAddedInYearY(ContinuousInvestType, years)' which refers to the capacity installed in a given year.
*
INTEGER VARIABLE DER_Investment(Technologies, years), DER_CurrentlyOperating(Technologies,years,months,daytypes,hours);
POSITIVE VARIABLE CapacityAddedInYearY(ContinuousInvestType,years);
* PV and solar thermal capacities refer to the peak output power,
* i.e. the output that can be obtain under specific test conditions (solar radiation of
* 1000W/m^2 and ambient temperature of 25C).


*BINARY VARIABLE Purchase(ContinuousInvestType,years);
BINARY VARIABLE SwitchPurchase(years);
INTEGER VARIABLE NGChillPurchQuantity(NGChillTech,years);

*2013/03. Lenaig added a year index to these variables.
Positive Variable DemandResponse(DemandResponseType,years,months,daytypes,hours);
Binary variable DemandResponseOnOff(DemandResponseType,years,months,daytypes,hours);

Positive Variable DemandResponseHeating(DemandResponseType,years,months,daytypes,hours);
Binary variable DemandResponseOnOffHeating(DemandResponseType,years,months,daytypes,hours);


Positive Variable ElectricSales(years,months,daytypes,hours);


positive Variable LoadReduction (years,months,daytypes,hours);
positive Variable LoadIncrease (years,months,daytypes,hours);
Binary Variable ReductionOrAddition(years,months,daytypes,hours);
*

*2013/05/31. Lenaig added a year index to this equation.
$ontext
Equation ContinuousPurchaseConstraintEq(ContinuousInvestType,years);
     ContinuousPurchaseConstraintEq(ContinuousInvestType,years)..
     CapacityAddedInYearY(ContinuousInvestType,years)
     =L=
     Purchase(ContinuousInvestType,years)*100000;
$offtext
*SB!!! attempting to make investment in continuous technologies continuous, not discrete
*2013/06/06. Lenaig added an equation to define 'TotalCapacityInYearY(ContinuousInvestType,years)'.
*The counter 'years_counter' is used to sum all the available capacities that might have been installed in different years.
*The capacities are not summed once the technologies reach their lifetime.
Equation DefineTotalCapacity_ContTech_Eq (ContinuousInvestType,years);
     DefineTotalCapacity_ContTech_Eq (ContinuousInvestType,years)..
     TotalCapacityInYearY(ContinuousInvestType,years)
     =E=
     sum(years_counter $(years_counter.val le ContinuousInvestParameter(ContinuousInvestType,'lifetime')),
           CapacityAddedInYearY(ContinuousInvestType,years-(years_counter.val-1))
     );

*2013/05/31. Lenaig added a year index to NumBatts and DiscreteElecStorage.
INTEGER VARIABLE NumBatts(years);
Equation DiscreteElecStorageEq(years);
         DiscreteElecStorageEq(years)$(Optionstable('DiscreteElecStorage','optionvalue')=1)..
         CapacityAddedInYearY('ElectricStorage',years)$(Optionstable('DiscreteElecStorage','optionvalue')=1)=E= NumBatts(years)*ElectricityStorageStationaryParameter('DiscreteSize');

*2013/03. Lenaig added a year index.
Equation DemandResponseonOffEq(DemandResponseType,years,months,daytypes,hours);
     DemandResponseonOffEq(DemandResponseType,years,months,daytypes,hours)..
     DemandResponse(DemandResponseType,years,months,daytypes,hours)
     =L=
     DemandResponseonOff(DemandResponseType,years,months,daytypes,hours)*100000;

*2013/03. Lenaig added a year index.
Equation DemandResponseonOffHeatingEq(DemandResponseType,years,months,daytypes,hours);
     DemandResponseonOffHeatingEq(DemandResponseType,years,months,daytypes,hours)..
     DemandResponseHeating(DemandResponseType,years,months,daytypes,hours)
     =L=
     DemandResponseOnOffHeating(DemandResponseType,years,months,daytypes,hours)*100000;



*2013/03. Lenaig added a year index.
Equation SaleEq(years,months,daytypes,hours);
     SaleEq(years,months,daytypes,hours)..
     ElectricSales(years,months,daytypes,hours)
     =L=
     (1-PurchaseOrSale(years,months,daytypes,hours))*1000000;

Positive variable ContractCapacity(years,months);
Equation ContractCapacity_Eq (years,months,daytypes,hours);
ContractCapacity_Eq (years,months,daytypes,hours)..
ContractCapacity(years,months)  =G=
     load(years,'electricity-only',months,daytypes,hours)
     +
     load(years, 'cooling', months, daytypes, hours)
     +
     load(years, 'refrigeration',months, daytypes,hours)
     +
     load(years, 'water-heating',months, daytypes,hours)
     -
     Electricity_Generation(years,months,daytypes,hours)
     -
     Electricity_FromStationaryBattery_Onsite(years,months,daytypes,hours)
     +
     Electricity_FromStationaryBattery_Export(years,months,daytypes,hours)
	 +
	 Electricity_PV_Export(years,months,daytypes, hours)
	 +
	 ElectricityForStorageStationary(years,months,daytypes,hours)
*SB!!! also leaving out Electricity_Photovoltaics, as PV typically can't be relied upon to relieve capacity charges. We could experiment with using
* average peak availability values (e.g. some sort of firmness value)
* SB!!! Should be based on generation and demand
* SB!!! how can we model PV here? Maybe just an average firmness (coincidence of peak)?
     -
     BinaryEVsConnectionTable(years,months,daytypes,hours)
     *
     Electricity_FromEVs(years,months,daytypes,hours)
     -
     Electricity_FromFlowBattery(years,months,daytypes,hours);


Positive variable ContractCost(years,months);
Equation ContractCost_Eq(years,months);
ContractCost_Eq(years,months)..
        ContractCost(years,months) =E=
        ContractCapacity(years,months)*ParameterTable('Contrct','ParameterValue')
        * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
        ;

Parameter MonthlyCharge;
MonthlyCharge (years, months, service) = MonthlyFee (years, service);

*******************************************
**  INCLUDE THE MASTER INCLUDE LIST  ******
*******************************************

*because tariff files were written long ago and names have since changed
*these a little bit of fudging right here

* used?
$ontext
set TariffParameterOption /Standby , Contrct , CO2Tax , MktCRate , macroeff , MinEffic/  ;
set TariffParameterDummy /ParameterValue/ ;
$offtext

parameter CO2Tax;
CO2Tax = ParameterTable ('CO2Tax', 'ParameterValue') ;
*tax in dollars per metric ton CO2

parameter NoInvestEnergyCost;
NoInvestEnergyCost = 999999999;
*($/year) for no invest case
parameter NoInvestElectricity;
NoInvestElectricity = 999999999;
*(kWh/year) for no invest case
parameter NoInvestNG;
NoInvestNG = 9999999999;
*(kWh/year) for no invest case


* reset internal CO2tax value
* only if CO2tax from table OptionsTable = 1
ParameterTable('CO2Tax','ParameterValue')$(OptionsTable('CO2tax','OptionValue')     eq 1) = CO2Tax;
ParameterTable('CO2Tax','ParameterValue')$(OptionsTable('CO2tax','OptionValue')     eq 0) = 0;

*determine the static switch size (estimate since it can change by the optimization results!)
*2013/03. Lenaig added a year index.
Parameter TotalELoad (years,months,daytypes,hours);
TotalELoad(years,months,daytypes,hours) =
     Load(years,'electricity-only',months,daytypes,hours)
     +
         Load(years,'cooling',months,daytypes,hours)
         +
         Load(years,'refrigeration',months,daytypes,hours)
         +
         Load(years,'water-heating',months,daytypes,hours);

Parameter SwitchSize;
*2013/03. Lenaig modified the assignment of the parameter 'SwitchSize' to screen total electricity load over all the years and find its minimum and its maximum.
SwitchSize = smin((years,months,daytypes,hours),TotalELoad(years,months,daytypes,hours))*ParameterTable ('FractionbaseLoad', 'ParameterValue')
+(smax((years,months,daytypes,hours),TotalELoad(years,months,daytypes,hours))-smin((years,months,daytypes,hours),TotalELoad(years,months,daytypes,hours)))*ParameterTable ('FractionPeakLoad', 'ParameterValue') ;
SwitchSize$((OptionsTable('switchinvest','OptionValue')  eq 0) )=0;


* ---------------------


* -------------------

* FIXED VARIABLE VALUES
*General note
*.fx fixes a variable
*.lo sets a lower limit
*.up sets an upper limit
* If no investment is allowed...
*2013/05/31. Lenaig added a year index.
*SB!!! Added constraints here to speed calculation
DER_Investment.fx(TECHNOLOGIES,years)                $(OptionsTable('DiscreteInvest','OptionValue') eq 0)   = 0;
CapacityAddedInYearY.fx(ContinuousInvestType,years)  $(OptionsTable('ContinuousInvest', 'OptionValue') eq 0)=0 ;
CapacityAddedInYearY.fx(ContinuousInvestType,years)  $(ContinuousVariableForcedInvest(ContinuousInvestType,'ForcedInvest') eq 0) = 0;
CapacityAddedInYearY.fx(ContinuousInvestType,years)  $((OptionsTable('RenewInvestments', 'OptionValue') eq 0) and (years.val gt 1)) = 0;
NGChillPurchQuantity.up(NGChillTech,years)           $(OptionsTable('NGChillInvest','OptionValue') eq 0)    = 0;
SwitchPurchase.up(years)                             $(OptionsTable('SwitchInvest','OptionValue') eq 0)     = 0;
*Disallow negative purchase amounts
*2013/05/31. Lenaig added a year index.
DER_Investment.lo(TECHNOLOGIES,years)                = 0;
CapacityAddedInYearY.lo(ContinuousInvestType,years)  = 0;
NGChillPurchQuantity.lo(NGChillTech,years)           = 0;

*If fixed purchase option is selected,
*fix all DER_Investment variables as defined in GenConstraints(TECHNOLOGIES, 'ForcedInvest')
*TK want a binary switch, too.

*TK would solutions be faster if integer variables had an upper limit (say five or ten)?

*2013/05/31. Lenaig added a year index to these equations.
*It means that if 'ForcedInvest = 1' for a given technology, there will be an investment every year in that technology.
*The size or quantity installed each year will be the one specified by the user.

*****    DISCRETE VARIABLE FORCED INVEST  ******
DER_Investment.fx(TECHNOLOGIES,years)$
     (GenConstraints(TECHNOLOGIES, 'ForcedInvest') eq 1)
     =
     GenConstraints(TECHNOLOGIES, 'ForcedNumber');

*****   NG DIRECT FIRED CHILLER FORCED INVEST   ******
NGChillPurchQuantity.fx(NGChillTech,years)$
     (NGChillForcedInvest (NGChillTech, 'ForcedInvest') eq 1)
     =
     NGChillForcedInvest (NGChillTech, 'ForcedInvestQuantity');

*****    CONTINUOUS VARIABLE FORCED INVEST  ******
*SB!!! 1/1/15 - made it such that "forcing" investment in any given technology simply prevents other techs from being invested in.
*This fixes the negative savings problem - see above

CapacityAddedInYearY.fx(ContinuousInvestType,years)$((ContinuousVariableForcedInvest(ContinuousInvestType,'ForcedInvest') = 1)
         and
         (ORD(years)=1)
         and
         (ContinuousVariableForcedInvest(ContinuousInvestType,'ForcedInvestCapacity') gt 0))
         =ContinuousVariableForcedInvest(ContinuousInvestType,'ForcedInvestCapacity');



*****    STATIC SWITCH FORCED INVEST  ******
SwitchPurchase.fx(years)$ (StaticSwitchParameter('ForcedInvest') = 1)
     =     1;

*2013/03. Lenaig added a year index.
*If selling of electricity is not an option
Generation_Sell.up(TECHNOLOGIES, years, months, daytypes, hours)$((OptionsTable('Sales','OptionValue') eq 0) or (DEROPT(TECHNOLOGIES,'AllowFeedIn') eq 0)) = 0;
Electricity_PV_Export.fx(years, months, daytypes, hours)$((OptionsTable('Sales','OptionValue') eq 0) or (OptionsTable('PVSales','OptionValue') eq 0)) = 0;
Electricity_FromStationaryBattery_Export.fx(years, months, daytypes, hours)$((OptionsTable('Sales','OptionValue') eq 0) or (OptionsTable('PVSales','OptionValue') eq 0)) = 0;

*************************************************************************
*--------------------   ELECTRICITY COSTS   -----------------------------
*************************************************************************
*2013/03. Lenaig added a year index to all variables and equations in this section about electricity costs.

Positive Variable ElectricFixedCost(years,months);
*2013/05/31. Lenaig calculated the present value of 'ElectricFixedCost'.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation ElectricFixedCost_Eq (years,months);
     ElectricFixedCost_Eq  (years,months) ..
     ElectricFixedCost(years,months)
     =E=
     MonthlyFee(years,'UtilElectric')
     * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
     ;

Positive Variable StandbyCost (years,months);
*2013/05/31. Lenaig calculated the present value of 'StandbyCost' and replaced 'DER_Investment (AvailableTECHNOLOGIES)' by the sum of 'DER_Investment (AvailableTECHNOLOGIES, years_counter)'.
*            The counter 'years_counter' is used to sum all the available capacities that might have been installed in different years.
*            The capacities are not summed once the technologies reach their lifetime.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation StandbyCostEq (years,months);
StandbyCostEq(years,months) ..
     StandbyCost(years,months)
     =E=
     sum(AvailableTECHNOLOGIES,
         sum(years_counter $(years_counter.val le years.val),
                 DER_Investment (AvailableTECHNOLOGIES,years_counter)
                 * deropt (AvailableTECHNOLOGIES, 'maxp')
                 * ParameterTable('Standby','ParameterValue')
*2013/09/06. Lenaig. $-condition to be checked.
                 $(years_counter.val le deropt(AvailableTECHNOLOGIES, 'lifetime'))
         )
     ) * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1));

Positive Variable ElectricPurchTOU(years, months);
Equation ElectricPurchTOUEq (years,months);
     ElectricPurchTOUEq (years,months)..
     ElectricPurchTOU (years,months)
     =E=
     sum((daytypes,hours) ,
          Electricity_Purchase(years,months,daytypes,hours)*ElectricityRates (years, months,daytypes, hours)
          *NumberOfDays(months,daytypes) * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
        );

*Positive Variable ElectricTOUCostByTOU (years,months, TimeOfDay);


*Equation ElectricTOUCostByTOU_Eq (years,months, TimeOfDay);
*     ElectricTOUCostByTOU_Eq (years,months, TimeOfDay) ..
*     ElectricTOUCostByTOU (years,months, TimeOfDay)
*     =E=
*          sum(daytypes,  ElectricPurchTOU (years,months,daytypes,TimeOfDay)  )
*
*     * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
*     ;

Positive Variable ElectricTOUCost (years,months);
*2013/05/31. Lenaig. 'ElectricTOUCost(years,months)' is a present value as a sum of present values.
Equation ElectricTOUCost_Eq (years,months);
     ElectricTOUCost_Eq (years,months) ..
     ElectricTOUCost (years,months)
     =E=
     ElectricPurchTOU (years,months)
     ;

Positive Variable ElectricConsumption(years,months);
Equation ElectricConsumption_Eq(years,months);
     ElectricConsumption_Eq(years,months)..
     ElectricConsumption(years,months)
     =E=
     sum((hours,daytypes),
     Electricity_Purchase(years,months,daytypes,hours)*NumberOfDays(months,daytypes)
     );

**********************************************************************************************************************************
* Please note if you want consider PX prices for electricity purchase you have to include HourlyCostEq and AnnualHourlyCostEq at the sovler statement MODEL CUSTADOP
* Currently it is not used
* The PX price is used for electricity sales.
* TK red flag These equations should be included, but the price should be zero if excluded
$ontext
Positive Variable HourlyCost(months);
Positive Variable AnnualHourlyCost;

Equation HourlyCostEq(months);
HourlyCostEq(months)..
     HourlyCost(months)
     =E=
     sum( (daytypes,hours),
          Electricity_Purchase(months,daytypes,hours)
          *PX (months,daytypes,hours)
          *NumberOfDays(months,daytypes)
         );
$offtext

$ontext
Equation AnnualHourlyCostEq;
AnnualHourlyCostEq..  AnnualHourlyCost
     =E=
     sum(months, HourlyCost(months));
$offtext
**********************************************************************************************************************************

* DEMAND CHARGES
* DETERMINING MAXIMUM DEMAND

*2013/03. Lenaig added a year index to all variables and equations in this section about demand charges.

Positive Variable MaxDemandMonthly   (years,months,DemandType);

Equation MaxDemandMonthlyEq (years,hours,months,daytypes,DemandType);
     MaxDemandMonthlyEq (years,hours,months,daytypes,DemandType) ..
     MaxDemandMonthly (years,months,DemandType)
     =G=
*noncoincident
      Electricity_Purchase (years,months,daytypes,hours)$(ord(DemandType)= DemandValue('Noncoincident'))
      +
*coincident
      Electricity_Purchase (years,months,daytypes,hours)$(ord(DemandType)= DemandValue('coincident')
                                           and CoincidentHour(years,months) = ord(hours)
                                           and daytypesValue('weekend') <> ord (daytypes))
      +
*onpeak
      Electricity_Purchase (years,months,daytypes,hours)$(ord(DemandType)= DemandValue('Onpeak')
                                           and  OnHoursMonth (hours, months, daytypes))
     +
*midpeak
      Electricity_Purchase (years,months,daytypes,hours)$(ord(DemandType)= DemandValue('Midpeak')
                                           and MidHoursMonth (hours, months, daytypes))
     +
*offpeak
      Electricity_Purchase (years,months,daytypes,hours)$(ord(DemandType)= DemandValue('Offpeak')
                                           and OffHoursMonth (hours, months, daytypes));

Positive Variable ElectricDemandCostByType (years,months,DemandType);
*2013/05/31. Lenaig calculated the present value of 'ElectricDemandCostByType(years,months,DemandType)'.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation ElectricDemandCostByType_Eq (years,months,DemandType);
     ElectricDemandCostByType_Eq (years,months,DemandType) ..
     ElectricDemandCostByType(years,months,DemandType)
     =E=
     MaxDemandMonthly(years,months,DemandType)
     * MonthlyDemandRates(years,months,DemandType)
     * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
     ;

Positive Variable ElectricDemandCost (years,months);
*2013/05/31. Lenaig. 'ElectricDemandCost(years,months)' is a present value as a sum of present values.
Equation ElectricDemandCost_Eq (years,months);
     ElectricDemandCost_Eq (years,months) ..
     ElectricDemandCost(years,months)
     =E=
     sum(DemandType, ElectricDemandCostByType(years,months,DemandType));


Positive Variable MaxDemandDaily   (years,months, daytypes,DemandType);
Equation MaxDemandDailyEq (hours,months,years,daytypes,DemandType);
     MaxDemandDailyEq (hours,months,years,daytypes,DemandType) ..
     MaxDemandDaily (years,months,daytypes,DemandType)
     =G=
*noncoincident
      Electricity_Purchase (years,months,daytypes,hours)$(ord(DemandType)= DemandValue('Noncoincident'))
      +
*coincident
      Electricity_Purchase (years,months,daytypes,hours)$(ord(DemandType)= DemandValue('coincident')
                                           and CoincidentHour(years,months) = ord(hours)
                                           and daytypesValue('weekend') <> ord (daytypes))
      +
*onpeak
      Electricity_Purchase (years,months,daytypes,hours)$(ord(DemandType)= DemandValue('Onpeak')
                                            and  OnHoursMonth (hours, months, daytypes))
     +
*midpeak
      Electricity_Purchase (years,months,daytypes,hours)$(ord(DemandType)= DemandValue('Midpeak')
                                           and  MidHoursMonth (hours, months, daytypes))
     +
*offpeak
      Electricity_Purchase (years,months,daytypes,hours)$(ord(DemandType)= DemandValue('Offpeak')
                                           and  OffHoursMonth (hours, months, daytypes))

Positive Variable DailyDemandCharge (years,months,daytypes,DemandType);
*2013/05/31. Lenaig calculated the present value of 'DailyDemandCharge(years,months,daytypes,DemandType)'.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation DailyDemandChargeEq (years, months, daytypes, DemandType);
     DailyDemandChargeEq (years, months, daytypes, DemandType) ..
     DailyDemandCharge(years, months,daytypes,DemandType)
     =E=
     MaxDemandDaily(years, months,daytypes,DemandType)
     *DailyDemandRates(years,months,DemandType)
     *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1));

Positive Variable ElectricDailyDemandCost(years,months);
*2013/05/31. Lenaig. 'ElectricDailyDemandCost(years,months)' is a present value as a sum of present values.
Equation ElectricDailyDemandCost_Eq(years,months);
     ElectricDailyDemandCost_Eq(years,months)..
     ElectricDailyDemandCost(years,months)
     =E=
     sum((daytypes,DemandType),
       DailyDemandCharge(years,months,daytypes,DemandType)
       * NumberOfDays(months,daytypes)
     );


*---TotalDailyDemandCharges
$ontext
Positive Variable AnnualDailyDemandCost;

Equation AnnualDailyDemandCostEq;
     AnnualDailyDemandCostEq..
     AnnualDailyDemandCost
     =E=
     sum((months, daytypes, DemandType), DailyDemandCharge(months,daytypes, DemandType));

Positive Variable AnnualMonthlyDemandCost;

Equation AnnualMonthlyDemandCostEq;
AnnualMonthlyDemandCostEq.. AnnualMonthlyDemandCost
     =E=
     sum((months, DemandType), MonthlyDemandCharge(months,DemandType));

$offtext

*Monthly Macrogrid CO2 Emissions
*2013/03. Lenaig added a year index to all variables and equations in this section about CO2 emissions.

Positive Variable ElectricCO2 (years,months);

Equation ElectricCO2_Eq (years,months);
     ElectricCO2_Eq(years,months)..
     ElectricCO2(years,months)
     =E=
     sum ((daytypes,hours),
          Electricity_Purchase(years,months,daytypes,hours)*HourlyMarginalCO2Emissions(months, hours)
          *NumberOfDays(months, daytypes)
          );

Positive Variable ElectricCO2Cost (years,months);

Variable CO2fromEVsHomeCharging(years,months);
Variable EVHomeElectricityCO2Cost(years,months);
*Olivier : 2 variables above added
*OLIVIER : not positive, as it can be a negative value if the car(+building) displaces home electricity

*2013/05/31. Lenaig calculated the present value of 'ElectricCO2Cost(years,months)'.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation ElectricCO2Cost_Eq (years,months);
     ElectricCO2Cost_Eq(years,months)..
     ElectricCO2Cost(years,months)
     =E=
     ElectricCO2(years,months)*ParameterTable('CO2Tax','ParameterValue')
     * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1));


*2013/05/31. Lenaig calculated the present value of 'EVHomeElectricityCO2Cost(years,months)'.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation EVHomeElectricityCO2Cost_Eq (years,months);
         EVHomeElectricityCO2Cost_Eq (years,months)..
         EVHomeElectricityCO2Cost(years,months)
         =E=
         CO2fromEVsHomeCharging(years,months)*ParameterTable('CO2Tax','ParameterValue')
         * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1));

*2013/03. Lenaig added a year index to all variables and equations in this section about electric costs.
*SB!!! Added variables below as per Jose Pablo's formulation. Also added the YearlyBatteryDegradationEq as per JP's formulation
Variable RegulationTotalCost(years,months);
Variable YearlyBatteryDegradation(years);
Variable RegulationCapacityUpCost(years,months);
Variable RegulationCapacityDownCost(years,months);
Variable RegulationEnergyCost1(years,months);
Variable RegulationEnergyCost2(years,months);
Positive Variables
     ElectricityStorageStationaryCapacity(years,months)
     ElectricityForStorageStationary(years,months,daytypes,hours)
     CapacityBidRegulationDownBattery (years, months, daytypes, hours)
     CapacityBidRegulationUpBattery (years, months, daytypes, hours)
     EnergyFlowFromISOToBattery (years, months, daytypes, hours)
     EnergyFlowFromBatteryToISO (years, months, daytypes, hours)
     ;

*2015/01/16 Dani moved ElectricityStorageStationaryCapacity, ElectricityForStorageStationary
*SB!!! Believes that we should add an approximation of cycle life here as opposed to simple month-to-month degradation (e.g. BatteryDegradation)
$ontext
Equation BatteryCycleLifeEq(years);
         BatteryCycleLifeEq(years)..
         2*ParameterTable('CycleLife','ParameterValue')
         *
         CapacityAddedInYearY('ElectricStorage',years)
         *
         (1-ElectricityStorageStationaryParameter('MaxDepthOfDischarge'))/ContinuousInvestParameter('ElectricStorage','lifetime')
         =g=
         sum((months,daytypes,hours),
                (ElectricityStorageStationaryOutput(years,months,daytypes,hours)+ElectricityForStorageStationary(years,months,daytypes,hours))
                *
                NumberOfDays(months,daytypes));
$offtext
Equation YearlyBatteryDegradationEq(years);
      YearlyBatteryDegradationEq(years)..
      YearlyBatteryDegradation(years)
      =E=
      (ContinuousInvestParameter('ElectricStorage','VariableCost')
      /
      (2*ParameterTable('CycleLife','ParameterValue')*ElectricityStorageStationaryParameter('EfficiencyCharge')*ElectricityStorageStationaryParameter('EfficiencyDischarge'))
      *
      sum((months,daytypes,hours),(ElectricityStorageStationaryOutput(years,months,daytypes,hours)+ElectricityForStorageStationary(years,months,daytypes,hours))*NumberOfDays(months,daytypes)))
      *
      (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
      ;
$ontext
Equation YearlyBatteryDegradationEq(years);
      YearlyBatteryDegradationEq(years)..
      YearlyBatteryDegradation(years)
      =E=
      (ContinuousInvestParameter('ElectricStorage','VariableCost')
*      (UpfrontCapitalCost_ContTech ('ElectricStorage', years)
      *
      ElectricityStorageStationaryParameter('BatteryDegradation')
      *
      sum((months,daytypes,hours),(ElectricityStorageStationaryOutput(years,months,daytypes,hours)+ElectricityForStorageStationary(years,months,daytypes,hours))*NumberOfDays(months,daytypes)))
      *
      (5/100)
      *
      (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
      ;
*The 5 at the end is because 20% degradation is equivalent to a worthless battery
* SB!!! Why does multiplying by 1/20 make sense?
* SB!!! changed Electricity_FromStationaryBattery to ElectricityStorageStationaryOutput
$offtext
Equation RegulationCapacityUpCostEq(years,months);
      RegulationCapacityUpCostEq(years,months)..
      RegulationCapacityUpCost(years,months)
      =E=
      sum((daytypes,hours),CapacityBidRegulationUpBattery(years,months,daytypes,hours)*RegulationCapacityUpPrice(years,months,daytypes,hours)*NumberOfDays(months,daytypes))
      * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
      ;

Equation RegulationCapacityDownCostEq(years,months);
      RegulationCapacityDownCostEq(years,months)..
      RegulationCapacityDownCost(years,months)
      =E=
      sum((daytypes,hours),CapacityBidRegulationDownBattery(years,months,daytypes,hours)*RegulationCapacityDownPrice(years,months,daytypes,hours)*NumberOfDays(months,daytypes))
      * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
      ;

Equation RegulationEnergyCost1Eq(years,months);
      RegulationEnergyCost1Eq(years,months)..
      RegulationEnergyCost1(years,months)
      =E=
      sum((daytypes,hours),EnergyFlowFromBatteryToISO(years,months,daytypes,hours)*RegulationEnergyPrice(years,months,daytypes,hours)*NumberOfDays(months,daytypes))
      * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
      ;

Equation RegulationEnergyCost2Eq(years,months);
      RegulationEnergyCost2Eq(years,months)..
      RegulationEnergyCost2(years,months)
      =E=
      sum((daytypes,hours),EnergyFlowFromISOToBattery(years,months,daytypes,hours)*RegulationEnergyPricep(years,months,daytypes,hours)*NumberOfDays(months,daytypes))
      * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
      ;

Equation RegulationTotalCostEq(years,months);
      RegulationTotalCostEq(years,months)..
      RegulationTotalCost(years,months)
      =E=
      -
      RegulationEnergyCost2(years,months)
      -
      RegulationCapacityUpCost(years,months)
      -
      RegulationCapacityDownCost(years,months)
      -
      RegulationEnergyCost1(years,months)
      ;




Positive Variable ElectricTotalCost(years,months);
Equation ElectricTotalCost_Eq(years,months);
     ElectricTotalCost_Eq(years,months)..
     ElectricTotalCost(years,months)
     =E=
     ContractCost(years,months) +
     ElectricFixedCost(years,months) +
     StandbyCost(years,months) +
     ElectricTOUCost(years,months) +
     ElectricDemandCost(years,months) +
     ElectricDailyDemandCost(years,months) +
     ElectricCO2Cost(years,months)   +
     ElectricVehicleBilling(years,months) +
     EVHomeElectricityCO2Cost(years,months) +
     RegulationTotalCost(years,months)
     ;

* Annual Electricity costs
Positive Variable AnnualElectricCost(years);

Equation AnnualElectricCostEq(years);
     AnnualElectricCostEq(years) ..
     AnnualElectricCost(years)
     =E=
     sum(months,ElectricTotalCost(years,months));

* Annual Electricity Consumption
Positive Variable AnnualElectricConsumption(years);

Equation AnnualElectricConsumption_Eq(years);
         AnnualElectricConsumption_Eq(years)..
         AnnualElectricConsumption(years)
         =E=
         sum ((months,daytypes,hours),
          Electricity_Purchase(years,months,daytypes,hours)
          *NumberOfDays(months, daytypes)
          );

Positive Variable AnnualElectricCO2(years);

Equation AnnualElectricCO2_Eq(years);
     AnnualElectricCO2_Eq(years)..
     AnnualElectricCO2(years)
     =E=
     sum(months,ElectricCO2(years,months));


***************************************************************************************
*--------------------   NATURAL GAS CONSUMPTION/CO2/COST   -------------------------
***************************************************************************************
*2013/03. Lenaig added a year index to all variables and equations in this section about natural gas consumption, CO2 and cost.

*----------------  monthly consumption  -----------------------

*TK not sure where these first two declarations should go
Positive Variable NG_ForHeat(years,months,daytypes,hours);
Positive Variable NG_ForNGChill(years,months,daytypes,hours);
Positive Variable NG_ForDG(years,months,daytypes,hours);
Positive Variable NG_ForCHPDG(years,months,daytypes,hours);

Positive Variable Heat_FromStorage(years,months,daytypes,hours);

Positive Variable NGforDGConsumption (years,months);
Positive Variable NGforCHPDGConsumption (years,months);
Positive Variable NGforHeatConsumption (years,months);
Positive Variable NGforNGChillConsumption (years,months);
Positive Variable NGforNGOnlyLoadConsumption(years,months);
Positive Variable NGTotalConsumption (years,months);


Equation NG_ForCHPDG_Eq(years,months,daytypes,hours);
     NG_ForCHPDG_Eq(years,months,daytypes,hours)..
     NG_ForCHPDG(years,months,daytypes,hours)
     =E=
     sum((AvailableCHPTECHNOLOGIES)$(FuelValue('NGforDG')=(deropt(AvailableCHPTECHNOLOGIES,'fuel'))),
        Generation_Use(AvailableCHPTECHNOLOGIES,years,months,daytypes,hours)*(1/deropt(AvailableCHPTECHNOLOGIES,'efficiency')) )
        + sum((AvailableCHPTECHNOLOGIES)$(FuelValue('NGforDG')=(deropt(AvailableCHPTECHNOLOGIES,'fuel'))),
        Generation_Sell(AvailableCHPTECHNOLOGIES,years,months,daytypes,hours)*(1/deropt(AvailableCHPTECHNOLOGIES,'efficiency')) );

Equation NG_ForDG_Eq(years,months,daytypes,hours);
     NG_ForDG_Eq(years,months,daytypes,hours)..
     NG_ForDG(years,months,daytypes,hours)
     =E=
     sum((AvailableTECHNOLOGIES)$(FuelValue('NGforDG')=(deropt(AvailableTECHNOLOGIES,'fuel'))),
        Generation_Use(AvailableTECHNOLOGIES,years,months,daytypes,hours)*(1/deropt(AvailableTECHNOLOGIES,'efficiency')) )
        + sum((AvailableTECHNOLOGIES)$(FuelValue('NGforDG')=(deropt(AvailableTECHNOLOGIES,'fuel'))),
        Generation_Sell(AvailableTECHNOLOGIES,years,months,daytypes,hours)*(1/deropt(AvailableTECHNOLOGIES,'efficiency')) )
   ;

Equation NGforDGConsumption_Eq(years,months);
     NGforDGConsumption_Eq(years,months)..
     NGforDGConsumption(years,months)
     =E=
     sum((daytypes,hours), NG_ForDG(years,months,daytypes,hours)
         *NumberOfDays(months,daytypes));

Equation NGforCHPDGConsumption_Eq(years,months);
    NGforCHPDGConsumption_Eq(years,months)..
    NGforCHPDGConsumption(years,months)
    =E=
    sum((daytypes,hours), NG_ForCHPDG(years,months,daytypes,hours)*NumberOfDays(months,daytypes));

Equation NGforHeatConsumption_Eq(years,months);
     NGforHeatConsumption_Eq(years,months)..
     NGforHeatConsumption(years,months)
     =E=
     sum((daytypes,hours), NG_ForHeat(years,months,daytypes,hours)
         *NumberOfDays(months,daytypes));

Equation NGforNGChillConsumption_Eq(years,months);
     NGforNGChillConsumption_Eq(years,months)..
     NGforNGChillConsumption(years,months)
     =E=
     sum((daytypes,hours), NG_ForNGChill(years,months,daytypes,hours)
         *NumberOfDays(months,daytypes));

Parameters NaturalGasOnlyLoad(years,months,daytypes,hours);
         NaturalGasOnlyLoad(years,months,daytypes,hours) = Load(years,'naturalgas-only',months,daytypes,hours);

Equation NGforNGOnlyLoadConsumption_Eq(years,months);
         NGforNGOnlyLoadConsumption_Eq(years,months)..
         NGforNGOnlyLoadConsumption(years,months)
         =E=
         sum((daytypes,hours), NaturalGasOnlyLoad(years,months,daytypes,hours)
         *NumberOfDays(months,daytypes));

Equation NGTotalConsumption_Eq(years,months);
     NGTotalConsumption_Eq(years,months)..
     NGTotalConsumption(years,months)
     =E=
     NGforDGConsumption(years,months)
     + NGforHeatConsumption(years,months)
     + NGforNGChillConsumption(years,months)
     + NGforNGOnlyLoadConsumption(years,months);

*---------- monthly CO2 -------------------------------------------

Positive Variable CO2FromNG(years,months);
Positive Variable CO2FromDER(years,months);
Positive Variable CO2FromNonDER(years,months);
Positive Variable CO2FromChillers(years,months);
Positive Variable CO2FromNGOnlyLoad(years,months);

Equation CO2FromDER_Eq(years,months);
     CO2FromDER_Eq(years,months)..
     CO2FromDER(years,months)
     =E=
     NGforDGConsumption(years,months)*CO2EmissionsRate ('NGforDG');

Equation CO2FromNonDER_Eq(years,months);
     CO2FromNonDER_Eq(years,months)..
     CO2FromNonDER(years,months)
     =E=
     NGforHeatConsumption(years,months)*CO2EmissionsRate ('NGBasic');

Equation CO2FromChillers_Eq(years,months);
     CO2FromChillers_Eq(years,months)..
     CO2FromChillers(years,months)
     =E=
     NGforNGChillConsumption(years,months)*CO2EmissionsRate ('NGBasic');

Equation CO2FromNGOnlyLoad_Eq(years,months);
         CO2FromNGOnlyLoad_Eq(years,months)..
         CO2FromNGOnlyLoad(years,months)
         =E=
         NGforNGOnlyLoadConsumption(years,months)*CO2EmissionsRate ('NGBasic');

Equation CO2FromNG_Eq(years,months);
     CO2FromNG_Eq(years,months)..
     CO2FromNG(years,months)
     =E=
     CO2FromDER(years,months)+CO2FromNonDER(years,months)+CO2FromChillers(years,months)+CO2FromNGOnlyLoad(years,months);

*-------------------  monthly costs  -----------------------------
*2013/05/31. Lenaig calculated the present values of all NG costs in this section.
Positive Variable NGforDGCost(years,months);
Positive Variable NGforHeatCost(years,months);
Positive Variable NGforNGChillCost(years,months);
Positive Variable NGforNGOnlyLoadCost(years,months);
Positive Variable NGFixedCost(years,months);
Positive Variable NGCO2Cost(years,months);
Positive Variable NGTotalCost(years,months);

*2013/05/31. Lenaig calculated the present value of 'NGforDGCost(years,months)'.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation NGforDGCost_Eq(years,months);
     NGforDGCost_Eq(years,months)..
     NGforDGCost(years,months)
     =E=
     NGforDGConsumption(years,months)
     * FuelPrice(years,months,'NGforDG')
     * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1));

*2013/05/31. Lenaig calculated the present value of 'NGforHeatCost(years,months)'.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation NGforHeatCost_Eq(years,months);
     NGforHeatCost_Eq(years,months)..
     NGforHeatCost(years,months)
     =E=
     NGforHeatConsumption(years,months)
     * FuelPrice(years,months,'NGbasic')
     * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1));

*2013/05/31. Lenaig calculated the present value of 'NGforNGChillCost(years,months)'.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation NGforNGChillCost_Eq(years,months);
     NGforNGChillCost_Eq(years,months)..
     NGforNGChillCost(years,months)
     =E=
     NGforNGChillConsumption(years,months)
     * FuelPrice(years,months,'NGbasic')
     * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1));

*2013/05/31. Lenaig calculated the present value of 'NGforNGOnlyLoadCost(years,months)'.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation NGforNGOnlyLoadCost_Eq(years,months);
     NGforNGOnlyLoadCost_Eq(years,months)..
     NGforNGOnlyLoadCost(years,months)
     =E=
     NGforNGOnlyLoadConsumption(years,months)
     * FuelPrice(years,months,'NGbasic')
     * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1));

*2013/05/31. Lenaig calculated the present value of 'NGFixedCost(years,months)'.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation NGFixedCost_Eq(years,months);
     NGFixedCost_Eq(years,months)..
     NGFixedCost(years,months)
     =E=
     ( MonthlyFee(years,'UtilNGbasic')
       +
       MonthlyFee(years,'UtilNGforDG')
       +
       MonthlyFee(years,'UtilNGforABS'))
     * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1));

*2013/05/31. Lenaig calculated the present value of 'NGCO2Cost(years,months)'.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation NGCO2Cost_Eq(years,months);
     NGCO2Cost_Eq(years,months)..
     NGCO2Cost(years,months)
     =E=
     CO2FromNG(years,months)
     * ParameterTable('CO2Tax','ParameterValue')
     * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1));

Equation NGTotalCost_Eq(years,months);
     NGTotalCost_Eq(years,months)..
     NGTotalCost(years,months)
     =E=
       NGforDGCost(years,months)
     + NGforHeatCost(years,months)
     + NGforNGChillCost(years,months)
     + NGforNGOnlyLoadCost(years,months)
     + NGFixedCost(years,months)
     + NGCO2Cost(years,months);

*--------------- annual NG totals  ------------------------------
*TK this should be done post solver, otherwise it's just extra variables
*However, CO2 is calculated anyways for CO2 constrained runs

Positive Variable AnnualNGCost       (years);
Positive Variable AnnualNGConsume    (years);
Positive Variable AnnualNGCO2        (years);
Positive Variable AnnualNGCO2DER     (years);
Positive Variable AnnualNGCO2NonDER  (years);
Positive Variable AnnualNGCO2Chillers(years);
positive variable AnnualNGCO2NGOnly  (years);

Equation AnnualNGCost_Eq(years);
     AnnualNGCost_Eq(years)..
     AnnualNGCost(years) =E= sum(months,NGTotalCost(years,months));

Equation AnnualNGConsume_Eq(years);
     AnnualNGConsume_Eq(years)..
     AnnualNGConsume(years) =E= sum(months,NGTotalConsumption(years,months));

Equation AnnualNGCO2DER_Eq(years);
     AnnualNGCO2DER_Eq(years)..
     AnnualNGCO2DER(years) =E= sum(months,CO2FromDER(years,months));

Equation AnnualNGCO2NonDER_Eq(years);
     AnnualNGCO2NonDER_Eq(years)..
     AnnualNGCO2NonDER(years) =E= sum(months,CO2FromNonDER(years,months));

Equation AnnualNGCO2Chillers_Eq(years);
     AnnualNGCO2Chillers_Eq(years)..
     AnnualNGCO2Chillers(years) =E= sum(months,CO2FromChillers(years,months));

Equation AnnualNGCO2NGOnly_Eq(years);
     AnnualNGCO2NGOnly_Eq(years)..
     AnnualNGCO2NGOnly(years) =E= sum(months,CO2FromNGOnlyLoad(years,months));

Equation AnnualNGCO2_Eq(years);
     AnnualNGCO2_Eq(years)..
     AnnualNGCO2(years) =E= AnnualNGCO2DER(years)+AnnualNGCO2NonDER(years)+AnnualNGCO2Chillers(years)+AnnualNGCO2NGOnly(years);

* ------------------------------

***************************************************************************************
*--------------------   OTHER FUEL CONSUMPTION/CO2/COST   --------------------------
***************************************************************************************
*2013/03. Lenaig added a year index to all variables and equations in this section about other fuel consumption, CO2 and cost.

Positive Variable OtherFuelConsumption (years,months,fueltype);
*red flag
Equation OtherFuelConsumptionEq (years,months,fueltype);
OtherFuelConsumptionEq (years,months,NonNGFuels).. OtherFuelConsumption (years,months,NonNGFuels)
     =E=
     sum(  (enduse,AvailableTECHNOLOGIES,daytypes,hours)$(FuelValue(NonNGFuels)=(deropt(AvailableTECHNOLOGIES,'fuel'))),
        Generation_Use(AvailableTECHNOLOGIES,years,months,daytypes,hours)*(1/deropt(AvailableTECHNOLOGIES,'efficiency'))*NumberOfDays(months,daytypes)  )
        + sum(         (AvailableTECHNOLOGIES,daytypes,hours)$(FuelValue(NonNGFuels)=deropt(AvailableTECHNOLOGIES,'fuel')),
        Generation_Sell(AvailableTECHNOLOGIES,years,months,daytypes,hours)*(1/deropt(AvailableTECHNOLOGIES,'efficiency'))*NumberOfDays(months,daytypes)   )
   ;

Positive Variable OtherFuelCost (years,months,FuelType);
*2013/05/31. Lenaig calculated the present value of 'OtherFuelCost (years, months, NonNGFuels)'.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation OtherFuelCostEq (years,months,FuelType);
OtherFuelCostEq(years,months,NonNGFuels) ..
OtherFuelCost (years,months,NonNGFuels)
     =E=
     OtherFuelConsumption (years,months,NonNGFuels)
     * FuelPrice(years,months,NonNGFuels)
     * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1));

Positive Variable AnnualOtherFuelCost (years,FuelType);
Equation AnnualOtherFuelCostEq (years,FuelType);
AnnualOtherFuelCostEq(years,NonNGFuels) ..
AnnualOtherFuelCost (years,NonNGFuels)
     =E=
     sum(months, OtherFuelCost(years,months,NonNGFuels));

* ---------------------------------------------------

***************************************************************************************
*--------------------   DG INVESTMENT AND MAINTENANCE COSTS   -------------------------
***************************************************************************************

*DG EQUIPMENT COSTS

*---------------- Upfront Capital Costs  ------------------------------------------------------


*2013/05/31. Lenaig calculated the present value of 'UpfrontCapitalCost_DiscTech(AvailableTechnologies,years)'.
*2014/06/13. Lenaig removed the NPV statement " *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1)) ".
Equation UpfrontCapitalCost_DiscTech_Eq (Technologies,years);
         UpfrontCapitalCost_DiscTech_Eq (AvailableTechnologies,years)..
         UpfrontCapitalCost_DiscTech (AvailableTechnologies,years)
         =E=
         ( DER_Investment (AvailableTechnologies,years)
           * deropt (AvailableTechnologies, 'maxp')
           * ( deropt (AvailableTechnologies, 'capcost') + deropt(AvailableTechnologies, 'NoxTreatCost') )
           - 0.5 * SGIPIncentiveAmount(AvailableTechnologies)
         )
         ;

*2013/05/31. Lenaig calculated the present value of 'UpfrontCapitalCost_NGChill(NGChillTech,years)'.
*2014/06/13. Lenaig removed the NPV statement " *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1)) ".
Equation UpfrontCapitalCost_NGChill_Eq (NGChillTech,years);
         UpfrontCapitalCost_NGChill_Eq (NGChillTech,years)..
         UpfrontCapitalCost_NGChill (NGChillTech,years)
         =E=
         NGChillPurchQuantity (NGChillTech,years)
         * NGChiller (NGChillTech, 'maxp')
         * NGChiller (NGChillTech, 'capcost')
         ;

*2013/05/31. Lenaig calculated the present value of 'UpfrontCapitalCost_ContTech(ContinuousInvestType, years)'.
*2014/06/13. Lenaig removed the NPV statement " *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1)) ".
Equation UpfrontCapitalCost_ContTech_Eq (ContinuousInvestType, years);
     UpfrontCapitalCost_ContTech_Eq (ContinuousInvestType, years)..
     UpfrontCapitalCost_ContTech (ContinuousInvestType, years)
     =E=
     (
*fixed cost
*     ContinuousInvestParameter(ContinuousInvestType,'FixedCost')
*     *Purchase(ContinuousInvestType, years)
*variable cost
     +
     ContinuousInvestParameter(ContinuousInvestType,'VariableCost')
     *CapacityAddedInYearY(ContinuousInvestType, years)
     +
     UpfrontCapitalCostBoreHole(ContinuousInvestType, years)
     )
     ;
*SB!!! removed the fixed cost component of investments. This allows us to make investment continuous, not discrete
*2013/05/31. Lenaig did not calculate the present value of 'UpfrontCapitalCostBoreHole('GroundSourceHeatPump',years) because it is included in 'UpfrontCapitalCost_ContTech(ContinuousInvestType,years)' which is already a present value.
Equation UpfrontCapitalCostBoreHole_Eq1(years,months,daytypes,hours);
     UpfrontCapitalCostBoreHole_Eq1(years,months,daytypes,hours)..
     UpfrontCapitalCostBoreHole('GroundSourceHeatPump',years)
     =G=
     HeatPumpParameterValue('GroundSourceHeatPump','BoreHoleCost')
     *CoolingfromGSHeatPump(years, months, daytypes, hours)*COPelectric
     *(1+HeatPumpParameterValue('GroundSourceHeatPump','COP_Cooling'))/HeatPumpParameterValue('GroundSourceHeatPump','HeatTransferBorehole_Cooling')
     ;

Equation UpfrontCapitalCostBoreHole_Eq2(years,months,daytypes,hours);
     UpfrontCapitalCostBoreHole_Eq2(years,months,daytypes,hours)..
     UpfrontCapitalCostBoreHole('GroundSourceHeatPump',years)
     =G=
     HeatPumpParameterValue('GroundSourceHeatPump','BoreHoleCost')
     *HeatingfromGSHeatPump(years, months, daytypes, hours)
     *(1-HeatPumpParameterValue('GroundSourceHeatPump','COP_Heating'))/HeatPumpParameterValue('GroundSourceHeatPump','HeatTransferBorehole_Heating')
     ;

*2013/05/31. Lenaig calculated the present value of 'UpfrontCapitalCost_Switch(years)'.
*2014/06/13. Lenaig removed the NPV statement " *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1)) ".
Equation UpfrontCapitalCost_Switch_Eq(years);
     UpfrontCapitalCost_Switch_Eq(years)..
     UpfrontCapitalCost_StaticSwitch(years)
     =E=
     (SwitchSize*StaticSwitchParameter('CostM') + StaticSwitchParameter('CostB')) * SwitchPurchase(years)
     ;

*------------------Summary----------------
*2013/05/31. Lenaig added a year index to the intermediate upfront capital costs.
Equation UpfrontCapitalCost_Eq (years);
     UpfrontCapitalCost_Eq(years)..
     UpfrontCapitalCost(years)
     =E=
     sum(AvailableTechnologies, UpfrontCapitalCost_DiscTech(AvailableTechnologies, years))
     +
     sum(ContinuousInvestType, UpfrontCapitalCost_ContTech (ContinuousInvestType, years))
     +
     sum(NGChillTech, UpfrontCapitalCost_NGChill (NGChillTech, years))
     +
     UpfrontCapitalCost_StaticSwitch(years)
     ;

*---------------- Annualized Capital Costs  ------------------------------------------------------
*2013/05/31. Lenaig added a year index to annualized capital costs (=equivalent annual costs).
Positive Variable AnnualizedCapitalCost_DiscTech(Technologies, years);
Positive Variable AnnualizedCapitalCost_ContTech(ContinuousInvestType, years);
Positive Variable AnnualizedCapitalCost_NGChill (NGChillTech, years);
Positive Variable AnnualizedCapitalCost_Switch(years);
Positive Variable AnnualizedCapitalCost(years);

*-----   Discrete Technologies   -----
*2013/05/31. Lenaig considered the latest investments thanks to the year-counter when calculating the annualized capital cost.
*2014/06/13. Lenaig added the NPV statement " * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))" after calculating the annuities.
Equation AnnualizedCapCost_DiscTech_Eq (Technologies, years);
     AnnualizedCapCost_DiscTech_Eq (AvailableTechnologies, years)..
     AnnualizedCapitalCost_DiscTech(AvailableTechnologies, years)
     =E=
     sum(years_counter $(years_counter.val le deropt(AvailableTechnologies,'lifetime')),

         UpfrontCapitalCost_DiscTech(AvailableTechnologies, years - (years_counter.val - 1))
         * AnnuityRate_DiscTech (AvailableTECHNOLOGIES)
     )
     * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
     ;

*-----   Continuous Technologies   -----
*2013/05/31. Lenaig considered the latest investments thanks to the year-counter when calculating the annualized capital cost.
*2014/06/13. Lenaig added the NPV statement " * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))" after calculating the annuities.
Equation AnnualizedCapCost_ContTech_Eq (ContinuousInvestType, years);
     AnnualizedCapCost_ContTech_Eq (ContinuousInvestType, years)..
     AnnualizedCapitalCost_ContTech(ContinuousInvestType, years)
     =E=
     sum(years_counter $(years_counter.val le ContinuousInvestParameter(ContinuousInvestType,'lifetime')),

           UpfrontCapitalCost_ContTech (ContinuousInvestType, years - (years_counter.val - 1))
           * AnnuityRate_ContTech (ContinuousInvestType)
     )
     * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
     ;

*-----   NG directly fired chillers   -----
*2013/05/31. Lenaig considered the latest investments thanks to the year-counter when calculating the annualized capital cost.
*2014/06/13. Lenaig added the NPV statement " * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))" after calculating the annuities.
Equation AnnualizedCapCost_NGChill_Eq (NGChillTech, years);
     AnnualizedCapCost_NGChill_Eq (NGChillTech, years)..
     AnnualizedCapitalCost_NGChill (NGChillTech, years)
     =E=
     sum(years_counter $(years_counter.val le NGChiller(NGChillTech,'lifetime')),

         UpfrontCapitalCost_NGChill (NGChillTech, years - (years_counter.val - 1))
         * AnnuityRate_NGChill (NGChillTech)
     )
     * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
     ;

*-----   Static Switch   -----
*2013/05/31. Lenaig considered the latest investments thanks to the year-counter when calculating the annualized capital cost.
*2014/06/13. Lenaig added the NPV statement " * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))" after calculating the annuities.
Equation AnnualizedCapCost_Switch_Eq (years);
     AnnualizedCapCost_Switch_Eq (years)..
     AnnualizedCapitalCost_Switch(years)
     =E=
     sum(years_counter $(years_counter.val le StaticSwitchParameter('lifetime')),

         UpfrontCapitalCost_StaticSwitch (years - (years_counter.val - 1))
         * AnnuityRate_StaticSwitch
     )
     * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
     ;

*-----   Summary   -----
*2013/05/31. Lenaig a year index to the intermediate annualized capital costs.
Equation AnnualizedCapCost_Eq(years);
     AnnualizedCapCost_Eq(years)..
     AnnualizedCapitalCost(years)
     =E=
     sum(AvailableTechnologies, AnnualizedCapitalCost_DiscTech(AvailableTechnologies, years))
     +
     sum(ContinuousInvestType, AnnualizedCapitalCost_ContTech (ContinuousInvestType, years))
     +
     sum(NGChillTech, AnnualizedCapitalCost_NGChill (NGChillTech, years))
     +
     AnnualizedCapitalCost_Switch(years)
     ;


*---------------- Fixed Maintenance Costs  ------------------------------------------------------
*2013/03. Lenaig added a year index to all variables and equations in this section about fixed maintenance costs.
Positive Variable FixedMaintCost_DiscTech (years, months, Technologies);
Positive Variable FixedMaintCost_ContTech (years, months, ContinuousInvestType);
Positive Variable FixedMaintCost_NGChill  (years, months, NGChillTech);
Positive Variable FixedMaintCost          (years, months);

*2013/05/31. Lenaig calculated the present value of the fixed maintenance costs and considered them only during the lifetime of the installed technologies (see $ condition).
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation FixedMaintCost_DiscTech_Eq (years, months, Technologies);
     FixedMaintCost_DiscTech_Eq (years, months, AvailableTechnologies)..
     FixedMaintCost_DiscTech (years, months, AvailableTechnologies)
     =E=
     sum(years_counter $(years_counter.val le deropt(AvailableTechnologies,'lifetime')),

         DER_Investment (AvailableTECHNOLOGIES, years - (years_counter.val - 1))
         *deropt (AvailableTECHNOLOGIES, 'maxp')
         *deropt (AvailableTECHNOLOGIES, 'OMFix')
         /12
         *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
     );

*2013/05/31. Lenaig calculated the present value of fixed maintenance costs and considered them only during the lifetime of the installed technologies (see $ condition).
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation FixedMaintCost_ContTech_Eq (years, months, ContinuousInvestType);
     FixedMaintCost_ContTech_Eq (years, months, ContinuousInvestType)..
     FixedMaintCost_ContTech (years, months, ContinuousInvestType)
     =E=
     sum(years_counter $(years_counter.val le ContinuousInvestParameter(ContinuousInvestType,'lifetime')),

         ContinuousInvestParameter(ContinuousInvestType,'FixedMaintenance')
         *CapacityAddedInYearY(ContinuousInvestType, years - (years_counter.val - 1))
         *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
     );

*2013/05/31. Lenaig calculated the present value of fixed maintenance costs and considered them only during the lifetime of the installed technologies (see $ condition).
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation FixedMaintCost_NGChill_Eq (years, months, NGChillTech);
     FixedMaintCost_NGChill_Eq (years, months, NGChillTech)..
     FixedMaintCost_NGChill (years, months, NGChillTech)
     =E=
     sum(years_counter $(years_counter.val le NGChiller(NGChillTech,'lifetime')),

         NGChillPurchQuantity (NGChillTech, years - (years_counter.val - 1))
         *NGChiller (NGChillTech, 'maxp')
         *NGChiller (NGChillTech, 'OMFix')
         /12
         *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))

     );

*2013/05/31.  Lenaig. The total fixed maintenance cost is a present value as a sum of present values.
Equation FixedMaintCost_Eq(years, months);
     FixedMaintCost_Eq(years, months)..
     FixedMaintCost(years, months)
     =E=
     sum(AvailableTechnologies, FixedMaintCost_DiscTech(years, months, AvailableTechnologies))
     +
     sum(ContinuousInvestType, FixedMaintCost_ContTech (years, months, ContinuousInvestType))
     +
     sum(NGChillTech, FixedMaintCost_NGChill (years, months, NGChillTech))
     ;

*---------------- Variable Maintenance Costs  ------------------------------------------------------
*2013/03. Lenaig added a year index to all variables and equations in this section about variable maintenance costs.
Positive Variable VariableMaintCost_DiscTech (years, months, Technologies);
Positive Variable VariableMaintCost_ContTech (years, months, ContinuousInvestType);
Positive Variable VariableMaintCost_NGChill  (years, months, NGChillTech);
Positive Variable VariableMaintCost          (years, months);
Positive Variable NGChill_Level (NGChillTech, years, months, daytypes, hours);
Positive Variable NGChill_Amount(NGChillTech, years, months, daytypes, hours);

*2013/05/31. Lenaig calculated the present value of variable maintenance costs and considered them only during the lifetime of the installed technologies (see $ condition).
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation VariableMaintCost_DiscTech_Eq(years, months, Technologies);
     VariableMaintCost_DiscTech_Eq(years, months, AvailableTechnologies)..
     VariableMaintCost_DiscTech(years, months, AvailableTechnologies)
     =E=
     sum ((hours,daytypes),
            ( Generation_Use (AvailableTECHNOLOGIES, years, months, daytypes, hours)
              + Generation_Sell (AvailableTECHNOLOGIES, years, months, daytypes, hours)
            )* NumberOfDays (months, daytypes)
          )
     * Deropt (AvailableTECHNOLOGIES,'OMVar')
     *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
     $( (years.val - mod(years.val-1,deropt(AvailableTechnologies,'lifetime')))  le   deropt(AvailableTechnologies,'lifetime') )
     ;

*2013/06/06. Lenaig calculated the present value of variable maintenance costs and considered them only during the lifetime of the installed technologies (see $ condition).
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation VariableMaintCost_NGChill_Eq(years, months, NGChillTech);
     VariableMaintCost_NGChill_Eq(years, months, NGChillTech)..
     VariableMaintCost_NGChill(years, months, NGChillTech)
     =E=
     sum ((hours,daytypes),
            ( NGChill_Amount (NGChillTech, years, months, daytypes, hours)
              * NumberOfDays (months, daytypes)
             )
            * NGChiller (NGChillTech,'OMVar')
        )
    *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
     $( (years.val - mod(years.val-1,NGChiller(NGChillTech,'lifetime')))  le   NGChiller(NGChillTech,'lifetime') )
     ;

*************************************************************************************
*************************************************************************************
*TKKKK need a NGChill_Amount = NGChill_Level*NGChillPurchQuantity (NGChillTech)
*************************************************************************************
*************************************************************************************
* long term should have something similar to generator logic: at each timestep,
* turn on zero to max invest number.  For now, maybe just assume avg. effic?


*TK may want to change this later
Equation VariableMaintCost_ContTech_Eq (years, months, ContinuousInvestType);
     VariableMaintCost_ContTech_Eq (years, months, ContinuousInvestType)..
     VariableMaintCost_ContTech (years, months, ContinuousInvestType)
     =E=
     0
*2013/05/31. Lenaig calculated the present value of variable maintenance costs and considered them only during the lifetime of the installed technologies (see $ condition).
*     *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
*     $( (years.val - mod(years.val-1,ContinuousInvestParameter(ContinuousInvestType,'lifetime')))  le   ContinuousInvestParameter(ContinuousInvestType,'lifetime') )
     ;

*2013/05/31. Lenaig. The total variable maintenance cost is a present value as a sum of present values.
Equation VariableMaintCost_Eq(years, months);
     VariableMaintCost_Eq(years, months)..
     VariableMaintCost(years, months)
     =E=
     sum(AvailableTechnologies, VariableMaintCost_DiscTech(years, months, AvailableTechnologies))
     +
     sum(ContinuousInvestType, VariableMaintCost_ContTech (years, months, ContinuousInvestType))
     +
     sum(NGChillTech, VariableMaintCost_NGChill (years, months, NGChillTech))
     ;

*-----------------------  TOTAL DER COST  ---------------------------------------------
*2013/03. Lenaig added a year index to DERCost and defined DERTotalCost as a new variable.
Positive Variable DERCost(years)
                  DERTotalCost;

Equation DERCost_Eq(years);
     DERCost_Eq(years)..
     DERCost(years)
     =E=
     AnnualizedCapitalCost(years)
     + sum(months,FixedMaintCost(years,months) + VariableMaintCost(years,months));

Equation DERTotalCost_Eq;
     DERTotalCost_Eq..
     DERTotalCost
     =E=
     sum(years,DERCost(years));

* ---------------------------------------------
*2013/03. Lenaig added a year index to all variables and equations in this section about demand responses costs and calculated the present values of demand response costs.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
* Demand Response Costs

Positive Variable  DemandResponseCosts(years);
Equation DemandResponseCostsEq(years);
         DemandResponseCostsEq(years)..
         DemandResponseCosts(years)
         =E=
         sum((DemandResponseType,months,daytypes,hours),
               DemandResponse(DemandResponseType,years,months,daytypes,hours)* DemandResponseParameters (years,DemandResponseType,'VariableCost') * NumberOfDays (months, daytypes)
               + DemandResponseOnOff(DemandResponseType,years,months,daytypes,hours)* 0.000000001 * NumberOfDays (months, daytypes)
         )
        *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1));
* Please note that the 0.000000001 just link the  DemandResponseOnOff and DemandResponse decision variables

Positive Variable  DemandResponseCostsHeating(years);
Equation DemandResponseCostsHeatingEq(years);
         DemandResponseCostsHeatingEq(years)..
         DemandResponseCostsHeating(years) =E=
         sum((DemandResponseType,months,daytypes,hours),
               DemandResponseHeating(DemandResponseType,years,months,daytypes,hours)* DemandResponseParametersHeating (years,DemandResponseType,'VariableCost') * NumberOfDays (months, daytypes)
               + DemandResponseOnOffHeating(DemandResponseType,years,months,daytypes,hours)* 0.000000001 * NumberOfDays (months, daytypes)
         )
        *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1));
* Please note that the 0.000000001 just link the  DemandResponseOnOffHeating and DemandResponseHeating decision variables

*-------------------------------------------------------------------------------------
*-------------------------   ANNUAL TOTAL COST AND CO2  ---------------------------
*-------------------------------------------------------------------------------------
*2013/03. Lenaig added - a year index to all variables and equations in this section.
*                      - new variables (AllPeriodTotalCO2, AllPeriodTotalEnergyCosts) that are the sum of annual variables.
Variable AllPeriodTotalCO2
         TotalAnnualCO2 (years);

Equation AllPeriodTotalCO2_Eq;
         AllPeriodTotalCO2_Eq..
         AllPeriodTotalCO2
         =E=
         sum(years,TotalAnnualCO2(years));

Equation TotalAnnualCO2_Eq(years);
         TotalAnnualCO2_Eq(years)..
         TotalAnnualCO2(years)
         =E=
         sum(months,ElectricCO2(years,months) + CO2FromNG(years,months) + CO2fromEVsHomeCharging(years,months));

Variables AllPeriodTotalEnergyCosts
          TotalEnergyCosts (years)
          YearlyBatteryDegradationEVs (years)
*2013/05/31. Lenaig replaced PBI_INCENTIVE and created PBI_NPV(years).
          PBI_NPV(years);

*2014/08/19 José Include German subsidies

Equation AllPeriodTotalEnergyCosts_Eq;
         AllPeriodTotalEnergyCosts_Eq..
         AllPeriodTotalEnergyCosts
         =E=
         sum(years,TotalEnergyCosts(years));

*2013/05/31. Lenaig. 'TotalEnergyCosts(years)' is a present value as a sum of present values.

*2014/10/13 José fixed tariff component linearilization

Positive Variable Z(years) variable for linearization product of binary and continuous variables;
binary variable b(years)    variable ;
Equation lin_fixed1(years);
         lin_fixed1(years)..
         Z(years)  =l= b(years) *EnergyConsumed;
Equation lin_fixed2(years);
         lin_fixed2(years)..
         -sum((months, daytypes,hours),Electricity_Purchase(years,months, daytypes,hours))+ Z(years) =l= 0  ;
Equation lin_fixed3(years);
         lin_fixed3(years)..
         sum((months, daytypes,hours),Electricity_Purchase(years,months, daytypes,hours))- Z(years)+b(years)*EnergyConsumed
          =l= EnergyConsumed;
Equation fixedtarif(years);
         fixedtarif(years)..
         -Z(years)+ sum((months, daytypes,hours),Electricity_Purchase(years,months, daytypes,hours)) =l=0;


Equation TotalEnergyCosts_Eq(years);
         TotalEnergyCosts_Eq(years)..
         TotalEnergyCosts(years)
         =E=
*    Cost inferred due to YearlyBatteryDegradationEVs
         YearlyBatteryDegradation(years)
         +
* SB!!! Added the YearlyBatteryDegradation as per Jose Pablo's formulation
         YearlyBatteryDegradationEVs(years)
         +
         sum(months, ElectricTotalCost(years,months)+ NGTotalCost(years,months) )
         +
         DERCost(years) + DemandResponseCosts(years)  +  DemandResponseCostsHeating(years)
*2013/05/31. Lenaig modified the payment for the switch.
*2014/10/13   José add a fixed component in the total cost
         +Fixedcomp*Exchangerate*b(years)*Fixedtariff*(1+Taxes+Elect_tax)

         - SwitchSize * StaticSwitchParameter('Value') * SwitchPurchase(years-mod(years.val-1, StaticSwitchParameter('lifetime')))
         - AnnualElectricitySales(years)
         - PBI_NPV(years)
         ;

*2013/03. Lenaig modified MultiObjective equation to consider AllPeriodTotalEnergyCosts and AllPeriodTotalCO2 instead of AnnualTotalEnergyCosts and AnnualTotalCO2.
Variable MultiObjective;
Equation MultiObjective_Eq;
         MultiObjective_Eq..
         MultiObjective
         =E=  ParameterTable ('MultiObjectiveWCosts','ParameterValue')/ParameterTable ('MultiObjectiveMaxCosts','ParameterValue' )*AllPeriodTotalEnergyCosts
         + ParameterTable ('MultiObjectiveWCO2','ParameterValue')/ParameterTable ('MultiObjectiveMaxCO2','ParameterValue')* AllPeriodTotalCO2;

***************************************************************************************
*--------------------   OPERATING CONSTRAINTS   ---------------------------------------
***************************************************************************************
*2013/03. Lenaig added a year index to all variables and equations in this section about operating constraints.

Positive Variables
         CoolingByAbsorption(years,months,daytypes,hours)
         RefrigerationByAbsorption(years,months,daytypes,hours)
         SprintAmount(Technologies,years,months,daytypes,hours);

*2013/05/31. Lenaig added new constraints to set the number of generators running to zero if there is no new investment after the lifetime is reached.
DER_CurrentlyOperating.fx(AvailableTECHNOLOGIES, years, months, daytypes, hours)$((OptionsTable('RenewInvestments','OptionValue')eq 0) And(years.val gt deropt(AvailableTECHNOLOGIES,'lifetime')) ) = 0;
DER_CurrentlyOperating.fx(AvailableFCTechnologies,years,months,daytypes,hours)  $((OptionsTable('RenewInvestments','OptionValue')eq 0) And(years.val gt deropt(AvailableFCTechnologies,'lifetime')) ) = 0;
Generation_Use.fx        (AvailableTECHNOLOGIES,years,months,daytypes,hours)    $((OptionsTable('RenewInvestments','OptionValue')eq 0) And(years.val gt deropt(AvailableTECHNOLOGIES,'lifetime')) ) = 0;
Generation_Sell.fx       (AvailableTECHNOLOGIES,years,months,daytypes,hours)    $((OptionsTable('RenewInvestments','OptionValue')eq 0) And(years.val gt deropt(AvailableTECHNOLOGIES,'lifetime')) ) = 0;
SprintAmount.fx          (AvailableTECHNOLOGIES,years,months,daytypes,hours)    $((OptionsTable('RenewInvestments','OptionValue')eq 0) And(years.val gt deropt(AvailableTECHNOLOGIES,'lifetime')) ) = 0;
CoolingByAbsorption.fx      (years,months,daytypes,hours)$((OptionsTable('RenewInvestments','OptionValue')eq 0) And(years.val gt ContinuousInvestParameter('AbsChiller','lifetime')) ) = 0;
RefrigerationByAbsorption.fx(years,months,daytypes,hours)$((OptionsTable('RenewInvestments','OptionValue')eq 0) And(years.val gt ContinuousInvestParameter('Refrigeration','lifetime')) ) = 0;


* OPERATIONAL CONSTRAINTS
* MINIMUM AND MAXIMUM POWER CONSTRAINTS

*TK treat ng dg separately

*2013/05/31. Lenaig modified this equation to consider the latest investments thanks to the year-counter.
* Constraint: At each hour- # of gens running is between 0 and purchase number
Equation DER_CurrentlyOperatingEq (TECHNOLOGIES, years, months, daytypes, hours);
DER_CurrentlyOperatingEq (AvailableTECHNOLOGIES, years, months, daytypes, hours)..
         DER_CurrentlyOperating(AvailableTECHNOLOGIES,years,months,daytypes,hours)
         =L=
         sum(years_counter $(years_counter.val le deropt(AvailableTechnologies,'lifetime')),
             DER_Investment(AvailableTECHNOLOGIES,years - (years_counter.val-1))
         );

* Constraint: Total Generation >= DER_CurrentlyOperating*Capacity*MinCapacity
Equation DER_CurrentlyOperatingMinCapEq (TECHNOLOGIES,years,months,daytypes,hours);
DER_CurrentlyOperatingMinCapEq (AvailableTECHNOLOGIES,years,months,daytypes,hours)..
         Generation_Use(AvailableTECHNOLOGIES,years,months,daytypes,hours)
               + Generation_Sell(AvailableTECHNOLOGIES,years,months,daytypes,hours)
         =G=
         (   DER_CurrentlyOperating(AvailableTECHNOLOGIES,years,months,daytypes,hours)
             *deropt(AvailableTECHNOLOGIES,'maxp')
             *GenConstraints(AvailableTECHNOLOGIES,'MinLoad')
          )$(deropt(AvailableTECHNOLOGIES,'fuel') <> FuelValue('Solar'))
         ;

* Constraint: Total Generation <= DER_CurrentlyOperating*Capacity
* note PV is treated separately
Equation DER_CurrentlyOperatingMaxCapEq (TECHNOLOGIES,years,months,daytypes,hours);
         DER_CurrentlyOperatingMaxCapEq (AvailableTECHNOLOGIES,years,months,daytypes,hours)..
         Generation_Use(AvailableTECHNOLOGIES,years,months,daytypes,hours)
          + Generation_Sell(AvailableTECHNOLOGIES,years,months,daytypes,hours)
         =L=
         (DER_CurrentlyOperating(AvailableTECHNOLOGIES,years,months,daytypes,hours)*deropt(AvailableTECHNOLOGIES,'sprintcap'))
                 $(deropt(AvailableTECHNOLOGIES,'fuel') <> 1)
         ;

*2013/05/31. Lenaig modified this equation to consider the latest investments thanks to the year-counter.
* Constraint NGChill is less than installed capacity
* TK later can think about integer variable similar to DER_CurrentlyOperating
Equation NGChill_MaxCapacity_Eq (NGChillTech,years,months,daytypes,hours);
     NGChill_MaxCapacity_Eq (NGChillTech,years,months,daytypes,hours)..
     NGChill_Amount (NGChillTech,years,months,daytypes,hours)
     =L=
     sum(years_counter $(years_counter.val le NGChiller(NGChillTech,'lifetime')),
           NGChillPurchQuantity(NGChillTech,years -(years_counter.val-1) )*NGChiller(NGChillTech,'maxp'));

* Constraint: abs cooling limited by size of chiller
*2013/05/31. Lenaig modified this equation to consider the latest investments thanks to the year-counter.
Equation AbsorptionCoolingLimitEq(years,months,daytypes,hours);
     AbsorptionCoolingLimitEq(years,months,daytypes,hours)..
     CoolingByAbsorption(years,months,daytypes,hours)
     =L=
     sum(years_counter $(years_counter.val le ContinuousInvestParameter('AbsChiller','lifetime')),
           CapacityAddedInYearY('AbsChiller',years -(years_counter.val-1)));

* Constraint: abs refrigeration limited by size of chiller
*2013/05/31. Lenaig modified this equation to consider the latest investments thanks to the year-counter.
Equation  RefrigerationByAbsorptionEq(years,months,daytypes,hours);
      RefrigerationByAbsorptionEq(years,months,daytypes,hours)..
      RefrigerationByAbsorption(years,months,daytypes,hours)
      =L=
      sum(years_counter $(years_counter.val le ContinuousInvestParameter('Refrigeration','lifetime')),
           CapacityAddedInYearY('Refrigeration',years -(years_counter.val-1)));

*sprint cap constraints:
Equation SprintAmount_Eq(Technologies,years,months,daytypes,hours);
     SprintAmount_Eq(AvailableTechnologies,years,months,daytypes,hours)..
     SprintAmount(AvailableTechnologies,years,months,daytypes,hours)
     =G=
     (  ( Generation_Use(AvailableTECHNOLOGIES,years,months,daytypes,hours)
         + Generation_Sell(AvailableTECHNOLOGIES,years,months,daytypes,hours)
        )
        -
        ( deropt(AvailableTECHNOLOGIES,'maxp')
          * DER_CurrentlyOperating(AvailableTECHNOLOGIES,years,months,daytypes,hours)
        )
     );

*2013/05/31. Lenaig modified this equation to consider all the latest investments thanks to the year-counter.
*CONSTRAINT: sprinting is limited to the [sprint capacity] * [sprint hours] * [number of units purchased]
Equation SprintLimit_Eq (Technologies,years);
     SprintLimit_Eq (AvailableTechnologies,years)..
     sum ((months,daytypes,hours),
                SprintAmount (AvailableTechnologies,years,months,daytypes,hours)
                *
                NumberOfDays(months,daytypes)
         )
     =L=
     sum(years_counter $(years_counter.val le deropt(AvailableTechnologies,'lifetime')),
                 ( deropt(AvailableTECHNOLOGIES,'SprintCap')
                   - deropt(AvailableTECHNOLOGIES,'maxp') )
                 *deropt(AvailableTECHNOLOGIES,'SprintHours')
                 *DER_Investment(AvailableTECHNOLOGIES,years -(years_counter.val-1))
     );

*MG Add a possibility to turn the FC constraint on and off via an option within the OptionsTable
Parameter FuelCellOperatesWholeDay;
FuelCellOperatesWholeDay = 0$(OptionsTable('FuelCellConstraint', 'OptionValue') eq 0) + 1$(OptionsTable('FuelCellConstraint', 'OptionValue') eq 1);

*GC Added new Operating Constraint specific for Markus, to deal with the fuel cell startup and shutdown times
Equation FuelCellRunsWholeDay_Eq(TECHNOLOGIES,years,months,daytypes,hours);
FuelCellRunsWholeDay_Eq(AvailableFCTechnologies,years,months,daytypes,hours)..
         DER_CurrentlyOperating(AvailableFCTechnologies,years,months,daytypes,hours)
         *FuelCellOperatesWholeDay
         =e=
         DER_CurrentlyOperating(AvailableFCTechnologies,years,months,daytypes,hours--1)
         *FuelCellOperatesWholeDay
         ;


Variable MicrogridBenefit(years);

Positive Variable Daysinthisyear(years);
Equations Daysinthisyear_Eq(years);
          Daysinthisyear_Eq(years)..
          Daysinthisyear(years)
          =E=
          sum( (months),
                 sum (   (daytypes), numberofdays(months,daytypes)));

*All measured in $
*2013/06/06. Lenaig calculated the present value of 'MicrogridBenefit'. 'TotalEnergyCosts(years)' is already a present value.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation MicrogridBenefit_Eq(years);
         MicrogridBenefit_Eq(years)..
         MicrogridBenefit(years)
         =E=
         Electricity_Exchange_EV('Reference_Cost') * (1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))   - TotalEnergyCosts(years);

*#############EV Battery Degradation###############


* EnergyprocessedEVs-Equations normalize the processed energy (input and output)
* to the initial capacity chosen
* Optimization can be performed because the yearly total cost calculation
* cuts out the capacity!
* OLIVIER : no normalization any more (removed by Ilan), comment not accurate...

Positive Variables
         EnergyprocessedEVsHourly(years,months,daytypes,hours)
         EnergyprocessedEVsMonthly(years,months)
         EnergyprocessedEVsYearly(years);

Equation EnergyprocessedEVsHourly_Eq(years,months,daytypes,hours);
     EnergyprocessedEVsHourly_Eq(years,months,daytypes,hours)..
     EnergyprocessedEVsHourly(years,months,daytypes,hours)
*measured in kWh
     =E=
     (Electricity_FromEVs(years,months,daytypes,hours)
       + ElectricityForStorageEVs(years,months,daytypes,hours))
     *BinaryEVsConnectionTable(years,months,daytypes,hours)
*measured in kWh
     ;

Equation EnergyprocessedEVsMonthly_Eq(years,months);
    EnergyprocessedEVsMonthly_Eq(years,months)..
    EnergyprocessedEVsMonthly(years,months)
*measured in kWh
    =E=
    sum ((daytypes), numberofdays(months,daytypes) *
    sum ((hours), EnergyprocessedEVsHourly(years,months,daytypes,hours)));

Equation EnergyprocessedEVsYearly_Eq(years);
    EnergyprocessedEVsYearly_Eq(years)..
    EnergyprocessedEVsYearly(years)
*measured in kWh
    =E=
    sum(months, EnergyprocessedEVsMonthly(years,months));

*The degradation function

*2013/05/31. Lenaig calculated the present value of 'YearlyBatteryDegradationEVs'.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation YearlyBatteryDegradationEVs_Eq(years);
    YearlyBatteryDegradationEVs_Eq(years)..
    YearlyBatteryDegradationEVs(years)
    =E=
    EnergyprocessedEVsYearly(years)*
*measured in kWh
    Electricity_Exchange_EV('Capacity_Loss_per_Normalized_Wh')
*dimensionless, w/o unit []
    *Electricity_Exchange_EV('Future_Replacement_Cost')
    *5
*OLIVIER : the 5 at the end is because 20% degradation is equivalent to a worthless battery (c.f. master thesis)
*measured in $/kWh
*
    *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))

***old
*    *ContinuousVariableForcedInvest ('EVs1','ForcedInvestCapacity')
*    *Capacity('EVs1')
*     *100000
;

*2013/05/31. Lenaig added a year index.
Variable EV_connection_payment(years);

Equation EV_connection_payment_Eq(years);
     EV_connection_payment_Eq(years)..
     EV_connection_payment(years)
     =E=
     (ContinuousInvestParameter('EVs1','VariableCost')
*     measured in $/kWh
*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
      *TotalCapacityInYearY('EVs1',years))
*     measured in kWh
      *ContinuousInvestParameter('EVs1','Lifetime')
*     measured in years
*Olivier : not clear why we have to multiply by the lifetime…
*
*2013/05/31. Lenaig calculated the present value of 'EV_connection_payment'.
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
      *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1));

scalar j;
scalar DurationHomeCharge;
DurationHomeCharge = ElectricityStorageEVParameter('EndHomeCharge') + 25 -ElectricityStorageEVParameter('BeginingHomeCharge');

scalar SelfDischargeSummation;
SelfDischargeSummation = 0;

for  ( j = 1 to DurationHomeCharge by 1,
         SelfDischargeSummation = SelfDischargeSummation + (1-ElectricityStorageEVParameter('SelfDischarge'))**(j-1););

Equation EVsElectricityFromHome_without_eff_Eq(years,months,daytypes);
         EVsElectricityFromHome_without_eff_Eq(years,months,daytypes)..
         EVsElectricityFromHome_without_eff(years,months,daytypes)
         =E=
         (
         sum((hours)$(ord(hours)=ElectricityStorageEVParameter('ConnectingHourOffice')), ElectricityStoredEVs(years,months,daytypes,hours))/(1-ElectricityStorageEVParameter('SelfDischarge'))**(ElectricityStorageEVParameter('ConnectingHourOffice')-ElectricityStorageEVParameter('EndHomeCharge'))-
         sum((hours)$(ord(hours)=(ElectricityStorageEVParameter('DisconnectHourOffice')-1)), ElectricityStoredEVs(years,months,daytypes,hours))*(1-ElectricityStorageEVParameter('SelfDischarge'))**(ElectricityStorageEVParameter('EndHomeCharge')+25-ElectricityStorageEVParameter('DisconnectHourOffice'))
         )     /    SelfDischargeSummation;
*the conditionnal sums are used to get the SOCs at connecting and disconnecting hours (in each sum, there's only one non-zero term)

*it should be divided by efficiencycharge if home electricity is used to charge EVs, or multiplicated by efficiencydischarge if batteries from EVs are used to displace home electricity!!!
*this what is done below

Variables        EHToCar(years,months,daytypes)
                 EHToHome(years,months,daytypes);
* EHToCar : electricity from home to car
* EHToHouse : electricity from car to home

Equation  EHToCar_Eq1(years,months,daytypes);
          EHToCar_Eq1(years,months,daytypes)..
          EHToCar(years,months,daytypes) =G= 0;

Equation  EHToHome_Eq1(years,months,daytypes);
          EHToHome_Eq1(years,months,daytypes)..
          EHToHome(years,months,daytypes) =L= 0;

binary variable HomeChargeOrDischarge(years,months,daytypes);
* 1 for charge at home, 0 for discharge
*1 when EHToCar (and also EVsElectricityFromHome_without_eff) > 0, 0 when EHToHome (and also EVsElectricityFromHome_without_eff) < 0

Equation EHToCar_Eq2(years,months,daytypes);
         EHToCar_Eq2(years,months,daytypes)..
         EHToCar(years,months,daytypes) =L= HomeChargeOrDischarge(years,months,daytypes) *10000000;

Equation EHToHome_Eq2(years,months,daytypes);
         EHToHome_Eq2(years,months,daytypes)..
         EHToHome(years,months,daytypes) =G= (HomeChargeOrDischarge(years,months,daytypes)-1) *10000000;
*these 2 equations above ensure that either EHToCar or EHToHome is equal to 0

Equation EVsElectricityFromHome_without_eff_Eq2(years,months,daytypes);
         EVsElectricityFromHome_without_eff_Eq2(years,months,daytypes)..
         EVsElectricityFromHome_without_eff(years,months,daytypes) =E= EHToCar(years,months,daytypes) + EHToHome(years,months,daytypes);
*left term can be positive or negative, one of the right terms is always 0, the other is therefore equal to the left term

Equation EVsElectricityFromHome_Eq(years,months,daytypes);
         EVsElectricityFromHome_Eq(years,months,daytypes)..
         EVsElectricityFromHome(years,months,daytypes) =E=
         EHToCar(years,months,daytypes)/ElectricityStorageEVParameter('EfficiencyCharge')  +  EHToHome(years,months,daytypes) * ElectricityStorageEVParameter('EfficiencyDischarge');
*residential electricity consumed overnight (if positive),
*residential electricity displaced overnight (if negative),

Equation CO2fromEVsHomeCharging_Eq(years,months);
         CO2fromEVsHomeCharging_Eq(years,months)..
         CO2fromEVsHomeCharging(years,months)
         =E= sum((daytypes,hours), EVsElectricityFromHome(years,months,daytypes)* NightlyMarginalCO2EmissionsResidential(years,months,hours)*NumberOfDays(months, daytypes));
*OLIVIER : TO BE CHECKED
*units should be checked! kWh and kgCO2, is it okay?


***********************************************************
*******   ENERGY BALANCE CONSTRAINTS  *********************
***********************************************************
*2013/03. Lenaig added a year index to all variables and equations in this section about energy balance constraints.

**** electricity balance, top level equations **************
*TK Note the cicular lag (--) usage.  this means that for each daytype,
*charge at beginning of day = charge at end of day
*this is fair because regardless of what level you start at, you can't gain
*this will not reflect charging on weekdays to provide for peak days
*nor will it reflect chraging on weekends to provide for weekdays
*some analysis should be done to see how significant this ommission is

*SB!!! Moved many of the storage variables up top to fix under certain circumstances. This includes storage input and output and some others.
*Sb!!! Added the capability to turn on or off battery regulation (can consider this to be an aggregation variable as well)
CapacityBidRegulationUpBattery.fx(years, months, daytypes, hours)$(OptionsTable('Regulation_FromStorage','OptionValue') eq 0) = 0;
CapacityBidRegulationDownBattery.fx(years, months, daytypes, hours)$(OptionsTable('Regulation_FromStorage','OptionValue') eq 0) = 0;

Equation ElectricityStoredStationaryEq (years,months,daytypes,hours);
     ElectricityStoredStationaryEq(years,months,daytypes,hours)..
     ElectricityStoredStationary(years,months,daytypes,hours)
     =E=
     ElectricityStoredStationary(years,months,daytypes,hours--1)
     +
     ElectricityStorageStationaryInput(years,months,daytypes,hours)
     -
     ElectricityStorageStationaryOutput(years,months,daytypes,hours)
     -
     ElectricityStorageStationaryLosses(years,months,daytypes,hours)
     ;
*Equation CapacityBidRegulationUpBatteryEq2 (years,months,daytypes,hours);
*     CapacityBidRegulationUpBatteryEq2 (years,months,daytypes,hours)..
*     CapacityBidRegulationUpBattery (years,months,daytypes,hours)
*     =L=
*          ContractCapacity(years,months) +
*     Electricity_Purchase (years,months,daytypes,hours);
*         SB!!! removed CapacityBidRegulationUpBatteryEq2, as CapacityBidRegulationUpBatteryEq should be satisfactory. Eq2 was accounting for purchases and contract capacity,
*    but this should be accounted for in the ElectricityStored (e.g. this parameter is determined by how much you put in, which is a fn of production/ purchases)

Equation CapacityBidRegulationUpBatteryEq (years,months,daytypes,hours);
     CapacityBidRegulationUpBatteryEq (years,months,daytypes,hours)..
     CapacityBidRegulationUpBattery (years,months,daytypes,hours)
     =L=
     (ElectricityStoredStationary (years,months,daytypes,hours)
     -
     ElectricityStorageStationaryCapacity (years,months)
     *
     (1-ElectricityStorageStationaryParameter('MaxDepthOfDischarge')))
     *
     ElectricityStorageStationaryParameter('MaxDischargeRate')
     ;
* SB!!! Thinks we should get rid of EnergyFlowFrom... as this is accounted for in ElectricityStored...

Equation CapacityBidRegulationDownBatteryEq (years,months,daytypes,hours);
     CapacityBidRegulationDownBatteryEq (years,months,daytypes,hours)..
     CapacityBidRegulationDownBattery (years,months,daytypes,hours)
     =L=
     (ElectricityStorageStationaryCapacity (years,months)
     -
     ElectricityStoredStationary (years,months,daytypes,hours))
     *
     ElectricityStorageStationaryParameter('MaxChargeRate')
     ;
*     -
*     EnergyFlowFromBuildingToStationaryStorage (years,months,daytypes,hours);
* SB!!! Believes that we should be delete this "EnergyFlowFrom...", as this is accounted for in the "ElectricityStoredStationary" component (e.g. this has the input and output in it)
Equation EnergyFlowFromBatteryToISOEq (years,months,daytypes,hours);
     EnergyFlowFromBatteryToISOEq (years,months,daytypes,hours)..
     EnergyFlowFromBatteryToISO (years,months,daytypes,hours)
     =E=
     CapacityBidRegulationUpBattery (years,months,daytypes,hours)
     *
     DispatchToContractRatio;

Equation EnergyFlowFromISOToBatteryEq (years,months,daytypes,hours);
     EnergyFlowFromISOToBatteryEq (years,months,daytypes,hours)..
     EnergyFlowFromISOToBattery (years,months,daytypes,hours)
     =E=
     CapacityBidRegulationDownBattery (years,months,daytypes,hours)
     *
     DispatchToContractRatio;
$ontext
*----------------------------------------------------------------------------------------------------------------JOSE Pablo Regulation Formulation
Equation CapacityBidRegulationUpBatteryEq (years,months,daytypes,hours);
     CapacityBidRegulationUpBatteryEq (years,months,daytypes,hours)..
     CapacityBidRegulationUpBattery (years,months,daytypes,hours)
     =L=
     (ElectricityStoredStationary (years,months,daytypes,hours)
     -
     ElectricityStorageStationaryCapacity (years,months)
     *
     (1-ElectricityStorageStationaryParameter('MaxDepthOfDischarge'))
     )
     -
     EnergyFlowFromStationaryStorageToBuilding (years,months,daytypes,hours);
Equation CapacityBidRegulationDownBatteryEq (years,months,daytypes,hours);
     CapacityBidRegulationDownBatteryEq (years,months,daytypes,hours)..
     CapacityBidRegulationDownBattery (years,months,daytypes,hours)
     =L=
     (ElectricityStorageStationaryCapacity (years,months)
     -
     ElectricityStoredStationary (years,months,daytypes,hours))
     -
     EnergyFlowFromBuildingToStationaryStorage (years,months,daytypes,hours);
Equation EnergyFlowFromBatteryToISOEq (years,months,daytypes,hours);
     EnergyFlowFromBatteryToISOEq (years,months,daytypes,hours)..
     EnergyFlowFromBatteryToISO (years,months,daytypes,hours)
     =E=
     CapacityBidRegulationUpBattery (years,months,daytypes,hours)
     *
     DispatchToContractRatio;

Equation EnergyFlowFromISOToBatteryEq (years,months,daytypes,hours);
     EnergyFlowFromISOToBatteryEq (years,months,daytypes,hours)..
     EnergyFlowFromISOToBattery (years,months,daytypes,hours)
     =E=
     CapacityBidRegulationDownBattery (years,months,daytypes,hours)
     *
     DispatchToContractRatio;
$offtext
*---------------------------------------------------------------------------------------------------------------End Jose Pablo regulation formulation
Equation Electricity_FromStationaryBatteryEq2 (years,months,daytypes,hours);
     Electricity_FromStationaryBatteryEq2 (years,months,daytypes,hours)..
     Electricity_FromStationaryBattery_Export (years,months,daytypes,hours)
     +
     Electricity_FromStationaryBattery_Onsite (years,months,daytypes,hours)
     =E=
     EnergyFlowFromStationaryStorageToBuilding (years,months,daytypes,hours)
     +
     EnergyFlowFromBatteryToISO (years,months,daytypes,hours)
     ;

Equation ElectricityForStorageStationaryEq (years,months,daytypes,hours);
     ElectricityForStorageStationaryEq (years,months,daytypes,hours)..
     ElectricityForStorageStationary (years,months,daytypes,hours)
     =E=
     EnergyFlowFromBuildingToStationaryStorage (years,months,daytypes,hours)
     +
     EnergyFlowFromISOToBattery (years,months,daytypes,hours)
     ;

Equation FlowBatteryStoredEq (years,months,daytypes,hours);
     FlowBatteryStoredEq(years,months,daytypes,hours)..
     FlowBatteryStored(years,months,daytypes,hours)
     =E=
     FlowBatteryStored(years,months,daytypes,hours--1)
     +
     FlowBatteryInput(years,months,daytypes,hours)
     -
     FlowBatteryOutput(years,months,daytypes,hours)
     -
     FlowBatteryLosses(years,months,daytypes,hours)
     ;


Parameters ElectricityOnlyLoad(years,months,daytypes,hours);
     ElectricityOnlyLoad(years,months,daytypes,hours) = Load(years,'electricity-only',months,daytypes,hours);

Positive Variables
     ElectricityConsumed(years,months,daytypes,hours)
     ElectricityForCooling(years,months,daytypes,hours)
     ElectricityForRefrigeration (years,months,daytypes,hours)
     ElectricityForFlowBattery(years,months,daytypes,hours)
     ElectricityForHeatPumps(years,months,daytypes,hours)
         ElectricityForWaterHeating(years,months,daytypes,hours)
     ;
*SB!!! Moved ElectricityForStorageStationary according to Jose Pablo's formulation

ElectricityForCooling.up(years,months, daytypes, hours)$(OptionsTable('CentralChiller', 'OptionValue') eq 0) = 0;
ElectricityForWaterHeating.fx(years,months, daytypes, hours)$(OptionsTable('No_HP_Elec_WH', 'OptionValue') eq 1) = load(years,'Water-heating', months, daytypes, hours);

*SB!!! Added the electricitforwaterheating variable to allow non-heat pump electric water heaters

Equation ElectricityConsumedEq (years,months,daytypes,hours);
     ElectricityConsumedEq (years,months,daytypes,hours)..
     ElectricityConsumed(years,months,daytypes,hours)
     =E=
     ElectricityOnlyLoad(years,months,daytypes,hours)
     +
     ElectricityForCooling(years,months,daytypes,hours)
         +
         ElectricityForWaterHeating(years,months,daytypes,hours)
     +
     ElectricityForRefrigeration (years,months,daytypes,hours)
     +
     ElectricityForStorageStationary(years,months,daytypes,hours)
*     EnergyFlowFromBuildingToStationaryStorage(years,months,daytypes,hours)
* 2015/01/21 Dani changed ElectricityForStorageStationary to EnergyFlowFromBuildingToStationaryStorage
     +
     BinaryEVsConnectionTable(years,months,daytypes,hours)
     *
     ElectricityForStorageEVs(years,months,daytypes,hours)
     +
     ElectricityForFlowBattery(years,months,daytypes,hours)
     +
     ElectricityForHeatPumps(years,months,daytypes,hours)
     -
     LoadReduction(years,months,daytypes,hours)
     +
     LoadIncrease(years,months,daytypes,hours)
     -
     sum(DemandResponseType,DemandResponse(DemandResponseType,years,months,daytypes,hours))
     ;

Equation ElectricSalesEq (years,months,daytypes,hours);
     ElectricSalesEq (years,months,daytypes,hours)..
     ElectricSales(years,months,daytypes,hours)
     =E=
     Electricity_PV_Export(years,months,daytypes,hours)
     +
     Electricity_FromStationaryBattery_Export(years,months,daytypes,hours)
     +
     sum(AvailableTECHNOLOGIES,Generation_Sell(AvailableTECHNOLOGIES, years, months, daytypes, hours));

Equation ElectricityBalanceEq (years,months,daytypes,hours);
     ElectricityBalanceEq(years,months,daytypes,hours)..
     ElectricityProvided(years,months,daytypes,hours)
     =E=
     ElectricityConsumed(years,months,daytypes,hours) +  ElectricSales(years,months,daytypes,hours);


**** electricity balance, lower-level equations **************

* note this assumes pv is not part of the technologies set
Equation  Electricity_GenerationEq(years,months,daytypes,hours);
     Electricity_GenerationEq(years,months,daytypes,hours)..
     Electricity_Generation(years,months,daytypes,hours)
     =E=
     sum (AvailableTECHNOLOGIES,
           Generation_Use(AvailableTECHNOLOGIES, years, months, daytypes, hours)
           +
           Generation_Sell(AvailableTECHNOLOGIES, years, months, daytypes, hours)
         )
         ;

* note this assumes pv is not part of the technologies set
Equation  Electricity_Generation_TechnologyEq(TECHNOLOGIES,years,months,daytypes,hours);
     Electricity_Generation_TechnologyEq(TECHNOLOGIES,years,months,daytypes,hours)..
     Electricity_Generation_Technology(TECHNOLOGIES,years,months,daytypes,hours)
     =E=
     Generation_Use(TECHNOLOGIES,years,months,daytypes,hours)
     +
     Generation_Sell(TECHNOLOGIES,years,months,daytypes,hours)
     ;

*note the 'less than' instead of 'equals' incase PV is greater than load
Equation Electricity_PhotovoltaicsEq(years,months,daytypes,hours);
     Electricity_PhotovoltaicsEq(years,months,daytypes,hours)..
     Electricity_Photovoltaics(years,months,daytypes,hours)
     =E=
     Electricity_PV_Export(years,months,daytypes,hours) + Electricity_PV_Onsite(years,months,daytypes,hours);

Equation OnsiteGenerationConstraint_Eq(years, months,daytypes, hours);
         OnsiteGenerationConstraint_Eq(years, months,daytypes, hours)..
         Electricity_PV_Onsite(years,months,daytypes,hours)
         +
         Electricity_FromStationaryBattery_Onsite(years,months,daytypes,hours)
         =L=
         TotalELoad (years,months,daytypes,hours);

*Sb!!! Added onsight generation constraints. could explore BTM and infront of the meter issues - especially with regulation
*SB!!! Also note that onsitegeneration parameter ignores CHP. This was done for case study with battery and pv purposes. Should be corrected later.
* For PV capacity constraint see PV modeling section

*------------------------------------------------------
*2013/02/22. Lenaig added a new variable and a new equation to represent battery degradation.
*            'ElectricityStorageStationaryCapacity' refers to the available capacity for stationary storage.
*            = initial capacity - constant value (constant fraction of initial capacity) that is lost every month.
*2013/05/31. About reinvestment, Lenaig considered the installed energy capacity from the latest investments,
*            and added a condition to set the available battery capacity to zero at the end of the lifetime if no new investments.
Equation ElectricityStorageStationaryCapacityEq(years,months);
     ElectricityStorageStationaryCapacityEq(years,months)..
     ElectricityStorageStationaryCapacity(years,months)
     =E=
     sum(years_counter $(years_counter.val <= ContinuousInvestParameter('ElectricStorage','lifetime')),
           CapacityAddedInYearY('ElectricStorage',years - (years_counter.val-1))
           *(1 - (12*(years_counter.val-1) + ord(months)-1)
           *ElectricityStorageStationaryParameter('BatteryDegradation'))
     );
*Equation ElectricityStorageSizeConstraint_Eq;
*     ElectricityStorageSizeConstraint_Eq..
*     sum(years, CapacityAddedInYearY('ElectricStorage',years)) =l= ElectricityStorageStationaryParameter('MaximumSize');
*SB!! Added this to prevent effectively limitless storage. It is redundant with the capacity charge equation, but ONLY if you include a capacity charge. Remove for commercial buildings
*2013/09/06. Lenaig. Not sure.
*     $( (years.val - mod(years.val-1,ContinuousInvestParameter('ElectricStorage','lifetime'))) le ContinuousInvestParameter('ElectricStorage','lifetime') );

Equation ElectricityStorageStationaryInputEq(years,months,daytypes,hours);
     ElectricityStorageStationaryInputEq(years,months,daytypes,hours)..
     ElectricityStorageStationaryInput(years,months,daytypes,hours)
     =E=
     ElectricityForStorageStationary(years,months,daytypes,hours)
     *ElectricityStorageStationaryParameter('EfficiencyCharge');

Equation FlowBatteryInputEq(years,months,daytypes,hours);
     FlowBatteryInputEq(years,months,daytypes,hours)..
     FlowBatteryInput(years,months,daytypes,hours)
     =E=
     ElectricityForFlowBattery(years,months,daytypes,hours)
     *FlowBatteryParameter('EfficiencyCharge');

Equation Electricity_FromStationaryBatteryEq(years,months,daytypes,hours);
     Electricity_FromStationaryBatteryEq(years,months,daytypes,hours)..
     Electricity_FromStationaryBattery_Onsite(years,months,daytypes,hours)
     +
     Electricity_FromStationaryBattery_Export(years,months,daytypes,hours)
     =E=
     ElectricityStorageStationaryOutput(years,months,daytypes,hours)
     *ElectricityStorageStationaryParameter('EfficiencyDischarge');

Equation Electricity_FromFlowBatteryEq(years,months,daytypes,hours);
     Electricity_FromFlowBatteryEq(years,months,daytypes,hours)..
     Electricity_FromFlowBattery(years,months,daytypes,hours)
     =E=
     FlowBatteryOutput(years,months,daytypes,hours)
     *FlowBatteryParameter('EfficiencyDischarge');

*TK for now make this a fraction of stored electricity
Equation ElectricityStorageStationaryLossesEq(years,months,daytypes,hours);
     ElectricityStorageStationaryLossesEq(years,months,daytypes,hours)..
     ElectricityStorageStationaryLosses(years,months,daytypes,hours)
     =E=
     ElectricityStoredStationary(years,months,daytypes,hours--1)
     *ElectricityStorageStationaryParameter('SelfDischarge');

*TK for now make this a fraction of stored electricity
Equation FlowBatteryLossesEq(years,months,daytypes,hours);
     FlowBatteryLossesEq(years,months,daytypes,hours)..
     FlowBatteryLosses(years,months,daytypes,hours)
     =E=
     FlowBatteryStored(years,months,daytypes,hours--1)
     *(FlowBatteryParameter('SelfDischarge'));

****** electricity stationary storage performance constraints  ***********

*2013/02/22. Lenaig replaced the initial capacity        ( Capacity('ElectricStorage') )
*            by the available capacity after degradation ( ElectricityStorageStationaryCapacity(years,months) )
*            in the charging rate constraint equation.
Equation ElectStorageStationaryChargingRateEq(years,months,daytypes,hours);
     ElectStorageStationaryChargingRateEq(years,months,daytypes,hours)..
     ElectricityStorageStationaryInput(years,months,daytypes,hours)
     =L= ElectricityStorageStationaryCapacity(years,months) * ElectricityStorageStationaryParameter('MaxChargeRate');

*2013/02/22. Lenaig replaced the initial capacity        ( Capacity('ElectricStorage') )
*            by the available capacity after degradation ( ElectricityStorageStationaryCapacity(years,months) )
*            in the discharging rate constraint equation.
Equation ElectStorageStationaryDischargingRateEq(years,months,daytypes,hours);
     ElectStorageStationaryDischargingRateEq(years,months,daytypes,hours)..
     ElectricityStorageStationaryOutput(years,months,daytypes,hours)
     =L= ElectricityStorageStationaryCapacity(years,months) * ElectricityStorageStationaryParameter('MaxDischargeRate');

*2013/02/22. Lenaig replaced the initial capacity        ( Capacity('ElectricStorage') )
*            by the available capacity after degradation ( ElectricityStorageStationaryCapacity(years,months) )
*            in the storage constraint equation.
Equation ElectricityStorageStationaryConstraintEq(years,months,daytypes,hours);
     ElectricityStorageStationaryConstraintEq(years,months,daytypes,hours)..
     ElectricityStoredStationary(years,months,daytypes,hours)
     =L=
     ElectricityStorageStationaryCapacity(years,months);

*2013/02/22. Lenaig replaced the initial capacity        ( Capacity('ElectricStorage') )
*            by the available capacity after degradation ( ElectricityStorageStationaryCapacity(years,months) )
*            in the constraint equation about depth of discharge.
Equation ElectricityStorageStationaryConstraint2Eq(years,months,daytypes,hours);
     ElectricityStorageStationaryConstraint2Eq(years,months,daytypes,hours)..
     ElectricityStoredStationary(years,months,daytypes,hours)
     =G=
     ElectricityStorageStationaryCapacity(years,months)*(1-ElectricityStorageStationaryParameter('MaxDepthOfDischarge'));

* make sure that charging and discharging does not happen at the same time
Binary variable ElecStationaryXORCharge(years,months,daytypes,hours);
Equation ElecStationaryChargingEq(years,months,daytypes,hours);
     ElecStationaryChargingEq(years,months,daytypes,hours)..
     ElectricityStorageStationaryInput(years,months,daytypes,hours)
     =L=
     ElecStationaryXORCharge(years,months,daytypes,hours)*1000000;


Equation ElecStationaryDischargingEq(years,months,daytypes,hours);
     ElecStationaryDischargingEq(years,months,daytypes,hours)..
     ElectricityStorageStationaryOutput(years,months,daytypes,hours)
     =L=
     (1-ElecStationaryXORCharge(years,months,daytypes,hours))*1000000;

****** flow battery storage performance constraints  ***********

*2013/03. Lenaig added a year index to all equations in this section about flow batteries.


*TK for now make this proportional to room left to charge
*TK need to discuss with David MacMillan or other on actual charging patterns

*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
*TK note flow battery is modeled differently than regular battery to avoid non-linear constraint
Equation FlowBatteryChargingRateEq(years,months,daytypes,hours);
     FlowBatteryChargingRateEq(years,months,daytypes,hours)..
     FlowBatteryInput(years,months,daytypes,hours)
     =L=
     TotalCapacityInYearY('FlowBatteryPower',years);

*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
Equation FlowBatteryDischargingRateEq(years,months,daytypes,hours);
     FlowBatteryDischargingRateEq(years,months,daytypes,hours)..
     FlowBatteryOutput(years,months,daytypes,hours)
     =L=
     TotalCapacityInYearY('FlowBatteryPower',years);

*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
Equation FlowBatteryStorageConstraintEq(years,months,daytypes,hours);
     FlowBatteryStorageConstraintEq(years,months,daytypes,hours)..
     FlowBatteryStored(years,months,daytypes,hours)
     =L=
     TotalCapacityInYearY('FlowBatteryEnergy',years);

*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
Equation FlowBatteryStorageConstraint2Eq(years,months,daytypes,hours);
     FlowBatteryStorageConstraint2Eq(years,months,daytypes,hours)..
     FlowBatteryStored(years,months,daytypes,hours)
     =G=
     TotalCapacityInYearY('FlowBatteryEnergy',years)*(1-FlowBatteryParameter('MaxDepthOfDischarge'));

* make sure that charging and discharging does not happen at the same time
Binary variable FlowBatteryXORCharge(years,months,daytypes,hours);
Equation FlowBatteryChargingEq(years,months,daytypes,hours);
     FlowBatteryChargingEq(years,months,daytypes,hours)..
     FlowBatteryInput(years,months,daytypes,hours)
     =L=
     FlowBatteryXORCharge(years,months,daytypes,hours)*1000000;

Equation FlowBatteryDischargingEq(years,months,daytypes,hours);
     FlowBatteryDischargingEq(years,months,daytypes,hours)..
     FlowBatteryOutput(years,months,daytypes,hours)
     =L=
     (1-FlowBatteryXORCharge(years,months,daytypes,hours))*1000000;

****** Heat Pump Electricity Balance Equations ********
*2013/03. Lenaig added a year index to all equations in this section about heat pumps.

Positive Variables
     ElectricityForASHeatPump(years,months,daytypes,hours)
     ElectricityForGSHeatPump(years,months,daytypes,hours)
     ;

*2013/05/31. Lenaig added lifetime constraints to heat pumps, fixed variables to zero.
HeatingFromASHeatPump.fx(years,MONTHS,DAYTYPES,HOURS)$((OptionsTable('RenewInvestments','OptionValue')eq 0) And(years.val gt ContinuousInvestParameter('AirSourceHeatPump','lifetime')) ) = 0;
CoolingFromASHeatPump.fx(years,MONTHS,DAYTYPES,HOURS)$((OptionsTable('RenewInvestments','OptionValue')eq 0) And(years.val gt ContinuousInvestParameter('AirSourceHeatPump','lifetime')) ) = 0;
HeatingFromGSHeatPump.fx(years,MONTHS,DAYTYPES,HOURS)$((OptionsTable('RenewInvestments','OptionValue')eq 0) And(years.val gt ContinuousInvestParameter('GroundSourceHeatPump','lifetime')) ) = 0;
CoolingFromGSHeatPump.fx(years,MONTHS,DAYTYPES,HOURS)$((OptionsTable('RenewInvestments','OptionValue')eq 0) And(years.val gt ContinuousInvestParameter('GroundSourceHeatPump','lifetime')) ) = 0;

Equation ElectricityForHeatPumps_Eq(years,months,daytypes,hours);
     ElectricityForHeatPumps_Eq(years,months,daytypes,hours)..
     ElectricityForHeatPumps(years,months,daytypes,hours)
     =E=
     ElectricityForASHeatPump(years,months,daytypes,hours)
     +
     ElectricityForGSHeatPump(years,months,daytypes,hours);

Equation ElectricityForASHeatPump_Eq(years,months,daytypes,hours);
     ElectricityForASHeatPump_Eq(years,months,daytypes,hours)..
     ElectricityForASHeatPump(years,months,daytypes,hours)
     =E=
     HeatingFromASHeatPump(years,MONTHS,DAYTYPES,HOURS)/HeatPumpParameterValue('AirSourceHeatPump','COP_heating')
     +
     CoolingFromASHeatPump(years,MONTHS,DAYTYPES,HOURS)*COPelectric/HeatPumpParameterValue('AirSourceHeatPump','COP_cooling');

Equation ElectricityForGSHeatPump_Eq(years,months,daytypes,hours);
     ElectricityForGSHeatPump_Eq(years,months,daytypes,hours)..
     ElectricityForGSHeatPump(years,months,daytypes,hours)
     =E=
     HeatingFromGSHeatPump(years,MONTHS,DAYTYPES,HOURS)/HeatPumpParameterValue('GroundSourceHeatPump','COP_heating')
     +
     CoolingFromGSHeatPump(years,MONTHS,DAYTYPES,HOURS)*COPelectric/HeatPumpParameterValue('GroundSourceHeatPump','COP_cooling');

****** cooling constraints  ***********
*Cooling load can be met by electric cooling or abs. cooling

*2013/03. Lenaig added a year index to all variables and equations in this section about cooling.

Positive Variables
     CoolingByElectric(years,months,daytypes,hours)
     CoolingByNGChill(years,months,daytypes,hours)
     CoolingByHeatPumps(years,months,daytypes,hours)
     ;

Equation CoolingProvisionEq(years,months,daytypes,hours);
     CoolingProvisionEq(years,months,daytypes,hours)..

     load(years,'Cooling',months,daytypes,hours)
     =E=
     CoolingByElectric(years,months,daytypes,hours)
     +
     CoolingByAbsorption(years,months,daytypes,hours)
     +
     CoolingByNGChill(years,months,daytypes,hours)
     +
     CoolingByHeatPumps(years,months,daytypes,hours)
     ;

*electricity required for compression chilling
*this is straightforward b.cs. we express cooling loads in terms
*  of electric load equivalent

Equation ElectricCoolingEq(years,months,daytypes,hours);
     ElectricCoolingEq(years,months,daytypes,hours)..
     CoolingByElectric(years,months,daytypes,hours)
     =E=
     OptionsTable('CentralChiller','OptionValue')*ElectricityForCooling(years,months,daytypes,hours);

Equation CoolingByNGChill_Eq(years,months,daytypes,hours);
     CoolingByNGChill_Eq(years,months,daytypes,hours)..
     CoolingByNGChill(years,months,daytypes,hours)
     =E=
     sum(NGChillTech,NGChill_Amount(NGChillTech,years,months,daytypes,hours));

Equation CoolingByHeatPumps_Eq(years,months,daytypes,hours);
     CoolingByHeatPumps_Eq(years,months,daytypes,hours)..
     CoolingByHeatPumps(years,months,daytypes,hours)
     =E=
     CoolingFromASHeatPump(years,MONTHS,DAYTYPES,HOURS)
     +
     CoolingFromGSHeatPump(years,MONTHS,DAYTYPES,HOURS);

*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
Equation CoolingFromASHeatPump_Eq(years,months,daytypes,hours);
     CoolingFromASHeatPump_Eq(years,months,daytypes,hours)..
     CoolingFromASHeatPump(years,MONTHS,DAYTYPES,HOURS)
     =L=
     TotalCapacityInYearY('AirSourceHeatPump',years)*HeatPumpParameterValue('AirSourceHeatPump','COP_cooling')/COPelectric;

*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
Equation CoolingFromGSHeatPump_Eq(years,months,daytypes,hours);
     CoolingFromGSHeatPump_Eq(years,months,daytypes,hours)..
     CoolingFromGSHeatPump(years,MONTHS,DAYTYPES,HOURS)
     =L=
     TotalCapacityInYearY('GroundSourceHeatPump',years)*HeatPumpParameterValue('GroundSourceHeatPump','COP_cooling')/COPelectric;

Binary Variables
     BinaryASHPheating(years,months,daytypes,hours)
     BinaryASHPcooling(years,months,daytypes,hours)
     BinaryGSHPheating(years,months,daytypes,hours)
     BinaryGSHPcooling(years,months,daytypes,hours);

Equation ASHP_Heat_Or_Cool_Eq(years,months,daytypes,hours);
     ASHP_Heat_Or_Cool_Eq(years,months,daytypes,hours)..
     BinaryASHPheating(years,months,daytypes,hours)
     =E=
     1-BinaryASHPcooling(years,months,daytypes,hours);

Equation ASHP_Cooling_max_Eq(years,months,daytypes,hours);
     ASHP_Cooling_max_Eq(years,months,daytypes,hours)..
     CoolingFromASHeatPump(years,MONTHS,DAYTYPES,HOURS)
     =L=
     BinaryASHPcooling(years,months,daytypes,hours)*1000000;

Equation ASHP_Heating_max_Eq(years,months,daytypes,hours);
     ASHP_Heating_max_Eq(years,months,daytypes,hours)..
     HeatingFromASHeatPump(years,MONTHS,DAYTYPES,HOURS)
     =L=
     BinaryASHPheating(years,months,daytypes,hours)*1000000;

Equation GSHP_Heat_Or_Cool_Eq(years,months,daytypes,hours);
     GSHP_Heat_Or_Cool_Eq(years,months,daytypes,hours)..
     BinaryGSHPheating(years,months,daytypes,hours)
     =E=
     1-BinaryGSHPcooling(years,months,daytypes,hours);

Equation GSHP_Cooling_max_Eq(years,months,daytypes,hours);
     GSHP_Cooling_max_Eq(years,months,daytypes,hours)..
     CoolingFromGSHeatPump(years,MONTHS,DAYTYPES,HOURS)
     =L=
     BinaryGSHPcooling(years,months,daytypes,hours)*1000000;

Equation GSHP_Heating_max_Eq(years,months,daytypes,hours);
     GSHP_Heating_max_Eq(years,months,daytypes,hours)..
     HeatingFromGSHeatPump(years,MONTHS,DAYTYPES,HOURS)
     =L=
     BinaryGSHPheating(years,months,daytypes,hours)*1000000;


Equation GSHP_Annual_Balance_Eq(years);
     GSHP_Annual_Balance_Eq(years)..
     OptionsTable('GSHPAnnualBalance','OptionValue')
     *
     sum(months,
         sum(daytypes,
             sum(hours, CoolingFromGSHeatPump(years,MONTHS,DAYTYPES,HOURS)*COPelectric*(1+1/HeatPumpParameterValue('GroundSourceHeatPump','COP_cooling')))))
     =E=
     OptionsTable('GSHPAnnualBalance','OptionValue')
     *
     sum(months,
         sum(daytypes,
             sum(hours, HeatingFromGSHeatPump(years,MONTHS,DAYTYPES,HOURS)*(1-1/HeatPumpParameterValue('GroundSourceHeatPump','COP_heating')))));


*TK for now, assume COP at 100% for all levels of operation
Equation NG_ForNGChill_Eq(years,months,daytypes,hours);
     NG_ForNGChill_Eq(years,months,daytypes,hours)..
     NG_ForNGChill(years,months,daytypes,hours)
     =E=
     sum(NGChillTech,
          NGChill_Amount(NGChillTech,years,months,daytypes,hours)*COPelectric
          /NGChiller(NGChillTech,'COP_100')
         );


Positive Variable
     HeatForCooling(years,months,daytypes,hours);

*heat required for abs chilling
Equation AbsorptionCoolingEq(years,months,daytypes,hours);
     AbsorptionCoolingEq(years,months,daytypes,hours)..
     CoolingByAbsorption(years,months,daytypes,hours)
     =E=
     HeatForCooling(years,months,daytypes,hours)*COPabs/COPelectric;

*   abs cooling is limited by the size of the abs chiller purchased
*   assume that electric chilling is not limited
*   note abs capacity is in terms of electricity offset
*   this is a problem if the COP electric changes from run to run


****** refrigeration constraints  ***********
*refrigeration load can be met by electric cooling or abs. cooling

*2013/03. Lenaig added a year index to all equations in this section about refrigeration.

Positive Variables
     RefrigerationByElectric(years,months,daytypes,hours);

Equation RefrigerationProvisionEq(years,months,daytypes,hours);
     RefrigerationProvisionEq(years,months,daytypes,hours)..
     load(years,'refrigeration',months,daytypes,hours)
     =E=
     RefrigerationByElectric(years,months,daytypes,hours)
*     +
*     RefrigerationByAbsorption(years,months,daytypes,hours)
     ;
*Sb!!! for assurance purposes, I turned off "refrigeration by absorption" for now
*    electricity required for compression chilling
*    this is straightforward b.cs. we express cooling loads in terms
*    of electric load equivalent

Equation ElectricRefrigerationEq(years,months,daytypes,hours);
     ElectricRefrigerationEq(years,months,daytypes,hours)..
     RefrigerationByElectric(years,months,daytypes,hours)
     =E=
     ElectricityForRefrigeration(years,months,daytypes,hours);

Parameters
     COPelectric_refr
     COPabs_refr;

COPelectric_refr = COP_Electric_Abs_Refrigeration  ('Electric');
COPabs_refr = COP_Electric_Abs_Refrigeration       ('Absorption');


Positive Variable
     HeatForRefrigeration(years,months,daytypes,hours);

*heat required for abs chilling
Equation AbsorptionRefrigerationEq(years,months,daytypes,hours);
     AbsorptionRefrigerationEq(years,months,daytypes,hours)..
     RefrigerationByAbsorption(years,months,daytypes,hours)
     =E=
     HeatForRefrigeration(years,months,daytypes,hours)*COPabs/COPelectric;

*   abs cooling is limited by the size of the abs chiller purchased
*   assume that electric chilling is not limited
*   note abs capacity is in terms of electricity offset
*   this is a problem if the COP electric changes from run to run


****** thermal balance, top level equations ***************
*2013/03. Lenaig added a year index to all equations in this section about heat.

*tk eventually may want to do this twice, for two different qualities of heat
*tk possibly also one more time for cold storage

Positive Variables
* HeatProvided (months, daytypes,hours)
     HT_HeatProvided_for_HT (years, months, daytypes, hours)
     HT_HeatProvided_for_LT (years, months, daytypes, hours)
     LT_HeatProvided (years, months, daytypes, hours)

     Heat_FromNG(years, months, daytypes,hours)
     Heat_FromDG(years, months,daytypes,hours)
     Heat_FromSolar(years, months,daytypes,hours)
     Heat_FromNGChill(years, months,daytypes,hours)
     Heat_FromHeatPumps(years, months,daytypes,hours)
     ;


* NEW HEAT PROVIDED EQUATIONS
Equation HT_HeatProvided_Eq (years,months,daytypes,hours);
     HT_HeatProvided_Eq (years,months,daytypes,hours)..
     HT_HeatProvided_for_HT (years,months,daytypes,hours)
     +
     HT_HeatProvided_for_LT (years,months,daytypes,hours)
     =E=
     Heat_FromNG(years,months,daytypes,hours)
     +
     Heat_FromDG(years,months,daytypes,hours)
     +
     Heat_FromSolar(years,months,daytypes,hours)
     +
     Heat_FromStorage(years,months,daytypes,hours)
     +
     Heat_FromNGChill(years,months,daytypes,hours)
     ;

Equation LT_HeatProvided_Eq (years,months,daytypes,hours);
        LT_HeatProvided_Eq (years,months,daytypes,hours)..
        LT_HeatProvided (years,months,daytypes,hours)
        =E=
        Heat_FromHeatPumps(years,months,daytypes,hours)
        ;


* OLD HEAT PROVIDED EQUATION
* Equation HeatProvidedEq (months, daytypes,hours);
*     HeatProvidedEq(months, daytypes,hours)..
*     HeatProvided (months, daytypes,hours)
*     =E=
*     Heat_FromNG(months, daytypes,hours)
*     +
*     Heat_FromDG(months,daytypes,hours)
*     +
*     Heat_FromSolar(months,daytypes,hours)
*     +
*     Heat_FromStorage(months,daytypes,hours)
*     +
*     Heat_FromNGChill(months,daytypes,hours)
*     +
*     Heat_FromHeatPumps(months,daytypes,hours)
*     ;

Positive Variables
     HeatStored(years,months,daytypes,hours)
     HeatStorageInput(years,months,daytypes,hours)
     HeatStorageOutput(years,months,daytypes,hours)
     HeatStorageLosses(years,months,daytypes,hours)
     ;

Equation HeatStoredEq (years,months,daytypes,hours);
     HeatStoredEq(years,months,daytypes,hours)..
     HeatStored(years,months,daytypes,hours)
     =E=
     HeatStored(years,months,daytypes,hours--1)
     +
     HeatStorageInput(years,months,daytypes,hours)
     -
     HeatStorageOutput(years,months,daytypes,hours)
     -
     HeatStorageLosses(years,months,daytypes,hours)
     ;

Positive Variables
*    HeatConsumed(months,daytypes,hours)
     HT_HeatConsumed (years,months,daytypes,hours)
     LT_HeatConsumed (years,months,daytypes,hours)

     HeatForSpaceHeating(years,months,daytypes,hours)
     HeatForWaterHeating(years,months,daytypes,hours)
     HeatForStorage(years,months,daytypes,hours)
     ;

* NEW HEAT CONSUMED EQUATIONS
Equation HT_HeatConsumed_Eq (years,months,daytypes,hours);
        HT_HeatConsumed_Eq (years,months, daytypes, hours)..
        HT_HeatConsumed (years,months,daytypes,hours)
        =E=
        HeatForCooling (years,months,daytypes,hours)
        +
        HeatForRefrigeration (years,months,daytypes,hours)
        +
        HeatForStorage(years,months,daytypes,hours)
        ;

Equation LT_HeatConsumed_Eq (years,months,daytypes,hours);
     LT_HeatConsumed_Eq (years,months,daytypes,hours)..
     LT_HeatConsumed (years,months,daytypes,hours)
     =E=
     HeatForSpaceHeating(years,months,daytypes,hours)
     +
     HeatForWaterHeating(years,months,daytypes,hours)
     -
     sum(DemandResponseType,DemandResponseHeating(DemandResponseType,years,months,daytypes,hours))
     ;


* OLD HEAT CONSUMED EQUATION
* Equation HeatConsumedEq(months,daytypes,hours);
*     HeatConsumedEq(months,daytypes,hours)..
*     HeatConsumed(months,daytypes,hours)
*    =E=
*    HeatForSpaceHeating(months,daytypes,hours)
*    +
*    HeatForWaterHeating(months,daytypes,hours)
*    +
*    HeatForCooling(months,daytypes,hours)
*    +
*    HeatForRefrigeration(months,daytypes,hours)
*    +
*    HeatForStorage(months,daytypes,hours)
*    -sum(DemandResponseType,DemandResponseHeating(DemandResponseType,months,daytypes,hours))
*    ;

* NEW HEAT BALANCE EQUATIONS

Equation HT_HeatBalance_Eq (years,months,daytypes,hours);
        HT_HeatBalance_Eq (years,months,daytypes,hours)..
        HT_HeatProvided_for_HT (years,months,daytypes,hours)
        =E=
        HT_HeatConsumed (years,months,daytypes,hours)
        ;

Equation LT_HeatBalance_Eq (years,months,daytypes,hours);
        LT_HeatBalance_Eq (years,months,daytypes,hours)..
        HT_HeatProvided_for_LT (years,months,daytypes,hours)
        +
        LT_HeatProvided (years,months,daytypes,hours)
        =E=
        LT_HeatConsumed (years,months,daytypes,hours)
        ;


* OLD HEAT BALANCE EQUATION
* Equation HeatBalanceEq (months,daytypes,hours);
*      HeatBalanceEq (months,daytypes,hours)..
*      HeatProvided(months,daytypes,hours)
*      =E=
*
*      HeatConsumed(months,daytypes,hours)
*      ;


*********  thermal balance, lower level equations  **********


Equation Heat_FromNGEq(years,months,daytypes,hours);
     Heat_FromNGEq(years,months,daytypes,hours)..
     Heat_FromNG(years,months,daytypes,hours)
     =E=
     NG_ForHeat(years,months,daytypes,hours)*Beta('Space-heating');

Positive Variable     Heat_fromNo_SGIP_DG(years,months,daytypes,hours);
Positive Variable     Heat_from_SGIP_DG(years,months,daytypes,hours);


Equation Heat_fromDG_Eq(years,months,daytypes,hours);
         Heat_fromDG_Eq(years,months,daytypes,hours)..
         Heat_fromDG(years,months,daytypes,hours)
         =L=
         sum(AvailableCHPTechnologies, deropt(AvailableCHPTechnologies, 'alpha') *
                                     ( Generation_Use (AvailableCHPTECHNOLOGIES, years, months, daytypes, hours)
                                       + Generation_Sell (AvailableCHPTECHNOLOGIES, years, months, daytypes, hours)
                                      )
         );

Equation Heat_from_SGIP_DG_Eq(years,months,daytypes,hours);
         Heat_from_SGIP_DG_Eq(years,months,daytypes,hours)..
         Heat_from_SGIP_DG(years,months,daytypes,hours)
         =L=
         sum(AvailableSGIPTechnologies, deropt(AvailableSGIPTechnologies, 'alpha') *
                                     ( Generation_Use (AvailableSGIPTECHNOLOGIES, years, months, daytypes, hours)
                                       + Generation_Sell (AvailableSGIPTECHNOLOGIES, years, months, daytypes, hours)
                                      )
         );

Equation Heat_fromNo_SGIP_DG_Eq(years,months,daytypes,hours);
         Heat_fromNo_SGIP_DG_Eq(years,months,daytypes,hours)..
         Heat_fromNo_SGIP_DG(years,months,daytypes,hours)
         =E=
         Heat_fromDG(years,months,daytypes,hours) - Heat_from_SGIP_DG(years,months,daytypes,hours)
         ;


* for Equation Heat_FromSolarEq(months,daytypes,hours) see solar thermal modelling section


Equation Heat_FromStorageEq(years,months,daytypes,hours);
     Heat_FromStorageEq(years,months,daytypes,hours)..
     Heat_FromStorage(years,months,daytypes,hours)
    =E=
     HeatStorageOutput(years,months,daytypes,hours)
     *HeatStorageParameter('EfficiencyDischarge');

Equation Heat_FromNGChill_Eq (years,months,daytypes,hours);
     Heat_FromNGChill_Eq (years,months,daytypes,hours)..
     Heat_FromNGChill (years,months,daytypes,hours)
     =E=
     sum(NGChillTech,
          NGChill_Amount(NGChillTech,years,months,daytypes,hours)
          *NGChiller(NGChillTech,'CHPenable')
          *NGChiller(NGChillTech,'alpha')
         );

Equation Heat_FromHeatPumps_Eq(years,months,daytypes,hours);
     Heat_FromHeatPumps_Eq(years,months,daytypes,hours)..
     Heat_FromHeatPumps(years,months,daytypes,hours)
     =E=
     HeatingFromASHeatPump(years,MONTHS,DAYTYPES,HOURS)
     +
     HeatingFromGSHeatPump(years,MONTHS,DAYTYPES,HOURS);

*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
Equation HeatingFromASHeatPump_Eq(years,months,daytypes,hours);
     HeatingFromASHeatPump_Eq(years,months,daytypes,hours)..
     HeatingFromASHeatPump(years,MONTHS,DAYTYPES,HOURS)
     =L=
     TotalCapacityInYearY('AirSourceHeatPump',years)*HeatPumpParameterValue('AirSourceHeatPump','COP_heating');

*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
Equation HeatingFromGSHeatPump_Eq(years,months,daytypes,hours);
     HeatingFromGSHeatPump_Eq(years,months,daytypes,hours)..
     HeatingFromGSHeatPump(years,MONTHS,DAYTYPES,HOURS)
     =L=
     TotalCapacityInYearY('GroundSourceHeatPump',years)*HeatPumpParameterValue('GroundSourceHeatPump','COP_heating');

Equation HeatStorageInputEq(years,months,daytypes,hours);
     HeatStorageInputEq(years,months,daytypes,hours)..
     HeatStorageInput(years,months,daytypes,hours)
     =E=
     HeatForStorage(years,months,daytypes,hours)
     *HeatStorageParameter('EfficiencyCharge');

Equation HeatStorageLossesEq(years,months,daytypes,hours);
     HeatStorageLossesEq(years,months,daytypes,hours)..
     HeatStorageLosses(years,months,daytypes,hours)
     =E=
     HeatStored(years,months,daytypes,hours--1)
     *HeatStorageParameter('Decay');

Equation HeatForSpaceHeatingEq(years,months,daytypes,hours);
     HeatForSpaceHeatingEq(years,months,daytypes,hours)..
     HeatForSpaceHeating(years,months,daytypes,hours)
     =E=
     load (years,'space-heating', months, daytypes, hours);

*Equation HeatForWaterHeatingEq(years,months,daytypes,hours);
*     HeatForWaterHeatingEq(years,months,daytypes,hours)..
*     HeatForWaterHeating(years,months,daytypes,hours)
*     =E=
*     load (years,'Water-heating', months, daytypes, hours)-ElectricityForWaterHeating(years,months,daytypes,hours);

*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
Equation HeatStorageConstraint1Eq(years,months,daytypes,hours);
     HeatStorageConstraint1Eq(years,months,daytypes,hours)..
     HeatStored(years,months,daytypes,hours)
     =L=
     TotalCapacityInYearY('HeatStorage',years);

*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
Equation HeatStorageConstraint2Eq(years,months,daytypes,hours);
     HeatStorageConstraint2Eq(years,months,daytypes,hours)..
     HeatStorageOutput(years,months,daytypes,hours)
     =L=
     TotalCapacityInYearY('HeatStorage',years)*HeatStorageParameter('MaxDischargeRate');

*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered.
Equation HeatStorageConstraint3Eq(years,months,daytypes,hours);
     HeatStorageConstraint3Eq(years,months,daytypes,hours)..
     HeatStorageInput(years,months,daytypes,hours)
     =L=
     (TotalCapacityInYearY('HeatStorage',years)-HeatStored(years,months,daytypes,hours--1))*HeatStorageParameter('MaxChargeRate');

* ------------------------------
* MAXIMUM ANNUAL HOURS CONSTRAINT
*2013/03. Lenaig added a year index to this equation.
*2013/05/31. Lenaig modified this equation to consider the total capacity available in the year considered thanks to the year-counter.
Equation MaximumAnnualHoursEq (TECHNOLOGIES,years);
MaximumAnnualHoursEq (AvailableTECHNOLOGIES,years)..
     sum((months, daytypes, hours), DER_CurrentlyOperating(AvailableTECHNOLOGIES,years,months,daytypes,hours)*NumberOfDays(Months,Daytypes))
     =L=
     sum(years_counter $(years_counter.val le deropt(AvailableTechnologies,'lifetime')),
         DER_Investment (AvailableTECHNOLOGIES,years - (years_counter.val-1))* GenConstraints(AvailableTECHNOLOGIES,'MaxAnnualHours')
     );

*----------Load Scheduling Constraints----------------
*2013/03. Lenaig added a year index to all load scheduling equations in this section.

Equation LoadSchedulingEq_1(years,months,daytypes,hours);
     LoadSchedulingEq_1(years,months,daytypes,hours)..
     LoadReduction(years,months,daytypes,hours)
     =L=
     ReductionOrAddition(years,months,daytypes,hours)*SchedulableLoadParameterTable('MaxLoadinHour','ParameterValue');

Equation LoadSchedulingEq_2(years,months,daytypes,hours);
     LoadSchedulingEq_2(years,months,daytypes,hours)..
     LoadIncrease(years,months,daytypes,hours)
     =L=
     (1-ReductionOrAddition(years,months,daytypes,hours))* SchedulableLoadParameterTable('MaxIncrease','ParameterValue');

Equation LoadSchedulingEq_3(years,months,daytypes);
     LoadSchedulingEq_3(years,months,daytypes)..
     sum(hours, LoadReduction(years,months,daytypes,hours))
     =L=
     MaxShiftableLoad(years,months,daytypes);

Equation LoadSchedulingEq_4 (years,months,daytypes);
         LoadSchedulingEq_4  (years,months,daytypes)..
         sum(hours,LoadReduction(years,months,daytypes,hours))
         =e=sum(hours,Loadincrease(years,months,daytypes,hours));

*************************************************************
* -------------  SGIP REQUIREMENTS --------------------------
*************************************************************
*2013/03. Lenaig added a year index to the variables and the equations in this SGIP section.

* --- Waste Heat & Electricity Utilization ------------------

Positive Variable AnnualDGSGIPElectricity(years);
Positive Variable AnnualDGSGIPRecHeat(years);
Positive Variable AnnualNGforDGSGIP(years);

Equation AnnualDGSGIPElectricityEq(years);
         AnnualDGSGIPElectricityEq(years)..
         AnnualDGSGIPElectricity(years)
         =E=
         sum((AvailableSGIPTECHNOLOGIES,months,daytypes,hours),
                 ( Generation_Use(AvailableSGIPTECHNOLOGIES,years,months,daytypes,hours) + Generation_Sell(AvailableSGIPTECHNOLOGIES,years,months,daytypes,hours)
                 )* NumberOfDays(Months,Daytypes));


Equation AnnualDGSGIPRecHeatEq(years);
         AnnualDGSGIPRecHeatEq(years)..
         AnnualDGSGIPRecHeat(years)
         =E=
         sum((months,daytypes,hours), Heat_from_SGIP_DG(years,months,daytypes,hours)*NumberOfDays(months,daytypes));


Equation AnnualNGforDGSGIPEq(years);
         AnnualNGforDGSGIPEq(years)..
         AnnualNGforDGSGIP(years)
         =E=
         sum((AvailableSGIPTECHNOLOGIES,months,daytypes,hours)$(deropt(AvailableSGIPTECHNOLOGIES,'fuel')=FuelValue('NGforDG')),
         ( Generation_Use(AvailableSGIPTECHNOLOGIES,years,months,daytypes,hours) + Generation_Sell(AvailableSGIPTECHNOLOGIES,years,months,daytypes,hours) )* (1/deropt(AvailableSGIPTECHNOLOGIES,'efficiency'))
         * NumberOfDays(months,daytypes)
         );

* T / (T + E) >= 5%
Equation SGIP_Thermal_Efficiency_Req_Eq(years);
         SGIp_Thermal_Efficiency_Req_Eq(years)..
         AnnualDGSGIPRecHeat(years)
         =G=
         ( AnnualDGSGIPRecHeat(years) + AnnualDGSGIPElectricity(years) )
         *
         SGIPOptions('MinSGIPHeatRecovered', 'OptionValue');

* (E + 0.5 T) / F >= 42.5%
Equation SGIP_LHV_Requirement_Eq(years);
         SGIP_LHV_Requirement_Eq(years)..
         AnnualDGSGIPElectricity(years) + AnnualDGSGIPRecHeat(years) * 0.5
         =G=
         AnnualNGforDGSGIP (years)* SGIPOptions('MinSGIPLHVefficiency', 'OptionValue');

* (E+T) / F >= 60%
Equation SGIP_HHV_Requirement_Eq(years);
         SGIP_HHV_Requirement_Eq(years)..
         AnnualDGSGIPElectricity (years)+ AnnualDGSGIPRecHeat(years)
         =G=
         AnnualNGforDGSGIP(years) * SGIPOptions('MinSGIPHHVefficiency', 'OptionValue');

* E / F >= 40%
Equation SGIP_HHV_Electric_Requirement_Eq(years);
         SGIP_HHV_Electric_Requirement_Eq(years)..
         AnnualDGSGIPElectricity(years)
         =G=
         AnnualNGforDGSGIP(years) * SGIPOptions('MinSGIPHHVElectricEfficiency', 'OptionValue');

* S <= 25% * G
Equation SGIP_Sales_Limit_Eq(years);
         SGIP_Sales_Limit_Eq(years)..
         TotalElectricitySales(years) * SGIPOptions('enableSGIP', 'OptionValue')
         =L=
         SGIPOptions('MaxElectricityExport', 'OptionValue')
         *
         sum ((months, daytypes, hours), Electricity_Generation(years,months, daytypes, hours))
         ;

*2013/05/31. Lenaig modified this equation to consider the capacity from the total capacity available in the year considered thanks to the year-counter.
Equation SGIP_Max_CHP_Capacity_Eq(years);
         SGIP_Max_CHP_Capacity_Eq(years)..
         sum(AvailableCHPTECHNOLOGIES,
              sum(years_counter $(years_counter.val le deropt(AvailableCHPTechnologies,'lifetime')),
                 DER_Investment (AvailableCHPTECHNOLOGIES,years - (years_counter.val-1)) * deropt (AvailableCHPTECHNOLOGIES, 'maxp')))
         * SGIPOptions ('enableSGIP','OptionValue')
         =L=
         max_electric_load;
*
* --- PBI Payments -------------------------
*

* NPV Net Present Cost
* EAC Equivalent Annual Cost

*2013/03. Lenaig added a year index to the variable 'PBI_Payment(...)' and the equation 'PBI_Payment_EQ(...)'

Positive Variables
         PBI_Payment(Technologies, SGIP_Years, years)
*2013/05/31. Lenaig modified PBI_NPV(Technologies).
*        PBI_NPV(years)  needs to be declared before totalenergycosts
         PBI_EAC(Technologies);
*        PBI_INCENTIVE needs to be declared before totalenergycosts


Equation PBI_Payment_Eq(Technologies, SGIP_Years, years);
         PBI_Payment_Eq(AvailableSGIPTechnologies, SGIP_Years, years)..
         PBI_Payment(AvailableSGIPTechnologies, SGIP_Years, years)$(SGIP_Years.val eq years.val)
         =E=
         PBI_CO2_Adjustment(AvailableSGIPTechnologies) * 0.2 * 0.5 * SGIPIncentiveAmount(AvailableSGIPTechnologies)
         *
         sum((months,daytypes,hours), Generation_Use(AvailableSGIPTechnologies, years, months, daytypes, hours)* NumberOfDays(months, daytypes) )
         / ( DEROPT(AvailableSGIPTechnologies, 'maxp') * 8760 * 0.8 )
         ;

*2013/05/31. Lenaig modified this equation to get PBI_NPV(years).
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation PBI_NPV_Eq(years);
         PBI_NPV_Eq(years)..
         PBI_NPV(years)
         =E=
         sum(AvailableSGIPTechnologies,
             sum(SGIP_Years$(SGIP_Years.val eq years.val),
                 PBI_Payment(AvailableSGIPTechnologies, SGIP_Years, years)/((1+ParameterTable('IntRate','ParameterValue')) ** (ord(years)-1))
                 )
         );

*2013/05/31. Lenaig put the two following equations in text mode.
$ontext
Equation PBI_EAC_Eq(Technologies);
         PBI_EAC_Eq(AvailableSGIPTechnologies)..
         PBI_EAC(AvailableSGIPTechnologies)
         =E=
         PBI_NPV(AvailableSGIPTechnologies) * ParameterTable('IntRate','ParameterValue') / ( 1 - 1 / ( 1 + ParameterTable('IntRate','ParameterValue') ) ** 5 )
         ;

Equation PBI_INCENTIVE_Eq;
         PBI_INCENTIVE_Eq..
         PBI_INCENTIVE
         =E=
         sum(AvailableSGIPTechnologies, PBI_EAC(AvailableSGIPTechnologies))
         ;
$offtext

*****************************************************
*---------------Feed In Tariff Requirements----------
*****************************************************
*2013/03. Lenaig added a year index to all variables and equations in this section about feed-in tariff (except 'CapacityConstraintFeedingEq' equation).

Positive variable
Annual_Heat_from_CHP (years)
Annual_Electricity_from_CHP (years)
;

Equation Annual_Heat_from_CHP_Eq(years);
         Annual_Heat_from_CHP_Eq(years)..
         Annual_Heat_from_CHP(years)
         =E=
         sum((months, daytypes, hours), heat_fromDG(years,months,daytypes,hours)*NumberOfDays(months,daytypes));

Equation Annual_Electricity_from_CHP_Eq(years);
         Annual_Electricity_from_CHP_Eq(years)..
         Annual_Electricity_from_CHP(years)
         =E=
         sum( (AvailableCHPTECHNOLOGIES, months, daytypes, hours),
            ( Generation_Use (AvailableCHPTECHNOLOGIES, years, months, daytypes, hours)
               + Generation_Sell (AvailableCHPTECHNOLOGIES, years, months, daytypes, hours) )
            * NumberOfDays(months,daytypes) );

* T / ( T + E ) >= 5%
Equation Minimum_Heat_Recovery_FeedIn_Eq(years);
         Minimum_Heat_Recovery_Feedin_Eq(years)..
         Annual_Heat_from_CHP (years)
         =G=
         OptionsTable ('Sales','OptionValue') * FeedInOptions('MinHeatRecovered', 'OptionValue') * ( Annual_Heat_from_CHP(years) + Annual_Electricity_from_CHP(years));

* ( E + 0.5 T ) / F >= 42.5%
Equation LHV_Efficiency_Constraint_Feedin_Eq(years);
         LHV_Efficiency_Constraint_Feedin_Eq(years)..
         Annual_Electricity_from_CHP(years) + 0.5 * Annual_Heat_from_CHP(years)
         =G=
         OptionsTable ('Sales','OptionValue') * FeedInOptions('MinLHVefficiency', 'OptionValue') * sum(months, NGforCHPDGConsumption(years,months));

* ( E + T ) / F >= 60%
Equation HHV_Efficiency_Constraint_Feedin_Eq(years);
         HHV_Efficiency_Constraint_Feedin_Eq(years)..
         Annual_Electricity_from_CHP(years) + Annual_Heat_from_CHP(years)
         =G=
         OptionsTable ('Sales','OptionValue') * FeedInOptions('MinHHVefficiency', 'OptionValue') * sum(months, NGforCHPDGConsumption(years,months));

* MAX EXPORT = 5MW
Equation ElectricSalesLimitEq (years, months, daytypes, hours);
         ElectricSalesLimitEq (years, months, daytypes, hours)..
         ElectricSales(years, months, daytypes, hours)
         =L=
         FeedInOptions('MaxExportCapacity', 'OptionValue');

*2013/05/31. Lenaig modified this equation to consider the capacity from the latest investments.
* MAX CHP CAPACITY = 20MW
Equation CapacityConstraintFeedinEq(years);
         CapacityConstraintFeedinEq(years)..
         sum(AvailableCHPTECHNOLOGIES,
              sum(years_counter $(years_counter.val le deropt(AvailableCHPTechnologies,'lifetime')),
                   DER_Investment(AvailableCHPTECHNOLOGIES,years - (years_counter.val - 1))
                   * deropt (AvailableCHPTECHNOLOGIES, 'maxp')
         ))*OptionsTable ('Sales','OptionValue')
         =L=
         FeedInOptions('MaxInstalledCapacity','OptionValue');

* ------------------

* -------------  INVESTMENT CONSTRAINTS  ---------------------------------------
*2013/03. Lenaig replaced the 'AnnualSavingsEq' equation that calculates savings over the typical year by an 'AllPeriodSavingsEq' equation that sums annual savings.

*2013/06/06. Lenaig did not calculate the present values of 'BaseCaseCost', 'TotalEnergyCosts(years)' and 'AnnualizedCapitalCost(years)' in this equation because they are already present values.
Equation AllPeriodSavingsEq;
     AllPeriodSavingsEq..
     AllPeriodSavings
         =E=
         sum(years,ParameterTable('BaseCaseCost','ParameterValue')
                   -
                   (TotalEnergyCosts(years) - AnnualizedCapitalCost(years))
         );

*2013/05/31. Lenaig put the payback constraint active and modified it by replacing UpfrontCapitalCost by UpfrontCapitalCost(years).
Equation PaybackConstraintEq;
PaybackConstraintEq..
      AllPeriodSavings / card(years)
      =G=
      sum(years,UpfrontCapitalCost(years))/ParameterTable('MaxPaybackPeriod','ParameterValue');

* ------------------
*2013/03. Lenaig added a year index to all equations in this section.

* Annual Electricity Output from Natural Gas fired units
Equation NGforDER_ElectricProductionEq (years);
         NGforDER_ElectricProductionEq(years) ..
         NGforDER_ElectricityProduction(years)
         =E=
         sum((AvailableTECHNOLOGIES,months,daytypes,hours)$(deropt(AvailableTECHNOLOGIES,'fuel')=4),
         Generation_Use(AvailableTECHNOLOGIES,years,months,daytypes,hours)*NumberOfDays(months,daytypes))
         +sum((AvailableTECHNOLOGIES,months,daytypes,hours)$(deropt(AvailableTECHNOLOGIES,'fuel')=4),
         Generation_Sell(AvailableTECHNOLOGIES,years,months,daytypes,hours)*NumberOfDays(months,daytypes));

* Annual Total NG Consumed for DER Generators
Equation NGforDER_ConsumedEnergyEq(years);
         NGforDER_ConsumedEnergyEq(years) ..
         NGforDER_ConsumedEnergy(years)
         =E=
         sum(  (AvailableTECHNOLOGIES,months,daytypes,hours)$(deropt(AvailableTECHNOLOGIES,'fuel')=4),
         Generation_Use(AvailableTECHNOLOGIES,years,months,daytypes,hours)*(1/deropt(AvailableTECHNOLOGIES,'efficiency'))*NumberOfDays(months,daytypes)  )
         + sum(         (AvailableTECHNOLOGIES,months,daytypes,hours)$(deropt(AvailableTECHNOLOGIES,'fuel')=4),
         Generation_Sell(AvailableTECHNOLOGIES,years,months,daytypes,hours)*(1/deropt(AvailableTECHNOLOGIES,'efficiency'))*NumberOfDays(months,daytypes)   )
         ;

*2013/05/31. Lenaig calculated the present value of electricity annual sales ($).
*2014/06/13. Lenaig changed "ord(years)-1" to "ord(years)".
Equation Electricity_AnnualSalesEq1(years);
         Electricity_AnnualSalesEq1(years)$(NetmeteringOnOff = 0) ..
         AnnualElectricitySales(years)
         =E=
         sum ((months, daytypes, hours), ElectricSales(years, months, daytypes, hours) * PX(years,months, daytypes, hours) * NumberOfDays (months, daytypes))
         *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
         ;
Equation Electricity_AnnualSalesEq2(years);
                 Electricity_AnnualSalesEq2(years)$(NetmeteringOnOff = 1) ..
         AnnualElectricitySales(years)
         =E=
         sum ((months, daytypes, hours), ElectricSales(years, months, daytypes, hours) * ElectricityRates(years,months, daytypes, hours) * NumberOfDays (months, daytypes))
         *(1/(1+ParameterTable('IntRate','ParameterValue'))** (ord(years)-1))
         ;

Equation Electricity_TotalSalesEq(years);
         Electricity_TotalSalesEq(years) ..
         TotalElectricitySales(years)
         =E=
         sum ((months, daytypes, hours), ElectricSales(years,months, daytypes, hours) * NumberOfDays (months, daytypes))
         ;

$ontext
Equation NetMeteringEq(years);
    NetMeteringEq(years)..
    AnnualElectricConsumption (years)=G=  TotalElectricitySales(years)*NetmeteringOnOff;
$offtext
*Sb!!! removed this equation as it seemed to make no sense....
*2013/05/31. Lenaig added a year index and considered the total installed capacities that are available.
Equation CapacityConstraintEq(years);
    CapacityConstraintEq(years)..
    sum (AvailableTECHNOLOGIES,
         sum(years_counter $(years_counter.val le deropt(AvailableTechnologies,'lifetime')),
                 DER_Investment(AvailableTECHNOLOGIES,years -(years_counter.val-1))
                 * deropt (AvailableTECHNOLOGIES, 'maxp')))
    =L= smin((months,daytypes,hours),TotalELoad(years,months,daytypes,hours))*InvestmentConstOnOff;

* ------------------

* -------------  ZNEB CONSTRAINTS  ---------------------------------------
*2013/03. Lenaig added a year index.
Equation ZNEB_Balance(years);
ZNEB_Balance(years)..
        (AnnualElectricConsumption(years)-TotalElectricitySales(years))/ParameterTable('macroeff','ParameterValue')+AnnualNGConsume(years)
        =E= 0;

* ------------------

* ------------------ Solar thermal efficiency modeling  -------------------------------


set solarsettings /n0, a1, InletWaterTemp, OutletWaterTemp, epsilon/;
* n0 and a1 are the coefficients used in the calculation of solar thermal efficiency
* epsilon is used to get rid of a division by zero problem
* model based on http://www.solarenergy.ch/spf.php?lang=en&fam=1&tab=3
* Based on a dozen of collector reports, we obtained average values for n0, a1 and a2.
* Then we looked for the closest linear approximation and obtained n0 = 0.8212, a1 = 5.1614 .
* See also “calculation for solar thermal efficiency.xls” for more details.
* We used collectors that received SPF quality label from http://www.solarenergy.ch/spf.php?lang=en&fam=1&tab=1 until may 11th.
Parameter ParameterSolarThermal(solarsettings)
* Temp. in °Celsius
/          n0                          0.8212
           a1                          5.1614
           InletWaterTemp              18
           OutletWaterTemp             60
           epsilon                     0.0001/;

parameter SolarThermalEfficiency1(months,hours);
SolarThermalEfficiency1(months,hours)
     =
        ParameterSolarThermal('n0')-ParameterSolarThermal('a1')*((ParameterSolarThermal('InletWaterTemp')+ParameterSolarThermal('OutletWaterTemp'))/2-AmbientHourlyTemperature(months, hours))/(SolarInsolation(months,hours)*1000+ParameterSolarThermal('epsilon'));

* This avoids negative efficiencies
parameter SolarThermalEfficiency(months,hours);
SolarThermalEfficiency(months,hours)=(SolarThermalEfficiency1(months,hours)+abs(SolarThermalEfficiency1(months,hours)))/2;

scalar SolarRadiationThreshold /0.0/;
*if solar radiation > SolarRadiationThreshold then solar radiation is included in the calculation of the average efficiency

parameter DaysPerMonth(months);
DaysPerMonth(months)=sum (daytypes, NumberOfDays (months, daytypes));

scalar CounterForAveragedEfficiency  /0/;
scalar  SumForAverageEfficiency /0/;
*sum of hourly solar thermal efficiency when solar radiation > SolarRadiationThreshold
scalar SolarThermalAverageEfficiency /0/;

SumForAverageEfficiency = sum((months,hours)$(SolarInsolation(months,hours)>SolarRadiationThreshold), SolarThermalEfficiency(months,hours)*DaysPerMonth(months));
CounterForAveragedEfficiency  = sum((months,hours)$(SolarInsolation(months,hours)>SolarRadiationThreshold),DaysPerMonth(months));

SolarThermalAverageEfficiency =  SumForAverageEfficiency/(CounterForAveragedEfficiency+ParameterSolarThermal('epsilon'));

scalar PeakSolarThermalEfficiency             /.75/
scalar EffectiveAreaFactor  considers also not effective area (roughly 7% of the a solar panel is not used by the absorber)  /.9333/
positive variable SolarThermalArea(years);

*2013/05/31. Lenaig added a year index to this equation and considered the total capacity available in the year considered.
Equation SolarThermalAreaEq(years);
         SolarThermalAreaEq(years)..
         SolarThermalArea(years) =E= TotalCapacityInYearY('solarthermal',years)/(PeakSolarThermalEfficiency*EffectiveAreaFactor);

*2013/05/31. Lenaig added a year index to this equation and considered the total capacity available in the year considered.
Equation Heat_FromSolarEq(years,months,daytypes,hours);
     Heat_FromSolarEq(years,months,daytypes,hours)..
     Heat_FromSolar(years,months,daytypes,hours)
     =L= TotalCapacityInYearY('SolarThermal',years)/PeakSolarThermalEfficiency * SolarThermalEfficiency(months,hours) * SolarInsolation(months,hours);

* ------------------

* ------------------  PV efficiency modeling  -------------------------------
* Source : "Comparison of Predicted to Measured Photovoltaic Module Performance", A. Hunter et al., Journal of Solar Energy Engineering
* MAY 2009, Vol. 131 / 021011-1.
* Adapted by Nico Hotz, postdoc at the Mechanical Engineering department at UC Berkeley, hotz@berkeley.edu
* Please note some parameters from the original model are not used in this simplified model
* http://prod.sandia.gov/techlib/access-control.cgi/2004/043535.pdf
set PVsettings / A, E0, T0, a0, a1, a2, a3, a4,  I_sc0, alfa_Isc, aPV, b, I_mp0,
                 alfa_Imp, c0, c1, V_oc0, n, Ns, beta_Voc, V_mp0, beta_Vmp, c2, c3, AMa, kBYq /;

* Sanyo H168 PSEL2115 PV cell characteristics are used from Sandia
* Area =1.19m^2, (35.2" x 51.9"). Weight = 23 kg  (51 lb).
* Bifacial module with 96  large-area (100 cm^2) HIT (heterojunction with intrinsic thin layer)
* high-efficiency crystalline silicon cells connected in series.
* Aluminum frame, tempered glass front sheet, glass  backsheet, module laminated with  EVA encapsulant. Pre-production.
Parameter ParameterPV(PVsettings)
* E0: reference solar spectrum, 1000 W/m2
* T0: reference cell temperature, 25°C
/   A           1.19
    E0          1000.00
    T0          25
    a0          0.92619
    a1          0.062356
    a2          -0.010119
    a3          0.00067031
    a4          -0.000016221
    I_sc0       4.104
    alfa_Isc    0.000458
    aPV         -3.27
    b           -0.107
    I_mp0       3.819
    alfa_Imp    0.000082
    c0          0.9981
    c1          0.0019
    V_oc0       67.1
    n           1.165
    Ns          96
    beta_Voc    -0.1915
    V_mp0       53.98
    beta_Vmp    -0.1682
    c2          -0.30396
    c3          -9.22773
    AMa         1.5
    kBYq        0.0000861738
/
;

* The original model also considers E_b= ParameterPV('E0')*cos(ParameterPV('AOI')) and
* E_diff(months,hours) = SolarInsolation*1000-E_b(months,hours);
* E_B and E_diff influences
* f2_AOI = ParameterPV('b0')+ParameterPV('b1')*ParameterPV('AOI')+ParameterPV('b2')*ParameterPV('AOI')**2+ParameterPV('b3')*ParameterPV('AOI')**3+ParameterPV('b4')*ParameterPV('AOI')**4+ParameterPV('b5')*ParameterPV('AOI')**5;
* But, f2_AOI is close to 1 so that we neglect it for our purpose and we set
* E_b(months,hours)*f2_AOI + ParameterPV('f_d')*E_diff(months,hours) in
* I_sc(months,hours) = ParameterPV('I_sc0')*f1_AMa*(E_b(months,hours)*f2_AOI + ParameterPV('f_d')*E_diff(months,hours))/ParameterPV('E0')*(1 + ParameterPV('alfa_Isc')*(T_c(months,hours) - ParameterPV('T0')));
* just to SolarInsolation(months,hours)!

parameter f1_AMa;
f1_AMa = ParameterPV('a0')+ParameterPV('a1')*ParameterPV('AMa')+ParameterPV('a2')*ParameterPV('AMa')**2+ParameterPV('a3')*ParameterPV('AMa')**3+ParameterPV('a4')*ParameterPV('AMa')**4;

parameter T_c(months,hours);
*cell temperature, rear insulated cell
T_c(months,hours) = SolarInsolation(months,hours)*ParameterPV('E0')*exp(ParameterPV('aPV')+ParameterPV('b')*OtherLocationData('WindSpeed'))+ AmbientHourlyTemperature(months, hours);

parameter I_sc(months,hours);
I_sc(months,hours) = ParameterPV('I_sc0')*f1_AMa*solarinsolation(months,hours)*ParameterPV('E0')/ParameterPV('E0')*(1 + ParameterPV('alfa_Isc')*(T_c(months,hours) - ParameterPV('T0')));
* Original: I_sc(months,hours) = ParameterPV('I_sc0')*f1_AMa*(E_b*f2_AOI + ParameterPV('f_d')*E_diff(months,hours))*(1 + ParameterPV('alfa_Isc')*(T_c(months,hours) - ParameterPV('T0')));

parameter E_e1(months,hours);
E_e1(months,hours) = I_sc(months,hours)/(ParameterPV('I_sc0')*(1 + ParameterPV('alfa_Isc')*(T_c(months,hours) - ParameterPV('T0'))));

parameter E_e(months,hours);
*to be bigger than 0 even w/o solar insolation since E_e is used in log functions
E_e(months,hours) = (E_e1(months,hours)+abs(E_e1(months,hours)))/2+0.000000000001;

parameter I_mp(months,hours);
I_mp(months,hours) = ParameterPV('I_mp0')*(ParameterPV('c0')*E_e(months,hours) + ParameterPV('c1')*E_e(months,hours)**2)*(1 + ParameterPV('alfa_Imp')*(T_c(months,hours) - ParameterPV('T0')));

parameter delta(months,hours);
delta(months,hours) = ParameterPV('n')*ParameterPV('kBYq')*(T_c(months,hours)+273.15);

parameter V_oc(months,hours);
V_oc(months,hours)= ParameterPV('V_oc0') + ParameterPV('Ns')*delta(months,hours)*log(E_e(months,hours)) + ParameterPV('beta_Voc')*(T_c(months,hours) - ParameterPV('T0'));

parameter V_mp(months,hours);
V_mp(months,hours) = ParameterPV('V_mp0') + ParameterPV('c2')*ParameterPV('Ns')*delta(months,hours)*log(E_e(months,hours)) + ParameterPV('c3')*ParameterPV('Ns')*(delta(months,hours)*log(E_e(months,hours))*(-1))**2 + ParameterPV('beta_Vmp')*(T_c(months,hours) - ParameterPV('T0'));

parameter W_mp(months,hours) maximum power;
* Power = I*V
W_mp(months,hours) = I_mp(months,hours) * V_mp(months,hours);

parameter PVEfficiency(months,hours);
PVefficiency(months,hours) = W_mp(months,hours)/(ParameterPV('A')*(SolarInsolation(months,hours)*ParameterPV('E0')+ParameterSolarThermal('epsilon')));

*This avoids negative efficiencies
PVefficiency(months,hours)=(PVefficiency(months,hours)+abs(PVefficiency(months,hours)))/2;

*2013/05/31. Lenaig added a year index to "PVArea" and considered the total capacity available in the year considered.
positive variable PVArea(years);
Equation PVAreaEq(years);
         PVAreaEq(years)..
         PVArea(years) =E=TotalCapacityInYearY('PV',years)/ParameterTable ('PeakPVEfficiency', 'ParameterValue');

*2013/05/31. Lenaig added a year index and considered the total capacity available in the year considered.
Equation Electricity_PV_ConstraintEq(years,months,daytypes,hours);
      Electricity_PV_ConstraintEq(years,months,daytypes,hours)..
      Electricity_Photovoltaics(years,months,daytypes,hours)
      =E=
          TotalCapacityInYearY('PV',years)
          *
          PV_AC_Production(months,hours)
          ;
*      * SolarInsolation(months,hours)/ParameterTable ('PeakPVEfficiency', 'ParameterValue')*PVefficiency(months,hours);
* SB!!! changed it to include PVWatts data - the PVWatts data is in kWh/kW installed...
* ------------------

* -------------  Area constraint for PV and solar thermal  ---------------------------------------

*2013/05/31. Lenaig added a year index and considered the total capacities available in the year considered.
* capacities are peak outputs under lab conditions and not location specific
Equation AreaConstraintEq(years);
         AreaConstraintEq(years)..
         TotalCapacityInYearY('PV',years)/ParameterTable ('PeakPVEfficiency', 'ParameterValue')
         + TotalCapacityInYearY('solarthermal',years)/PeakSolarThermalEfficiency
         =L=
         ParameterTable ('MaxSpaceAvailablePVSolar',  'ParameterValue') ;

*Olivier : check for remaining space for PV
*2013/05/31. Lenaig added a year index to this variable.
variable RemainingSpacePVSolar(years);

*2013/05/31. Lenaig added a year index and considered the total capacities available in the year considered.
Equation RemainingSpacePVSolar_Eq(years);
         RemainingSpacePVSolar_Eq(years)..
         RemainingSpacePVSolar(years)
         =E=
         smax((months, hours),SolarInsolation (months, hours))
         * ParameterTable ('MaxSpaceAvailablePVSolar',  'ParameterValue')
         - ( TotalCapacityInYearY('PV',years)/ParameterTable ('PeakPVEfficiency',  'ParameterValue')
              + TotalCapacityInYearY('solarthermal',years)/PeakSolarThermalEfficiency );

* -------------

* -------------   Lifetime constraints for PV and solar thermal  -----------------------------------
*2013/05/31. Lenaig added new lifetime constraints for PV and solar thermal (set to 0 if no reinvestment after the lifetime is reached).
*            These constraints would probably not be used as the lifetime for PV and solar thermal is about 15-20 years or more
*            and it is not sure we want to minimize the building total energy cost over this period of time.
Heat_FromSolar.fx(years,months,daytypes,hours)$((OptionsTable('RenewInvestments','OptionValue')eq 0) And(years.val gt ContinuousInvestParameter('SolarThermal','lifetime')) ) = 0;
Electricity_Photovoltaics.fx(years,months,daytypes,hours)$((OptionsTable('RenewInvestments','OptionValue')eq 0) And(years.val gt ContinuousInvestParameter('PV','lifetime')) ) = 0;
ElectricityStorageStationaryOutput.fx(years,months,daytypes,hours)$((OptionsTable('RenewInvestments','OptionValue')eq 0) And(years.val gt ContinuousInvestParameter('ElectricStorage','lifetime')) ) = 0;

* -------------  Demand Response Constraints  ---------------------------------------
*2013/03. Lenaig added a year index to all equations in this section.
Equation DemandResponseEq(DemandResponseType,years,months,daytypes,hours);
DemandResponseEq(DemandResponseType,years,months,daytypes,hours)..
DemandResponse(DemandResponseType,years,months,daytypes,hours)=l= DemandResponseParameters(years,DemandResponseType,'MaxContribution')*Load(years,'electricity-only',months,daytypes,hours);

Equation TimeLimitDemandResponseEq(DemandResponseType,years);
TimeLimitDemandResponseEq(DemandResponseType,years)..
sum((months,daytypes,hours),demandResponseOnOff(DemandResponseType,years,months,daytypes,hours)*NumberOfDays (months, daytypes))=l=DemandResponseParameters1 (DemandResponseType,'MaxHours') ;

Equation DemandResponseHeatingEq(DemandResponseType,years,months,daytypes,hours);
DemandResponseHeatingEq(DemandResponseType,years,months,daytypes,hours)..
DemandResponseHeating(DemandResponseType,years,months,daytypes,hours)=l= DemandResponseParametersHeating(years,DemandResponseType,'MaxContribution')*Load(years,'space-heating',months,daytypes,hours);

Equation TimeLimitDemandResponseHeatEq(DemandResponseType,years);
TimeLimitDemandResponseHeatEq(DemandResponseType,years)..
sum((months,daytypes,hours),demandResponseOnOffHeating(DemandResponseType,years,months,daytypes,hours)*NumberOfDays (months, daytypes))=l=DemandResponseParametersHeating1 (DemandResponseType,'MaxHours');

***************************************************************************************
*--------------------   Static Switch   --------------------------
***************************************************************************************

PARAMETER AvailabilitySolarDay (months);
AvailabilitySolarDay(months)=sum(hours,SolarInsolation (months, hours))/24 ;
PARAMETER AvailabilitySolar;
AvailabilitySolar=sum(months,AvailabilitySolarDay(months))/12 ;

*2013/03. Lenaig added a year index to 'AvailabilityElectricStorage' parameter.
Parameter AvailabilityElectricStorage(years);
AvailabilityElectricStorage(years)=    ElectricityStorageStationaryParameter('MaxDischargeRate')*(24-(1/ElectricityStorageStationaryParameter('MaxChargeRate')))/24;
* Please note that the definition of AvailabilityElectricStorage assumes one charging / discharging cycle per day.

Parameter AvailabilityDERUnits;
AvailabilityDERUnits=ParameterTable ('ReliabilityDER', 'ParameterValue')

*2013/05/31. Lenaig modified this equation to consider the total capacities available in the year considered.
Equation StaticSwitchEq(years);
    StaticSwitchEq(years)..
       sum(AvailableTECHNOLOGIES,
             sum(years_counter $(years_counter.val le deropt(AvailableTechnologies,'lifetime')),
                  DER_Investment(AvailableTECHNOLOGIES,years - (years_counter.val-1))
                  * AvailabilityDERUnits * deropt(AvailableTECHNOLOGIES, 'SprintCap')) )
       + AvailabilitySolar * TotalCapacityInYearY ('PV',years)
       + TotalCapacityInYearY ('FlowBatteryPower',years)
       + AvailabilityElectricStorage(years) * TotalCapacityInYearY ('ElectricStorage',years)
       =g= switchsize ;

* --------------------------------------------------------------------------------------------------------------------------

* Solver Statement
MODEL CUSTADOP_ZNEB  /all/;

MODEL CUSTADOP_NO_ZNEB /
* continuouspurchaseconstrainteq,
 electricfixedcost_eq,
 standbycosteq,
 electricpurchtoueq,
* electrictoucostbytou_eq,
 electrictoucost_eq,
 electricconsumption_eq,
 maxdemandmonthlyeq,
 electricdemandcostbytype_eq,
 electricdemandcost_eq,
 maxdemanddailyeq,
 dailydemandchargeeq,
 electricdailydemandcost_eq,
 electricCO2_eq,
 electricCO2cost_eq ,
 annualelectricCO2_eq,
 electrictotalcost_eq,
 annualelectriccosteq,
 annualelectricconsumption_eq,
 ng_fordg_eq,
 ngfordgconsumption_eq,
 ngforheatconsumption_eq,
 ngforngchillconsumption_eq,
 ngtotalconsumption_eq,
 CO2fromder_eq,
 CO2fromnonder_eq,
 CO2fromchillers_eq,
 CO2fromng_eq,
 ngfordgcost_eq,
 ngforheatcost_eq,
 ngforngchillcost_eq,
 ngfixedcost_eq,
 ngCO2cost_eq,
 ngtotalcost_eq,
 annualngcost_eq,
 annualngconsume_eq,
 annualngCO2der_eq,
 annualngCO2nonder_eq,
 annualngCO2chillers_eq,
 annualngCO2_eq,
 otherfuelconsumptioneq,
 otherfuelcosteq,
 annualotherfuelcosteq,
 upfrontcapitalcost_disctech_eq,
 upfrontcapitalcost_ngchill_eq,
 upfrontcapitalcost_conttech_eq,
 upfrontcapitalcost_switch_eq,
 upfrontcapitalcost_eq,
 annualizedcapcost_disctech_eq,
 annualizedcapcost_conttech_eq,
 annualizedcapcost_ngchill_eq,
 annualizedcapcost_switch_eq,
 annualizedcapcost_eq,
 fixedmaintcost_disctech_eq,
 fixedmaintcost_conttech_eq,
 fixedmaintcost_ngchill_eq,
 fixedmaintcost_eq,
 variablemaintcost_disctech_eq,
 variablemaintcost_ngchill_eq,
 variablemaintcost_conttech_eq,
 variablemaintcost_eq,
 dercost_eq,
 dertotalcost_eq,
 totalenergycosts_eq,
 totalannualCO2_eq,
*2013/03. Lenaig added new equations.
 allperiodtotalenergycosts_eq,
 allperiodtotalCO2_eq,
*
 MultiObjective_eq,
 der_currentlyoperatingeq,
 der_currentlyoperatingmincapeq,
 der_currentlyoperatingmaxcapeq,
 ngchill_maxcapacity_eq,
 absorptioncoolinglimiteq,
 sprintamount_eq,
 sprintlimit_eq,
 electricityprovidedeq,
 electricitystoredstationaryeq,
 Electricity_Generation_TechnologyEq,
 flowbatterystoredeq,
 electricityconsumedeq,
 electricitybalanceeq,
 electricity_generationeq,
 electricity_photovoltaicseq,
 electricity_pv_constrainteq,
*SB!!! added this constraint to constrain the amount of onsite generation possible
 OnsiteGenerationConstraint_Eq,
 electricitystoragestationaryinputeq,
 flowbatteryinputeq,
 electricity_fromstationarybatteryeq,
 electricity_fromflowbatteryeq,
 electricitystoragestationarylosseseq,
*2013/02/22. Lenaig added a new equation to represent battery degradation.
 electricitystoragestationarycapacityeq,
 flowbatterylosseseq,
 electstoragestationarychargingrateeq,
 electstoragestationarydischargingrateeq,
 electricitystoragestationaryconstrainteq,
 electricitystoragestationaryconstraint2eq,
 flowbatterychargingrateeq,
 flowbatterydischargingrateeq,
 flowbatterystorageconstrainteq,
 flowbatterystorageconstraint2eq,
 coolingprovisioneq,
 electriccoolingeq,
 coolingbyngchill_eq,
 ng_forngchill_eq,
 absorptioncoolingeq,
* heatprovidedeq,
 heatstoredeq,
* heatconsumedeq,
* heatbalanceeq,
 HT_HeatProvided_Eq,
 LT_HeatProvided_Eq,
 HT_HeatConsumed_Eq,
 LT_HeatConsumed_Eq,
 HT_HeatBalance_Eq,
 LT_HeatBalance_Eq,
 heat_fromngeq,
 heat_fromdg_eq,
 Heat_fromNO_SGIP_DG_Eq,
 Heat_from_SGIP_DG_Eq,
 heat_fromsolareq,
 SolarThermalAreaEq,
 PVAreaEq,
 heat_fromstorageeq,
 heat_fromngchill_eq,
 heatstorageinputeq,
 heatstoragelosseseq,
 heatforspaceheatingeq,
* heatforwaterheatingeq,
 heatstorageconstraint1eq,
 heatstorageconstraint2eq,
 heatstorageconstraint3eq,
 maximumannualhourseq,
 annualdgSGIPelectricityeq,
 annualdgSGIPrecheateq,
 annualngfordgSGIPeq,
*2013/03. Lenaig added a new equation.
 allperiodsavingseq,
 paybackconstrainteq,
 ngforder_electricproductioneq,
 ngforder_consumedenergyeq,
 electricity_annualsaleseq1,
 electricity_annualsaleseq2,
 electricity_totalsaleseq,
 staticswitcheq,
 AreaConstraintEq,
 DemandResponseEq,
 DemandResponseonOffEq,
 TimeLimitDemandResponseEq,
 DemandResponseonOffHeatingEq,
 DemandResponseCostsHeatingEq,
 DemandResponseHeatingEq,
 TimeLimitDemandResponseHeatEq,
 RefrigerationByAbsorptionEq,
 RefrigerationProvisionEq,
 ElectricRefrigerationEq,
 AbsorptionRefrigerationEq,
 ElectricSalesEq,
 PurchaseEq,
 SaleEq,
* NetMeteringEq,
 CapacityConstraintEq,
* ElectricityStorageSizeConstraint_Eq
 DemandResponseCostsEq,
 EitherChargeXOrDischarge_Eq,
 XORDischargeEVs_Eq,
 EitherChargeEVs_Eq,
 ElectricityStoredEVsEq,
 ElectricityStoredEVsLowerBoundaryEq,
 ElectricityStoredEVsUpperBoundaryEq,
 ElectricityStorageEVsInputEq,
 Electricity_FromEVsEq,
 ElectStorageEVsChargingRateEq,
 ElectStorageEVsDischargingRateEq,
 ElectricVehicleBilling_Eq,
 NetEVOutput_Eq,
 EV_Payment_Eq,
 Yearly_EV_Payment_Eq,
 Yearly_EV_Payment_Eq2,
 Daysinthisyear_Eq,
 MicrogridBenefit_Eq,
 EnergyprocessedEVsHourly_Eq,
 EnergyprocessedEVsMonthly_Eq,
 EnergyprocessedEVsYearly_Eq,
 YearlyBatteryDegradationEVs_Eq,
 ElectricityStorageEVsLossesEq,
 FlowBatteryChargingEq,
 FlowBatteryDischargingEq,
 ElecStationaryChargingEq,
 ElecStationaryDischargingEq,
 DiscreteElecStorageEq,
 EV_connection_payment_Eq,
 EVsElectricityFromHome_without_eff_Eq,
 CO2fromEVsHomeCharging_Eq,
 RemainingSpacePVSolar_Eq,
 EHToCar_Eq1,
 EHToHome_Eq1,
 EHToCar_Eq2,
 EHToHome_Eq2,
 EVsElectricityFromHome_without_eff_Eq2,
 EVsElectricityFromHome_Eq,
 EVHomeElectricityCO2Cost_Eq,
 NGforNGOnlyLoadConsumption_Eq,
 NGforNGOnlyLoadCost_Eq,
 CO2FromNGOnlyLoad_Eq,
 AnnualNGCO2NGOnly_Eq,
 LoadSchedulingEq_1,
 LoadSchedulingEq_2,
 LoadSchedulingEq_3,
 LoadSchedulingEq_4,
 UpfrontCapitalCostBoreHole_Eq1,
 UpfrontCapitalCostBoreHole_Eq2,
 ElectricityForHeatPumps_Eq,
 ElectricityForASHeatPump_Eq,
 ElectricityForGSHeatPump_Eq,
 Heat_FromHeatPumps_Eq,
 HeatingFromASHeatPump_Eq,
 HeatingFromGSHeatPump_Eq,
 CoolingByHeatPumps_Eq,
 CoolingFromASHeatPump_Eq,
 CoolingFromGSHeatPump_Eq,
 ASHP_Heat_Or_Cool_Eq,
 ASHP_Heating_max_Eq,
 ASHP_Cooling_max_Eq,
 GSHP_Heat_Or_Cool_Eq,
 GSHP_Heating_max_Eq,
 GSHP_Cooling_max_Eq,
 GSHP_Annual_Balance_Eq,
 CapacityConstraintFeedinEq,
 Annual_Heat_from_CHP_Eq,
 Minimum_Heat_Recovery_FeedIn_Eq,
 ng_forCHPdg_eq,
 ngforCHPdgconsumption_eq,
 LHV_Efficiency_Constraint_Feedin_Eq,
 HHV_Efficiency_Constraint_Feedin_Eq,
 SGIP_Thermal_Efficiency_Req_Eq,
 SGIP_LHV_Requirement_Eq,
 SGIP_HHV_Requirement_Eq,
 SGIP_HHV_Electric_Requirement_Eq,
 SGIP_Sales_Limit_Eq,
 SGIP_Max_CHP_Capacity_Eq,
 PBI_Payment_Eq,
 PBI_NPV_Eq,
*2013/05/31. Lenaig put the two following PBI equations in text mode.
* PBI_EAC_Eq,
* PBI_Incentive_Eq,
 Annual_Electricity_from_CHP_Eq,
 ElectricSalesLimitEq,
*MG
 FuelCellRunsWholeDay_Eq,
*2013/05/31. Lenaig added a new equation.
 DefineTotalCapacity_ContTech_Eq
*2014/10/25 José Capacity payment.
ContractCapacity_Eq
ContractCost_Eq
*2014/10/14 José tariff for the Spanish case
lin_fixed1
lin_fixed2
lin_fixed3
fixedtarif

CapacityBidRegulationUpBatteryEq
CapacityBidRegulationDownBatteryEq
*CapacityBidRegulationUpBatteryEq2
*CapacityBidRegulationDownBatteryEq2
EnergyFlowFromBatteryToISOEq
EnergyFlowFromISOToBatteryEq
Electricity_FromStationaryBatteryEq2
ElectricityForStorageStationaryEq
YearlyBatteryDegradationEq
*BatteryCycleLifeEq
RegulationCapacityUpCostEq
RegulationCapacityDownCostEq
RegulationEnergyCost1Eq
RegulationEnergyCost2Eq
RegulationTotalCostEq

*SB!!! Added the above equations as per Jose Pablo's formulation. I've removed the equations from being active for now

/;

CUSTADOP_no_ZNEB.optfile = 1;
CUSTADOP_ZNEB.optfile = 1;

option MIP=CPLEX;
CUSTADOP_no_ZNEB.holdfixed = 1 ;
if ((OptionsTable('MinimizeCO2','OptionValue')  eq 0 ),
   if ((OptionsTable('ZNEB','OptionValue')  eq 0 ),
       if ((OptionsTable('MultiObjective','OptionValue') eq 0 ),
          SOLVE CUSTADOP_no_ZNEB USING MIP MINIMIZING AllPeriodTotalEnergyCosts;
       else
          SOLVE CUSTADOP_no_ZNEB USING MIP MINIMIZING MultiObjective;
       );
   else
       SOLVE CUSTADOP_ZNEB USING MIP MINIMIZING AllPeriodTotalEnergyCosts);
else
   if ((OptionsTable('ZNEB','OptionValue')  eq 0 ),
      SOLVE CUSTADOP_no_ZNEB USING MIP MINIMIZING AllPeriodTotalCO2;
   ELSE
      SOLVE CUSTADOP_ZNEB USING MIP MINIMIZING AllPeriodTotalCO2);
);


parameter Electricity_FromStationaryBattery(years,months,daytypes, hours);
Electricity_FromStationaryBattery(years,months,daytypes, hours)=
         Electricity_FromstationaryBattery_Onsite.l(years,months,daytypes,hours)
         +
         Electricity_FromstationaryBattery_Export.l (years,months,daytypes,hours);
Parameter AnnualElectricity_Purchase(years) Electricity_Purchase summed;
AnnualElectricity_Purchase(years) = sum((months,daytypes,hours),Electricity_Purchase.l(years,months, daytypes,hours));
Parameter TotalUpfrontCapitalCost yearly upfront capital cost summed;
TotalUpfrontCapitalCost = sum(years, UpfrontCapitalCost.l(years));
Parameter SimplePayback simple payback calculation;
SimplePayback = 0;
SimplePayback$(AllPeriodSavings.l gt 0) = TotalUpfrontCapitalCost/AllPeriodSavings.l;
*SB!!! Calculated simple payback - note, I use all period savings. this is fine because we're using one year, but wouldn't be cool for more years
display AnnualElectricity_Purchase;
*2013/05/31. Lenaig added a year index to this equation.
InsCap(years) = sum (AvailableTECHNOLOGIES, DER_Investment.l(AvailableTECHNOLOGIES,years) * deropt (AvailableTECHNOLOGIES, 'maxp'));
*2013/05/31. Lenaig added a year index to this equation.
InsCHPCap(years) = sum(AvailableCHPTechnologies, DER_Investment.l(AvailableCHPTechnologies,years) * deropt (AvailableCHPTechnologies, 'maxp'));

*2013/03. Lenaig added a year index to the following variables reported as outputs.

AllPeriodElectGen =sum((years,months,daytypes,hours),(Electricity_Generation.l(years,months,daytypes,hours)+Electricity_FromStationaryBattery(years,months,daytypes,hours)+Electricity_photovoltaics.l(years,months,daytypes,hours))*NumberOfDays(months,daytypes));

* Calculation of all period Electricity-Only Demand (kWh)
AllPeriodElectD = sum((years,months,daytypes,hours),load(years,'electricity-only',months,daytypes,hours)*NumberOfDays(months,daytypes));

* Calculation of all period Cooling Load (kWh)
AllPeriodCoolD = sum((years,months,daytypes,hours),load(years,'cooling',months,daytypes,hours)*NumberOfDays(months,daytypes));

* Calculation of all period Refrigeration Load (kWh)
AllPeriodRefrD = sum((years,months,daytypes,hours),load(years,'refrigeration',months,daytypes,hours)*NumberOfDays(months,daytypes));

* All period Natural Gas-Only Demand (kWh)
AllPeriodNatGasOnlyD=sum((years,months,daytypes,hours), (Load(years,'naturalgas-only',months,daytypes,hours))*NumberOfDays(months,daytypes));

* All period Space Heating Demand (kWh)
AllPeriodSpaceD=sum((years,months,daytypes,hours), (Load(years,'space-heating',months,daytypes,hours))*NumberOfDays(months,daytypes));

* All period Water Heating Demand (kWh)
AllPeriodWaterD=sum((years,months,daytypes,hours), (Load(years,'water-heating',months,daytypes,hours))*NumberOfDays(months,daytypes));

AllPeriodNGforHeatConsumption=sum((years,months), NGforHeatConsumption.l(years,months));

AllPeriodNGChillers =sum((years,months,daytypes,hours),NG_ForNGChill.l(years,months,daytypes,hours)*NumberOfDays(months,daytypes));

* All period Gas Requirement for DER (kWh)
AllPeriodGasDER=sum((years,months), NGforDGConsumption.l(years,months));

* All period Gas Costs for DER ($)
AllPeriodGasDERCosts=sum((years,months), NGforDGCost.l(years,months));

* All period total energy consumption without diesel
AnnualTotalEnergyConsumption (years) = AnnualElectricConsumption.l(years)/ParameterTable('macroeff','ParameterValue') + AnnualNGConsume.l(years);
AllPeriodTotalEnergyConsumption = sum(years,AnnualTotalEnergyConsumption (years));
display AllPeriodTotalEnergyConsumption;

* Total system efficiency (on-site & off-site), without NG-only load
SystemEfficiency =(AllPeriodSpaced+AllPeriodWaterD+AllPeriodElectD+AllPeriodCoolD+AllPeriodRefrD) /  (AllPeriodTotalEnergyConsumption - sum((years,months),NGforNGOnlyLoadConsumption.l(years,months)));

* Total system efficiency (on-site & off-site), with NG-only load
SystemEfficiency2 =(AllPeriodSpaced+AllPeriodWaterD+AllPeriodNatGasOnlyD+AllPeriodElectD+AllPeriodCoolD+AllPeriodRefrD) /  AllPeriodTotalEnergyConsumption;

AllPeriodEnergyD = AllPeriodElectD + AllPeriodCoolD + AllPeriodRefrD+ AllPeriodNatGasOnlyD + AllPeriodSpaceD + AllPeriodWaterD;

* report of SGIP CHP efficiency
CHPSGIPEfficiency =sum(years,(AnnualDGSGIPElectricity.l(years) + AnnualDGSGIPRecHeat.l(years))) / sum(years,AnnualNGforDGSGIP.l(years));

file results /C:\Users\Scott\Dropbox (Personal)\gamsdir\projdir\DER-CAM\OutputData_NY_RTP.csv/ ;

results.pc = 5;
results.pw = 255;
put results;
put '+++++++++Summary+++++++++'/;
results.nd=4;
put 'SimplePayback (= years for payback for 1 year of investments) ($)', SimplePayback /;
put /;
put 'Goal Function Value (= Total All Period Considered Energy Costs minus Electricity Sales) ($)', AllPeriodTotalEnergyCosts.l /;
put /;
put 'year','Sum';
     loop (years, put years.tl); put /;
put 'Total Energy Costs - Electricity Sales . Year($)', AllPeriodTotalEnergyCosts.l;
     loop (years, put TotalEnergyCosts.l(years)); put /;
put 'Installed Capacity of discrete technologies (kW)', sum(years,inscap(years));
     loop (years, put inscap(years)); put /;
put 'Installed CHP Capacity of discrete technologies (kWe)', sum(years,inschpcap(years));
     loop (years, put inschpcap(years));  put /;
*   , put$((inschpcap gt 1000) and (SGIPOptions('enableSGIP','OptionValue') eq 1)) '»»»» WARNING «««« INSTALLED CHP CAPACITY EXCEEDS 1MW! CHECK SGIP INCENTIVES! »»»» WARNING ««««', put /
put 'Installed Battery Capacity (kWh)', sum(years,CapacityAddedInYearY.l('ElectricStorage',years));
     loop (years, put CapacityAddedInYearY.l('ElectricStorage',years)); put /;
put 'Installed Flow Battery Capacity (kWh)', sum(years,CapacityAddedInYearY.l('FlowbatteryEnergy',years));
     loop (years, put CapacityAddedInYearY.l('FlowbatteryEnergy',years)); put /;
put 'Installed Flow Battery Power (kW)', sum(years,CapacityAddedInYearY.l('FlowbatteryPower',years));
     loop (years, put CapacityAddedInYearY.l('FlowbatteryPower',years)); put /;
put 'Installed Capacity: Photovoltaic (kWpeak)', sum(years,CapacityAddedInYearY.l('PV',years));
     loop (years, put CapacityAddedInYearY.l('PV',years)); put /;
put 'Size of Photovoltaic (m^2)', smax(years,PVArea.l(years));
     loop (years, put PVArea.l(years)); put /;
put 'Installed Capacity: Solar Thermal (kWpeak)', sum(years,CapacityAddedInYearY.l('solarthermal',years));
     loop (years, put CapacityAddedInYearY.l('solarthermal',years)); put /;
put 'Size of Solar Thermal (m^2)', smax(years,SolarThermalArea.l(years));
     loop (years, put SolarThermalArea.l(years)); put /;
put 'Installed Capacity: Air Source Heat Pump (kW)', sum(years,CapacityAddedInYearY.l('AirSourceHeatPump',years));
     loop (years, put CapacityAddedInYearY.l('AirSourceHeatPump',years)); put /;
put 'Installed Capacity: Ground Source Heat Pump (kW)', sum(years,CapacityAddedInYearY.l('GroundSourceHeatPump',years));
     loop (years, put CapacityAddedInYearY.l('GroundSourceHeatPump',years)); put /;
put 'Electricity Generated Onsite over all the period of time considered(kWh)', AllPeriodElectGen/
put 'Electricity Sales . Year(kWh)', sum(years, TotalElectricitySales.l(years)),
     loop (years, put TotalElectricitySales.l(years)); put /;
put 'Recommended Static Switch Size', switchSize; put /;
put 'Installed EV1 Battery Capacity (kWh)', sum(years,CapacityAddedInYearY.l('EVs1',years)) ;
     loop (years, put CapacityAddedInYearY.l('EVs1',years)); put /;
put 'Battery Degradation Cost'/;
put 'YearlyBattery Degradation Cost (€)', sum((years),YearlyBatteryDegradation.l(years)) ;
     loop (years, put YearlyBatteryDegradation.l(years)); put /;
put 'Regulation batteries Costs and Sales'/;
put 'Regulation Capacity Up Sale (€)', sum((years,months),RegulationCapacityUpCost.l(years,months)) ;
     loop (years, put sum(months,RegulationCapacityUpCost.l(years,months))); put /;
put 'Regulation Capacity Down Sale (€)', sum((years,months),RegulationCapacityDownCost.l(years,months)) ;
     loop (years, put sum(months,RegulationCapacityDownCost.l(years,months))); put /;
put 'Regulation Energy Sale (€)', sum((years,months),RegulationEnergyCost1.l(years,months)) ;
     loop (years, put sum(months,RegulationEnergyCost1.l(years,months))); put /;
put 'Regulation Energy Cost (€)', sum((years,months),RegulationEnergyCost2.l(years,months)) ;
     loop (years, put sum(months,RegulationEnergyCost2.l(years,months))); put /;
put 'Regulation Total Cost (€)', sum((years,months),RegulationTotalCost.l(years,months));
     loop (years, put sum(months,RegulationTotalCost.l(years,months))); put /;
*Sb!!! included regulation costs, etc. in the output file.

put 'contract capacity kw',; put /;
put
loop (years, put years.tl ,
loop (months, put  ContractCapacity.l(years,months));
put /;
);
$ontext
*put 'Fraction of electricity generated onsite (without absorption chiller offset)', FractionElectricityOnsite/
*put 'Effective Fraction of electricity generated onsite (includes absorption chiller offset)', EffectiveFractionElecOnsite/
*put 'Heating Load Offset by CHP (kWh/a)',AnnualHeatingOffsetDG/
*put 'Cooling Load Offset by CHP (kWh/a)', AnnualAbsChillOffsetDG/
$offtext
put 'Utility Electricity Consumption . Year(kWh)',sum(years,AnnualElectricConsumption.l(years)),
    loop (years, put AnnualElectricConsumption.l(years)); put /;
put 'Utility Natural Gas Consumption . Year(kWh)',sum(years,AnnualNGConsume.l(years)),
    loop (years, put AnnualNGConsume.l(years)) ; put /;
put 'Total Fuel Consumption (onsite plus fuel for macrogrid electricity. Without diesel) . Year (kWh)',AllPeriodTotalEnergyConsumption;
    loop (years, put AnnualTotalEnergyConsumption(years)) ; put /;
put 'All Period Savings ($)', AllPeriodSavings.l /
put 'UpfrontCapitalCost ($)', sum(years,UpfrontCapitalCost.l(years)),
    loop (years, put UpfrontCapitalCost.l(years)); put /;
put 'UpfrontCapitalCost Discrete Tech ($)', sum(years,sum(AvailableTechnologies,UpfrontCapitalCost_DiscTech.l(AvailableTechnologies,years))),
    loop (years, put sum(AvailableTechnologies,UpfrontCapitalCost_DiscTech.l(AvailableTechnologies,years))); put /;
put 'UpfrontCapitalCost NG Chillers($)', sum(years,sum(NGChillTech,UpfrontCapitalCost_NGChill.l(NGChillTech,years))),
    loop (years, put sum(NGChillTech,UpfrontCapitalCost_NGChill.l(NGChillTech,years))); put /;
put 'UpfrontCapitalCost Static Switch($)', sum(years,UpfrontCapitalCost_StaticSwitch.l(years)),
    loop (years, put UpfrontCapitalCost_StaticSwitch.l(years));

put //'+++++++++Efficiencies and Fractions+++++++++'/;
put 'Efficiency of Entire Energy Utilization (Onsite and Purchase), without NG-only load',put SystemEfficiency,'  Efficiency of Entire Energy Utilization (Onsite and Purchase), with NG-only load',SystemEfficiency2/;
put 'Achieved SGIP CHP efficiency',put CHPSGIPEfficiency/;
$ontext
put NGSystemEfficiency.ts ,NGSystemEfficiency/;
put NGFERCEfficiency.ts,  NGFERCEfficiency/;

* put 'Fraction of Energy Demand Met On-Site',put PctEnergyOnSite/;

*put 'Fraction of Electricity-Only End-Use Met by On-Site Generation',put PctElectOnSite/;
*put 'Fraction of Cooling End-Use Met by On-Site Generation',put PctCoolOnSite/;
*put 'Fraction of Cooling End-Use Met by Absorption Chiller',put PctCoolAbChill/;
*put 'Fraction of Cooling End-Use Met by Natural Gas',put PctCoolGas/;
*put 'Fraction of Space-Heating End-Use Met by CHP',put PctSpaceCHP/;
*put 'Fraction of Space-Heating End-Use Met by Natural Gas',put PctSpaceGas/;
*put 'Fraction of Water-Heating End-Use Met by CHP',put PctWaterCHP/;
*put 'Fraction of Water-Heating End-Use Met by Natural Gas',put PctWaterGas/;
*put 'Fraction of Natural Gas-Only End-Use Met by Natural Gas',put PctNaturalGasOnlyGas;

put //;
results.nd=0;
put '+++++++++Model 0ptions+++++++++' /
loop (ModelOption, put ModelOption.tl, OptionsTable (ModelOption
, 'OptionValue')/);
put / '+++++++++Model Parameters+++++++++'/;
results.nd=4;
loop (ParameterOption, put ParameterOption.tl, ParameterTable (ParameterOption, 'ParameterValue')/);
put /;
results.nd = 0;
put '+++++++++Installed Units for each Technology++++++++++++'/
put 'Available Technologies are technologies with MaxAnnualHour values greater than 0'/;
put 'in table GenConstraints in folder Technology Data'/;
put 'Discrete technologies as Microturbines, Fuel Cells, etc.'/;
loop (TECHNOLOGIES, put TECHNOLOGIES.tl,
     loop(years, put DER_Investment.l(TECHNOLOGIES,years)); put /;
     )
put /;
put 'Continues technologies as PV, Solar thermal, storage, etc.'/;
put 'Installed capacity; For storage technologies the capacity is expressed in kWh' /;
put 'For PV, solar thermal, FlowBatteryPower and absorption chillers / refrigeration the capacity is expressed in kW'/;
loop (ContinuousInvestType   , put ContinuousInvestType.tl ,
     loop(years, put CapacityAddedInYearY.l (ContinuousInvestType,years)); put /;
     );
put /;

results.nd = 4;
put '+++++++++Reports on an Annual Basis+++++++++'/
put 'Loads (All Numbers in kWh)'/
put '1 kWh = 3412.14 BTU'//;
put 'AllPeriod Electricity-Only Load Demand', AllPeriodElectD/;
put 'AllPeriod Cooling Load Demand',AllPeriodCoolD/;
put 'AllPeriod Refrigeration Load Demand',AllPeriodRefrD/;
put 'AllPeriod Space Heating Load', AllPeriodSpaceD/;
put 'AllPeriod Water Heating Load', AllPeriodWaterD/;
put 'AllPeriod Natural Gas-Only Load',AllPeriodNatGasOnlyD/;
put 'AllPeriod Total Energy Demand (kWh)',put AllPeriodEnergyD;
put //'Generation (All Numbers in kWh)'/
put '1 kWh = 3412.14 BTU'//;
put 'Total AllPeriod Electricity Generation On Site', AllPeriodElectGen/;
$ontext
*put 'Annual Electricity Generation On-Site to Meet Electricity-Only Load', AnnElectSelfGen/;
*put 'Annual Electricity Generation On-Site to Meet Cooling Load', AnnCoolSelfGen/;
put 'Annual On-Site Production of Energy (Electricity + Utilized Waste Heat + Natural Gas) (kWh)',put AnnOnSiteEnergy;
$offtext
put //'Purchase (All Numbers in kWh)'/
$ontext
*put 'Annual Electricity Purchase to Meet Electricity-Only Load', AnnElectPurch/;
*put 'Annual Electricity Purchase to Meet Cooling Load', AnnCoolPurch/;
put //'Natural Gas (All Numbers in kWh)'/
*put 'Annual Natural Gas-Only Load which is met by Natural Gas',AnnNatGasOnlyGas/;
*put 'Annual Cooling Load which is met by Natural Gas,'AnnCoolGas/;
$offtext
put 'AllPeriod Natural Gas Consumption fo Space Heating and Water Heating', AllPeriodNGforHeatConsumption/;
$ontext
$offtext
put //'CHP (All Numbers in kWh)'/
$ontext
*put 'Annual Cooling Load which is met by Absorption Chiller', AnnAbChill/;
*put 'Annual Load of Water Heating which is met by CHP', AnnWaterCHP/;
*put 'Annual Load of Space Heating which is met by CHP',AnnSpaceCHP/;
$offtext
put /'Energy Carriers'/
put 'AllPeriod DER Natural Gas Purchases (kWh)', AllPeriodGasDER/;
put 'AllPeriod NON DER Natural Gas Purchases (kWh)', (AllPeriodNGforHeatConsumption + AllPeriodNatGasOnlyD)/;
put 'AllPeriod Natural Gas Purchases for Chillers (kWh)', AllPeriodNGChillers/;
put 'AllPeriod Grand Total Gas Purchase (kWh/a)',sum(years,AnnualNGConsume.l(years))/;
* Electric
put 'AllPeriod Natural Gas Costs for DER ($)', AllPeriodGasDERCosts /;
put 'AllPeriod Total Gas Costs (volumetric & fixed costs)($)', sum(years,AnnualNGCost.l(years))/;
put 'AllPeriod Costs Electricity ($)', sum (years,AnnualElectricCost.l(years))/;

$ontext
put 'Annual Net Diesel Purchase (kWh)', AnnNetDieselPe/;
put 'Annual Diesel Bill ($)', AnnDieselBill;

$offtext
put //'Emissions'/;
put /;
loop (years,put years.tl /;
put 'Annual On-site CO2 Emissions from Natural Gas for DER (kgCO2)',AnnualNGCO2DER.l(years)/;
put 'Annual On-site CO2 Emissions from Natural Gas for Space Heating & Hot Water (kgCO2)',AnnualNGCO2NonDER.l(years)/;
put 'Annual On-site CO2 Emissions from Natural Gas for Chillers (kgCO2)',AnnualNGCO2Chillers.l(years)/;
$ontext
put 'Annual On-site CO2 Emissions from Diesel DER (kg)',AnnCO2OnSiteDERDiesel/;
$offtext
put 'Annual On-site CO2 Emissions from all Natural Gas uses (kgCO2)',AnnualNGCO2.l(years)/;
put 'Annual Off-site CO2 Emissions (Macrogrid) (kgCO2)', AnnualElectricCO2.l(years)/;
put 'Annual CO2 Emissions (Grand Total) (kgCO2)'TotalAnnualCO2.l(years)/;
);

put //'+++++++++Detailed Analysis+++++++++'//
put //'+++++++++Stationary Storage+++++++++'//
*2015/01/19 SB!!! changed variable order from Electricity_FromStationaryBattery, ElectricityStorageStationaryOutput, ElectricityStorageStationaryInput, ElectricityStoredStationary, ElectricityStorageStationaryLosses, ElectricitySorageStationaryCapacity to Capacity,Stored,Output,Input,Losses,_From,FromStaToBuil,FromStaToISO,For,ForStaFromBuil,ForStaFromISO
*Sb!!! defined the output as the sum of export and import

put // 'Remaining capacity of Stationary Battery - Consequence of battery degradation (All numbers in kW)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/

loop (years,put years.tl /;
   put /;
     loop (months, put months.tl,
         put ElectricityStorageStationaryCapacity.l (years,months)
         put /
     );
);

put // 'Electricity Stored in Stationary Batteries at each Hour (All numbers in kW)' /
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours,
            put (ElectricityStoredStationary.l (years,months,daytypes,hours) ) )
            put /
           )
      )
);

put // 'Capacity bid regulataion-up at each Hour (All numbers in kW)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (CapacityBidRegulationUpBattery.l (years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);

put // 'Capacity bid regulation-down at each Hour (All numbers in kW)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (CapacityBidRegulationDownBattery.l (years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);

put // 'Electricity Output from Stationary Battery (All numbers in kW)'/
put 'Information: Useable electricity output from battery - electricity provided by the battery' /
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (Electricity_FromStationaryBattery(years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);

put // 'Electricity Input to Stationary Battery (All numbers in kWh)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (ElectricityStoragestationaryInput.l (years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);

put // 'Electricity Lost due to self-discharge in Stationary Battery  (All numbers in kW)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (ElectricityStoragestationaryLosses.l (years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);


put // 'Energy flow from Stationary Storage to Building (All numbers in kWh)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (EnergyFlowFromStationaryStorageToBuilding.l (years,months,daytypes,hours)))
                    put /
                    )
          )
     ;
);

put // 'Energy flow from Stationary Storage to ISO (All numbers in kWh)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (EnergyFlowFromBatteryToISO.l (years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);

put // 'Electricity Provided by the System to the Batteries at each Hour (All numbers in kW)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (ElectricityForStorageStationary.l (years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);

put // 'Energy flow from building to Stationary Storage at each Hour (All numbers in kWh)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (EnergyFlowFromBuildingToStationaryStorage.l (years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);

put // 'Energy flow from ISO to Stationary Storage at each Hour (All numbers in kWh)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (EnergyFlowFromISOToBattery.l (years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);


put //'+++++++++Demand Response+++++++++'/
put 'Electricity Measures'/
loop (years,put years.tl /;

put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'//
put 'Low measueres (All numbers in kW)' //
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put DemandResponse.l('low',years,months,daytypes,hours)
                 ) ;
            put /;
            );
     );

put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'//
put 'Mid measueres (All numbers in kW)' //
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put DemandResponse.l('mid',years,months,daytypes,hours)
                 ) ;
            put /;
            );
     );

put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'//
put 'High measueres (All numbers in kW)' //
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put DemandResponse.l('high',years,months,daytypes,hours)
                 ) ;
            put /;
            );
     );
);
put //'+++++++++Demand Response Heating+++++++++'/
put 'Heating Measures'/
loop (years,put years.tl /;

put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'//
put 'Low Measueres (All numbers in kW)' //
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put DemandResponseheating.l('low',years,months,daytypes,hours)
            ) ;
            put /;
        );
     );

put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'//
put 'Mid Measueres (All numbers in kW)' //
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put DemandResponseheating.l('mid',years,months,daytypes,hours)
            ) ;
            put /;
            );
     );

put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'//
put 'High Measueres (All numbers in kW)' //
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put DemandResponseheating.l('high',years,months,daytypes,hours)
            ) ;
            put /;
        );
     );
);

* put //;
put /////;
put /'+++++++++Details for Electricity+++++++++'//
put 'Utility electricity consumption (All numbers in kW)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (Electricity_Purchase.l(years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);
put // 'Electricity Generation from DG (WITHOUT PV!) (All numbers in kW)' /
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put Electricity_Generation.l(years,months, daytypes, hours)
                 ) ;
            put /;
           );
      );
);
put // 'Electricity Generation from Photovoltaics (All numbers in kW)' /
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put Electricity_Photovoltaics.l (years,months, daytypes, hours)
                 ) ;
            put /;
           );
      );
);
put // 'Electricity exported from Photovoltaics (All numbers in kW)' /
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put Electricity_PV_export.l (years,months, daytypes, hours)
                 ) ;
            put /;
           );
      );
);
put // 'Electricity Input to Air Source Heat Pump (All numbers in kW)'
put 'Information: Electricity used by air source heat pump to provide both heat and cooling'/
put 'Check for peak, week and weekend.'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
     loop (months,
                put months.tl,
                loop (hours,
                      put (ElectricityForASHeatPump.l (years,MONTHS,DAYTYPES,HOURS)))
                      put /
                      )
          )
      ;
);

put // 'Electricity Input to Ground Source Heat Pump (All numbers in kW)'
put 'Information: Electricity used by ground source heat pump to provide both heat and cooling'/
put 'Check for peak, week and weekend.'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
     loop (months,
                put months.tl,
                loop (hours,
                      put (ElectricityForGSHeatPump.l (years, MONTHS,DAYTYPES,HOURS)))
                      put /
                      )
          )
      ;
);

put // 'Electricity Output from FLOW Battery (All numbers in kW)'/
put 'Information: Electricity output from battery multiplied with Efficiency Discharge gives electricity provided by the battery' /
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (FlowBatteryOutput.l (years, months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);

put // 'Electricity Input to FLOW Battery (All numbers in kWh)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (FlowBatteryInput.l (years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);

put // 'Electricity Lost due to self-discharge in FLOW Battery  (All numbers in kW)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (FlowBatteryLosses.l (years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);

put // 'Electricity Input to EV1 Batteries Taking into Sccount Charging Efficiency (All numbers in kWh)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (ElectricityStorageEVsInput.l (years, months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);

put // 'Electricity Stored in EV1 Batteries at each Hour (All numbers in kW)' /
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours,
            put (ElectricityStoredEVs.l (years,months,daytypes,hours) ) )
            put /
           )
      );
);

put // 'Electricity from EVs Provided by the EV1 Batteries Accounting for Efficiency at each Hour (All numbers in kW)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (Electricity_FromEVs.l (years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);

put // 'Electricity for EV Charging at each Hour (All numbers in kW)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (ElectricityForStorageEVs.l (years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);

put // 'Electricity Output from EVs not Accounting for Efficiency at each Hour (All numbers in kW)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (ElectricityStorageEVsOutput.l (years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);

put // 'Net EV Output (All numbers in kW)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (NetEVOutput.l (years,months,daytypes,hours)  )
                    )
                    put /
                    )
          )
     ;
);
put // 'BinaryDecision Variable Indicating Charging of EVs'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (BinaryCharge.l (years,months,daytypes,hours)  )
                    )
                    put /
                    )
          )
     ;
);
put // 'BinaryDecision Variable Indicating Discharging of EVs'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (BinaryDischarge.l (years,months,daytypes,hours)  )
                    )
                    put /
                    )
          )
     ;
);

put // 'Building Cooling: Electric Load Offset from Absorption Chillers (All numbers in kWh)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (coolingByAbsorption.l (years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);

put // 'Refrigeration: Electric Load Offset from Absorption Chillers (All numbers in kWh)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (RefrigerationByAbsorption.l (years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);
put //'Electricity Sales from PV and other DG (All numbers in kWh)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/

loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (ElectricSales.l(years,months,daytypes,hours)))
                    put /
                    )
          )
     ;
);

put // 'Load reduction due to load scheduling' /
loop (years,put years.tl /;
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '',daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put  (LoadReduction.l(years,months,daytypes,hours))
                 ) ;
            put /;
            );
     );
);
put //;

       put // 'Load increase due to load scheduling' /
loop (years,put years.tl /;
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '',daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put  (Loadincrease.l(years,months,daytypes,hours))
                 ) ;
            put /;
            );
     );
);

put //;
put /'+++++++++Financial EV Results+++++++++'//
put  'Billing Costs (All numbers in monetary units)'/
loop (years,put years.tl /;
loop (months,
     put months.tl,
     put (ElectricVehicleBilling.l (years,months)  )
     put /);
);
put // 'EV Payment, Payments Received from the Microgrid (All numbers in $)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl /;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (EV_Payment.l (years,months,daytypes,hours)  )
                    )
                    put /
                    )
          )
     ;
);

put // 'Yearly EV Payments, Yearly Payments Received from the Microgrid ($)'/
loop (years,put years.tl,
put Yearly_EV_Payment.l(years);
);
put // 'Microgrid-Benefit per year ($)'/
loop (years,put MicrogridBenefit.l(years));

put // 'Energy Processed per year, Anual Net EV Output(kWh)'/
loop (years, put EnergyprocessedEVsYearly.l(years));
put // 'Battery Degradation Cost ($) per year, Covered by the Microgrid'/
loop (years, put YearlyBatteryDegradationEVs.l(years));

put //;
put /'+++++++++Details for Heat+++++++++'//

put  'Total fraction of Recovered Heat / Heat provided by DER over all the period of time considered (all numbers in kWh)' //;
loop (daytypes, put daytypes.tl/;
         loop (years,put years.tl/;
              loop (months, put months.tl, (sum((hours), Heat_FromDG.l ( years, months, daytypes, hours))*NumberOfDays(months,daytypes))/;
              );
         );
);
put 'Grand Total over all the period of time considered', sum((years,months,daytypes),sum((hours), Heat_FromDG.l ( years, months, daytypes, hours))*NumberOfDays(months,daytypes))/;


put //'Heat Collected from DG (All numbers in kW)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (Heat_FromDG.l(years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);
put //'Heat Collected from NG (All numbers in kW)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (Heat_FromNG.l(years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);
put //'Heat Collected from Solar Thermal (All numbers in kW)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (Heat_FromSolar.l(years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);
put // 'Heat collected from Air Source Heat Pump (All numbers in kW)'
put 'Information: Heat collected from air source heat pump to provide heating'/
put 'Check for peak, week and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
     loop (months,
                put months.tl,
                loop (hours,
                      put (HeatingFromASHeatPump.l(years,MONTHS,DAYTYPES,HOURS)))
                      put /
                      )
          )
      ;
);

put // 'Heat collected from Ground Source Heat Pump (All numbers in kW)'
put 'Information: Heat collected from ground source heat pump to provide heating'/
put 'Check for peak, week and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
     loop (months,
                put months.tl,
                loop (hours,
                      put (HeatingFromGSHeatPump.l(years,MONTHS,DAYTYPES,HOURS)))
                      put /
                      )
          )
      ;
);
put //'Heat Supplied to Storage (All numbers in kWh)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (HeatStorageInput.l(years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);
put //'Heat taken from Storage (All numbers in kWh)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (HeatStorageOutput.l(years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);
put //'Heat lost to Decay in Storage Tank (All numbers in kWh)'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes,  put '', daytypes.tl /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (HeatStorageLosses.l(years,months,daytypes,hours)  ) )
                    put /
                    )
          )
     ;
);
put //;
put /'+++++++++Details for Cooling+++++++++'//

put // 'Cooling by Central Chiller (All numbers in kW)'
put 'Information: Cooling met by pre-installed central chiller, in terms of electric input'/
put 'Check for peak, week and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
     loop (months,
                put months.tl,
                loop (hours,
                      put (CoolingByElectric.l(years,MONTHS,DAYTYPES,HOURS))
                )
                put /
     )
 );
);
put // 'Cooling by Absorption (All numbers in kW)'
put 'Information: Cooling met by absorption chiller, in terms of electric input'/
put 'Check for peak, week and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
     loop (months,
                put months.tl,
                loop (hours,
                      put (CoolingByAbsorption.l(years,MONTHS,DAYTYPES,HOURS))
                )
                put /
     )
 )
);
put // 'Cooling by NG Chiller (All numbers in kW)'
put 'Information: Cooling met by NG chiller, in terms of electric input'/
put 'Check for peak, week and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
     loop (months,
                put months.tl,
                loop (hours,
                      put (CoolingByNGChill.l(years,MONTHS,DAYTYPES,HOURS))
                )
                put /
     )
 );
);
put // 'Cooling by Air Source Heat Pump (All numbers in kW)'
put 'Information: Cooling met by Air Source heat pumps, in terms of electric input'/
put 'Check for peak, week and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
     loop (months,
                put months.tl,
                loop (hours,
                      put (CoolingFromASHeatPump.l(years,MONTHS,DAYTYPES,HOURS))
                )
                put /
     )
 );
);
put // 'Cooling by Ground Source Heat Pump (All numbers in kW)'
put 'Information: Cooling met by Ground Source heat pumps, in terms of electric input'/
put 'Check for peak, week and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
     loop (months,
                put months.tl,
                loop (hours,
                      put (CoolingFromGSHeatPump.l(years,MONTHS,DAYTYPES,HOURS)))
                      put /
                      )
          )
      ;
);
put // 'Total KWh per year (All numbers in kW)'

parameter TotalKWH (TECHNOLOGIES,years);
loop (years,put years.tl/;
TotalKWH (AvailableTECHNOLOGIES,years)=
     sum ((months, daytypes,hours), (Generation_Use.l(AvailableTECHNOLOGIES, years, months, daytypes, hours)
     +    Generation_Sell.l(AvailableTECHNOLOGIES, years, months, daytypes, hours)) * NumberOfDays(months,daytypes)
          );
);

put ///
$ontext
put 'Distributed Energy Sources (DER) Data'/
put 'Tech Name', 'Rated Capacity (kW)', 'number of units',
     'cost per kW', 'unit lifetime (years)', 'Interest Rate rate',
     'O&M Fixed Costs ($/kW/year)', 'O&M Variable Cost ($/kWh)', 'Total kWh produced over all the period of time considered'/
     loop (TECHNOLOGIES,  put TECHNOLOGIES.tl, DEROPT (TECHNOLOGIES, 'maxp'),
     DER_Investment.l(TECHNOLOGIES), DEROPT (TECHNOLOGIES, 'capcost'),
     DEROPT (TECHNOLOGIES, 'lifetime'), ParameterTable('IntRate','ParameterValue'),
     DEROPT (TECHNOLOGIES, 'OMFix'), DEROPT (TECHNOLOGIES, 'OMVar'),
     sum(years,TotalKWH(TECHNOLOGIES,years))/
     );
$offtext;

put / 'Annuity of Capital Costs ($/kW)' /
loop (TECHNOLOGIES, put TECHNOLOGIES.tl;
put   (AnnuityRate_DiscTech(TECHNOLOGIES)*DEROPT (TECHNOLOGIES, 'capcost'))/;
);


put ///
put 'CONTINUOUS TECHNOLOGIES'/
put 'Upfront capital costs (All numbers in $)'/
loop (ContinuousInvestType,
     put ContinuousInvestType.tl
     put '   '
     loop(years, put UpfrontCapitalCost_ContTech.l (ContinuousInvestType,years));put /;
     );

put /
put 'CONTINUOUS TECHNOLOGIES'/
put 'Annualized Capital Costs (All numbers in $)'/
put ' ',' ',loop (years,put years.tl);
put /
loop (ContinuousInvestType,
     put ContinuousInvestType.tl
     put '   '
     loop (years,
             put AnnualizedCapitalCost_ContTech.l (ContinuousInvestType,years))
             put /
)
$ontext
put//;
put 'Volumetric Electric Costs (All numbers in $)'/
'on = on peak; mid = mid peak; off = off peak'/;
put '';
loop (years,put years.tl/;
put '',loop (TimeOfDay, put TimeOfDay.tl)
put /
loop (months,
        put months.tl,
        loop (TimeOfDay,
             put (ElectricTOUCostByTOU.l(years,months,TimeOfDay)  ) )
             put /
       )
     ;
);
$offtext
put//;
put 'Daily Demand Charges (All numbers in $/kW)'/
put ' ',' ';
loop (DemandType, put DemandType.tl)
put /;
loop (years,put years.tl/;
loop (daytypes,
     loop (months,
          put months.tl, daytypes.tl,
          loop (DemandType, put DailyDemandCharge.l(years,months,daytypes,DemandType))
          put /
          )
     );
);

put//;
put 'Monthly Demand Charges (All numbers in $/kW)'/
put '';
loop (DemandType, put DemandType.tl)
put /;
loop(years, put '', put years.tl,
loop (months,
     put months.tl,
     loop (DemandType, put MonthlyDemandRates(years,months,DemandType))
     put /
     );
);

put ///'+++++++++Report of selected Input Data+++++++++'/

Put / 'Used COP absorption chillers',COPabs /;
Put  'Used COP electric chillers',COPelectric   //;

put 'Time of use electricity prices ($/kWH)'/
put 'on = on peak; mid = mid peak; off = off peak'/;
put '';
loop (TimeOfDay, put TimeOfDay.tl)
put / ;
loop (years,put years.tl/;
loop (months,
        put months.tl,
        loop (TimeOfDay,
             put sum(daytypes, sum(hours,(ElectricityRates(years,months,daytypes,hours)))))
             put /
      );
);

put  //'Fuel prices' /;
put ''
loop (fueltype,  put fueltype.tl);
put /;
loop (years,put years.tl/;
loop (months, put months.tl;
      loop (fueltype, put FuelPrice(years,months,fueltype)
           );
      put /;
      );
);

put  //'Monthly fixed fees' /;
loop (years, put years.tl/;
   loop (service, put service.tl,MonthlyFee (years,service)/;
         );
);

put //'TOU hours'/
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put HoursByMonth(hours, months, daytypes)
                 ) ;
            put /;
            );
     );

put ///'+++++++++Report of Load Profiles (Input Data)+++++++++'/
loop (years,put years.tl/;

put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'//
put 'Electricity only Load (All numbers in kW)' //
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put load (years,'electricity-only', months, daytypes, hours)
                 ) ;
            put /;
            );
     );

put // 'Cooling Load for year ... (All numbers in kW)' /
put 'Please note that in DER-CAM cooling loads are expressed ' /
put 'in electricity needed to serve the cooling demand.'/
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '',daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put load (years,'cooling', months, daytypes, hours)
                 ) ;
            put /;
            );
     );

put // 'Refrigeration Load for year ...(All numbers in kW)' /
put 'Please note that in DER-CAM refrigeration loads are expressed ' /
put 'in electricity needed to serve the refrigeration demand.'/
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '',daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put load (years,'refrigeration', months, daytypes, hours)
                 ) ;
            put /;
            );
     );

put // 'Space Heating Load for year ...(All numbers in kW)' /
put 'Conversation factor: 1 kW = 3412.14 BTU/h' /
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '',daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put load (years,'space-heating', months, daytypes, hours)
                 ) ;
            put /;
            );
     );

put // 'Water Heating Load for year ...(All numbers in kW)' /
put 'Conversation factor: 1 kW = 3412.14 BTU/h' /
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '',daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put load (years,'water-heating', months, daytypes, hours)
                 ) ;
            put /;
            );
     );

put // 'Naturalgas only Load for year ...(All numbers in kW)' /
put 'Conversation factor: 1 kW = 3412.14 BTU/h' /
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '',daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put load (years,'naturalgas-only', months, daytypes, hours)
                 ) ;
            put /;
            );
     );

put // 'Total Load for year ...(All numbers in kW)' /
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '',daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put sum(enduse, load (years,enduse, months, daytypes, hours))
            ) ;
            put /;
      );
  );

);

put ///'+++++++++Control Outputs+++++++++'/
put // 'SolarThermalEfficiency'/
put 'hour';
loop (hours, put hours.tl);
put /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (SolarThermalEfficiency(months,hours)))
                    put /
                    )

     ;

put / 'Average Solar Thermal Efficiency', SolarThermalAverageEfficiency;

put // 'PV Efficiency'/
put 'hour';
loop (hours, put hours.tl);
put /;
     loop (months,
               put months.tl,
               loop (hours,
                    put (PVefficiency(months,hours)))
                    put /
                    )
     ;


put // 'Purchases: Control Output' /
loop (years,put years.tl/;
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '',daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put  PurchaseOrSale.l(years,months,daytypes,hours)
                 ) ;
            put /;
            );
     );
);

put // 'Sales: Control Output' /
loop (years,put years.tl/;
put 'hour';
loop (hours,put hours.tl);
put /;
loop (daytypes, put '',daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours, put  (1-PurchaseOrSale.l(years,months,daytypes,hours))
                 ) ;
            put /;
            );
     );
);

put //;

put // 'SOC in EV batteries at each hour (All numbers in kW)' /
$ontext
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours,
            put (ElectricityStoredEVs.l (years,months,daytypes,hours)/Capacity.l('EVs1') ) )
            put /
           )
      );
);
put // 'minSOC (for verification only)' /

put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours,
            put (MinimumStateofChargeEVs(years, months, daytypes, hours)  ) )
            put /
           )
      );
);

put // 'maxSOC (for verification only)' /

put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours,
            put (MaximumStateofChargeEVs(years,months, daytypes, hours)  ) )
            put /
           )
      );
);
$offtext
put // 'PV - total electricity consumption (building) + net from Evs [kWh]' /
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours,
            put (Electricity_Photovoltaics.l (years,months, daytypes, hours)-sum(enduse, load (years,enduse, months, daytypes, hours))+NetEVOutput.l(years,months,daytypes,hours)  ) )
            put /
           )
      );
);

put // 'PV + grid - total electricity consumption (building) + net from Evs  [kWh]' /
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours,
            put (Electricity_Photovoltaics.l (years,months, daytypes, hours)+Electricity_Purchase.l(years,months,daytypes,hours)-sum(enduse, load (years,enduse, months, daytypes, hours))+NetEVOutput.l(years,months,daytypes,hours)  ) )
            put /
           )
      );
);
put // 'PV - total electricity consumption (building)  [kWh]' /
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours,
            put (Electricity_Photovoltaics.l (years,months, daytypes, hours)-sum(enduse, load (years,enduse, months, daytypes, hours))  ) )
            put /
           )
      );
);
*2013/06/28. Lenaig reorganised the way to present the results.
put // 'MonthlyNightlyMarginalCO2EmissionsResidential(years,months)  [kg/kWh ??] '/
put 'year', loop (years, put years.tl);
put /
loop (months, put months.tl,
      loop (years, put MonthlyNightlyMarginalCO2EmissionsResidential(years,months)
      )
      put /
);

put // 'EVHomeElectricityCO2Cost(years,months) [$]' /
put 'year', loop (years, put years.tl);
put /
loop (months, put months.tl,
      loop (years, put EVHomeElectricityCO2Cost.l(years,months)
      )
      put /
);

put // 'CO2fromEVsHomeCharging(years,months) [kg]' /
put 'year', loop (years, put years.tl);
put /
loop (months, put months.tl,
      loop (years, put CO2fromEVsHomeCharging.l(years,months)
      )
      put /
);

put // 'NetEVOutput(years,months,daytypes,hours)  (All numbers in kW)' /

put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours,
            put (NetEVOutput.l(years,months,daytypes,hours) ) )
            put /
           )
      );
);

put // 'NetEVOutput(years,months,daytypes,hours) aggregated per month [kWh per month]' /
put 'year', loop (years, put years.tl);
put /
loop (months, put months.tl,
      loop (years, put sum((daytypes,hours), numberofdays(months,daytypes)*NetEVOutput.l(years,months,daytypes,hours))
      )
      put /
);

put // 'EVsElectricityFromHome(years,months,daytypes) aggregated per month [kWh per month]' /
put 'year', loop (years, put years.tl);
put /
loop (months, put months.tl,
      loop (years,
           put sum((daytypes,hours)$(ord(hours) >= ElectricityStorageEVParameter('BeginingHomeCharge') or ord(hours) <= ElectricityStorageEVParameter('EndHomeCharge')), numberofdays(months,daytypes)*EVsElectricityFromHome.l(years,months,daytypes))
      )
      put /
);

put // 'NetEVOutput(years,months,daytypes,hours) aggregated per month DIVIDED by EVsElectricityFromHome(years,months,daytypes) [-]'
put  /'should be a constant ratio if charge/discharge pattern does not change over months, relatively similar otherwise' //
put 'year', loop (years, put years.tl);
put /
loop (months, put months.tl,
      loop (years,
         put (sum((daytypes,hours), numberofdays(months,daytypes)*NetEVOutput.l(years,months,daytypes,hours)) /
              sum((daytypes,hours)$(ord(hours) >= ElectricityStorageEVParameter('BeginingHomeCharge') or ord(hours) <= ElectricityStorageEVParameter('EndHomeCharge')), numberofdays(months,daytypes)*EVsElectricityFromHome.l(years,months,daytypes))
             )
      )
      put /
);

put // 'CO2fromEVsHomeCharging(years,months) / EVsElectricityFromHome(years,months,daytypes) aggregated per month [kWh per month] -  MonthlyNightlyMarginalCO2EmissionsResidential(years, months) [kg per month] /[kWh per month]' /
put 'should be 0'/
put 'year', loop (years, put years.tl);
put /
loop (months, put months.tl,
      loop (years,
         put(CO2fromEVsHomeCharging.l(years,months)/sum((daytypes,hours)$(ord(hours) >= ElectricityStorageEVParameter('BeginingHomeCharge') or ord(hours) <= ElectricityStorageEVParameter('EndHomeCharge')), numberofdays(months,daytypes)*EVsElectricityFromHome.l(years,months,daytypes))
         - MonthlyNightlyMarginalCO2EmissionsResidential(years,months) )
      )
      put /
);

put // 'positive part of NetEVOutput(years,months,daytypes,hours)  (All numbers in kW)' /
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours,
            put (NetEVOutput.l(years,months,daytypes,hours)$(NetEVOutput.l(years,months,daytypes,hours)>0) ) )
            put /
           )
      );
);

put // 'negative part of NetEVOutput(years,months,daytypes,hours)  (All numbers in kW)' /

put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
loop (years,put years.tl/;
put 'hour';
loop (hours, put hours.tl);
put /;
loop (daytypes, put '', daytypes.tl /;
      loop (months, put months.tl ;
            loop (hours,
            put (NetEVOutput.l(years,months,daytypes,hours)$(NetEVOutput.l(years,months,daytypes,hours)<0) ) )
            put /
           )
      );
);
put //'Bloc of yearly data'/
put 'year', loop (years, put years.tl);
put /
put 'Yearly EV Payment, not including battery degradation',
    loop(years, put  Yearly_EV_Payment.l(years)) ; put /
put 'Yearly EV Payment per car, not including battery degradation',
    loop(years, put (Yearly_EV_Payment.l(years)/(CapacityAddedInYearY.l('EVs1','1')/16))) ; put /
put 'Yearly Battery Degradation EVs total',
    loop(years, put  YearlyBatteryDegradationEVs.l(years)) ; put /
put 'Yearly Battery Degradation EVs per car',
    loop(years, put (YearlyBatteryDegradationEVs.l(years)/(CapacityAddedInYearY.l('EVs1','1')/16))) ; put /
put 'Building to EV energy payment per car',
    loop(years, put sum((months), ElectricVehicleBilling.l(years,months)) /(CapacityAddedInYearY.l('EVs1','1')/16)) ; put /
put 'EV connection payment per car (for year 1)',
    loop(years, put (EV_connection_payment.l('1')/(CapacityAddedInYearY.l('EVs1','1')/16))) ; put /
put 'Building benefit (after battery degradation repayment and energy cost to EVs payment',
    loop(years, put MicrogridBenefit.l(years)) ; put /
put 'RemainingSpacePVSolar_Eq',
    loop(years, put RemainingSpacePVSolar.l(years)) ; put /
put 'Number Static Switch';
    loop(years, put switchpurchase.l(years)); put/;

put /
put 'Electricity Generation from discrete technology (All numbers in kW)' /
put 'Note peakday, weekday, and weekendday profiles are available in this section.'/
put 'Check for peak, week, and weekend.'/
put /
loop (TECHNOLOGIES, put TECHNOLOGIES.tl /;
  loop (years,put years.tl/;
     put 'hour';
     loop (hours, put hours.tl);
     put /;
     loop (daytypes, put '', daytypes.tl /;
           loop (months, put months.tl ;
                 loop (hours, put Electricity_Generation_Technology.l(TECHNOLOGIES,years,months,daytypes,hours)
                      ) ;
                 put /;
                 );
           );
     put ''/;
  );
);

execute 'del cplex.opt NY_DER-CAM.lxi NY_DER-CAM.log';
